import ReturnResults.dzn;
import ExternalInterfaces.dzn;

interface iCommands
{
	in returnResult findTheBall();
	in returnResult getToTheBall();
	in returnResult shootTheBall();

	behaviour
  	{
  		on findTheBall:{
  			reply(returnResult.succes);
  		}
  		on findTheBall:{
  			reply(returnResult.fail);
  		}
  		on getToTheBall:{
  			reply(returnResult.succes);
  		}
  		on getToTheBall:{
  			reply(returnResult.fail);
  		}
  		on shootTheBall:{
  			reply(returnResult.succes);
  		}
  		on shootTheBall:{
  			reply(returnResult.fail);
  		}
  		
  	}
}

interface iWheelControl
{
	in returnResult getToTheBall();
	
	behaviour
  	{
    	on getToTheBall:
   		{
   			reply(returnResult.succes);
   		}
   		on getToTheBall:
   		{
   			reply(returnResult.fail);
   		}
  	}
}

interface iBallControl
{	
	in returnResult shootTheBall();
	
	behaviour
  	{
    	on shootTheBall:
   		{
   			reply(returnResult.succes);
   		}
   		on shootTheBall:
   		{
   			reply(returnResult.fail);
   		}
  	}
}

interface iPositioningControl
{
	in returnResult findTheBall();
	
	behaviour
	{
	  	on findTheBall:
   		{
   			reply(returnResult.succes);
   		}
   		on findTheBall:
   		{
   			reply(returnResult.fail);
   		}
	}
}


component Tactics
{
	provides iControl My_Control;
	
	requires iCommands My_Commands;
	
	behaviour 
	{
		bool busy = false;
		bool failure = false;
		returnResult returnCheck1 = returnResult.succes;
		returnResult returnCheck2 = returnResult.succes;
		returnResult returnCheck3 = returnResult.succes;
		
    	[busy] on My_Control.tac_getTheBall(): 
    	{
    		reply(returnResult.busy);
    	}
    	[busy] on My_Control.tac_shootBall(): 
    	{
    		reply(returnResult.busy);
    	}
    	[busy] on My_Control.tac_attack(): 
    	{
    		reply(returnResult.busy);
    	}
    	[!busy] on My_Control.tac_getTheBall():
    	{
    		returnCheck1 = My_Commands.findTheBall();
    		returnCheck2 = My_Commands.getToTheBall();
    		if((returnCheck1 == returnResult.succes) && (returnCheck2 == returnResult.succes) && (returnCheck3 == returnResult.succes))
	    	{
	    		reply(returnResult.succes);
	    	}
	    	else
	    	{
	    		reply(returnResult.fail);
	    	}
    	}
    	[!busy] on My_Control.tac_shootBall():
    	{
    		returnCheck1 = My_Commands.shootTheBall();
    		if((returnCheck1 == returnResult.succes) && (returnCheck2 == returnResult.succes) && (returnCheck3 == returnResult.succes))
	    	{
	    		reply(returnResult.succes);
	    	}
	    	else
	    	{
	    		reply(returnResult.fail);
	    	}
    	}
    	[!busy] on My_Control.tac_attack():
    	{
    		returnCheck1 = My_Commands.findTheBall();
    		returnCheck2 = My_Commands.getToTheBall();
    		returnCheck3 = My_Commands.shootTheBall();
    		if((returnCheck1 == returnResult.succes) && (returnCheck2 == returnResult.succes) && (returnCheck3 == returnResult.succes))
	    	{
	    		reply(returnResult.succes);
	    	}
	    	else
	    	{
	    		reply(returnResult.fail);
	    	}
    	}   
    	
	}
}

component Commands
{
	provides iCommands My_Commands;
	
	requires iBallControl My_BallControl;
	requires iWheelControl My_WheelControl;
	requires iPositioningControl My_PositioningControl;
	      
	behaviour
	{
		on My_Commands.shootTheBall():
		{
			returnResult result = returnResult.fail;
			result = My_BallControl.shootTheBall();
			if(result == returnResult.succes)
			{
				reply(returnResult.succes);
			}
			else
			{
				reply(returnResult.fail);
			}	
		}
		on My_Commands.findTheBall():
		{
			returnResult x = returnResult.fail;
			x = My_PositioningControl.findTheBall();
			if(x == returnResult.succes)
			{
				reply(returnResult.succes);
			}
			else
			{
				reply(returnResult.fail);
			}
		}
		on My_Commands.getToTheBall():
		{
			returnResult result = returnResult.fail;
			result = My_WheelControl.getToTheBall();
			if(result == returnResult.succes)
			{
				reply(returnResult.succes);
			}
			else
			{
				reply(returnResult.fail);
			}
		}
	}
}

component BallControl
{
	provides iBallControl My_BallControl;
	
	requires iBallHandling My_BallHandling;
	requires iShooting My_Shooting;
	
	behaviour
	{
		on My_BallControl.shootTheBall():
		{
			returnResult result = returnResult.fail;
			result = My_Shooting.shootTheBall();
			reply(result);
		}
	}
	
}

component WheelControl
{
	provides iWheelControl My_WheelControl;
	
	requires iWheelDriver My_WheelDriver;
	
	behaviour
	{
		on My_WheelControl.getToTheBall():
		{
			returnResult result = returnResult.fail;
			result = My_WheelDriver.getToTheBall();
			reply(result);
		}	
	}
}

component PositioningControl
{
  	provides iPositioningControl My_PositioningControl;
  	
  	requires iWorldModel My_WorldModel;
  	requires iNavigation My_Navigation;
  	
  	behaviour
	{
		on My_PositioningControl.findTheBall():
		{
			returnResult result = returnResult.fail;
			result = My_WorldModel.findTheBall();
			reply(result);
		}
	}
  	
}

component Robot
{
  	provides iControl My_Control;

	requires iBallHandling My_BallHandling;
	requires iShooting My_Shooting;
  	requires iWheelDriver My_WheelDriver;
  	requires iWorldModel My_WorldModel;
  	requires iNavigation My_Navigation;


  	system
  	{
  		Tactics tactics;
  		
  		Commands commands;
  		
	    BallControl ballcontrol;
	    WheelControl wheelcontrol;
	    PositioningControl positioningcontrol;
	    	
	    My_Control <=> tactics.My_Control;
	    
	    tactics.My_Commands <=> commands.My_Commands;
	    
	    commands.My_BallControl <=> ballcontrol.My_BallControl;
	    commands.My_WheelControl <=> wheelcontrol.My_WheelControl;
	    commands.My_PositioningControl <=> positioningcontrol.My_PositioningControl;
	    
	    ballcontrol.My_BallHandling <=> My_BallHandling;
	    ballcontrol.My_Shooting <=> My_Shooting;
	    
	    wheelcontrol.My_WheelDriver <=> My_WheelDriver;
	    
	    positioningcontrol.My_WorldModel <=> My_WorldModel;
	    positioningcontrol.My_Navigation <=> My_Navigation;
  	}
}
