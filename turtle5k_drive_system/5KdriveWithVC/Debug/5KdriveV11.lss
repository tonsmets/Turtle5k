
5KdriveV11.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d70  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00802000  00002d70  00002e04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000022d  0080201c  0080201c  00002e20  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002e20  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000003d0  00000000  00000000  00002e50  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000cced  00000000  00000000  00003220  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001a1d  00000000  00000000  0000ff0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00005f4e  00000000  00000000  0001192a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000126c  00000000  00000000  00017878  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0002aac5  00000000  00000000  00018ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00004b08  00000000  00000000  000435a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000380  00000000  00000000  000480b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000a561  00000000  00000000  00048438  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
       2:	00 00       	nop
       4:	19 c1       	rjmp	.+562    	; 0x238 <__bad_interrupt>
       6:	00 00       	nop
       8:	17 c1       	rjmp	.+558    	; 0x238 <__bad_interrupt>
       a:	00 00       	nop
       c:	15 c1       	rjmp	.+554    	; 0x238 <__bad_interrupt>
       e:	00 00       	nop
      10:	13 c1       	rjmp	.+550    	; 0x238 <__bad_interrupt>
      12:	00 00       	nop
      14:	11 c1       	rjmp	.+546    	; 0x238 <__bad_interrupt>
      16:	00 00       	nop
      18:	0f c1       	rjmp	.+542    	; 0x238 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	0d c1       	rjmp	.+538    	; 0x238 <__bad_interrupt>
      1e:	00 00       	nop
      20:	0b c1       	rjmp	.+534    	; 0x238 <__bad_interrupt>
      22:	00 00       	nop
      24:	09 c1       	rjmp	.+530    	; 0x238 <__bad_interrupt>
      26:	00 00       	nop
      28:	07 c1       	rjmp	.+526    	; 0x238 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	05 c1       	rjmp	.+522    	; 0x238 <__bad_interrupt>
      2e:	00 00       	nop
      30:	03 c1       	rjmp	.+518    	; 0x238 <__bad_interrupt>
      32:	00 00       	nop
      34:	01 c1       	rjmp	.+514    	; 0x238 <__bad_interrupt>
      36:	00 00       	nop
      38:	0c 94 12 0b 	jmp	0x1624	; 0x1624 <__vector_14>
      3c:	0c 94 3f 0b 	jmp	0x167e	; 0x167e <__vector_15>
      40:	0c 94 6c 0b 	jmp	0x16d8	; 0x16d8 <__vector_16>
      44:	0c 94 99 0b 	jmp	0x1732	; 0x1732 <__vector_17>
      48:	0c 94 c6 0b 	jmp	0x178c	; 0x178c <__vector_18>
      4c:	0c 94 f3 0b 	jmp	0x17e6	; 0x17e6 <__vector_19>
      50:	0c 94 20 0c 	jmp	0x1840	; 0x1840 <__vector_20>
      54:	0c 94 4d 0c 	jmp	0x189a	; 0x189a <__vector_21>
      58:	0c 94 7a 0c 	jmp	0x18f4	; 0x18f4 <__vector_22>
      5c:	0c 94 a7 0c 	jmp	0x194e	; 0x194e <__vector_23>
      60:	eb c0       	rjmp	.+470    	; 0x238 <__bad_interrupt>
      62:	00 00       	nop
      64:	e9 c0       	rjmp	.+466    	; 0x238 <__bad_interrupt>
      66:	00 00       	nop
      68:	e7 c0       	rjmp	.+462    	; 0x238 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	e5 c0       	rjmp	.+458    	; 0x238 <__bad_interrupt>
      6e:	00 00       	nop
      70:	e3 c0       	rjmp	.+454    	; 0x238 <__bad_interrupt>
      72:	00 00       	nop
      74:	e1 c0       	rjmp	.+450    	; 0x238 <__bad_interrupt>
      76:	00 00       	nop
      78:	df c0       	rjmp	.+446    	; 0x238 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	dd c0       	rjmp	.+442    	; 0x238 <__bad_interrupt>
      7e:	00 00       	nop
      80:	db c0       	rjmp	.+438    	; 0x238 <__bad_interrupt>
      82:	00 00       	nop
      84:	d9 c0       	rjmp	.+434    	; 0x238 <__bad_interrupt>
      86:	00 00       	nop
      88:	d7 c0       	rjmp	.+430    	; 0x238 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	d5 c0       	rjmp	.+426    	; 0x238 <__bad_interrupt>
      8e:	00 00       	nop
      90:	d3 c0       	rjmp	.+422    	; 0x238 <__bad_interrupt>
      92:	00 00       	nop
      94:	d1 c0       	rjmp	.+418    	; 0x238 <__bad_interrupt>
      96:	00 00       	nop
      98:	cf c0       	rjmp	.+414    	; 0x238 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	cd c0       	rjmp	.+410    	; 0x238 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	cb c0       	rjmp	.+406    	; 0x238 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	c9 c0       	rjmp	.+402    	; 0x238 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	c7 c0       	rjmp	.+398    	; 0x238 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	c5 c0       	rjmp	.+394    	; 0x238 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	c3 c0       	rjmp	.+390    	; 0x238 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c1 c0       	rjmp	.+386    	; 0x238 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	bf c0       	rjmp	.+382    	; 0x238 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 96 0e 	jmp	0x1d2c	; 0x1d2c <__vector_47>
      c0:	0c 94 c3 0e 	jmp	0x1d86	; 0x1d86 <__vector_48>
      c4:	0c 94 f0 0e 	jmp	0x1de0	; 0x1de0 <__vector_49>
      c8:	0c 94 1d 0f 	jmp	0x1e3a	; 0x1e3a <__vector_50>
      cc:	0c 94 4a 0f 	jmp	0x1e94	; 0x1e94 <__vector_51>
      d0:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__vector_52>
      d4:	0c 94 a4 0f 	jmp	0x1f48	; 0x1f48 <__vector_53>
      d8:	0c 94 d1 0f 	jmp	0x1fa2	; 0x1fa2 <__vector_54>
      dc:	0c 94 fe 0f 	jmp	0x1ffc	; 0x1ffc <__vector_55>
      e0:	0c 94 2b 10 	jmp	0x2056	; 0x2056 <__vector_56>
      e4:	a9 c0       	rjmp	.+338    	; 0x238 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	a7 c0       	rjmp	.+334    	; 0x238 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	a5 c0       	rjmp	.+330    	; 0x238 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	a3 c0       	rjmp	.+326    	; 0x238 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a1 c0       	rjmp	.+322    	; 0x238 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	9f c0       	rjmp	.+318    	; 0x238 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	9d c0       	rjmp	.+314    	; 0x238 <__bad_interrupt>
      fe:	00 00       	nop
     100:	9b c0       	rjmp	.+310    	; 0x238 <__bad_interrupt>
     102:	00 00       	nop
     104:	99 c0       	rjmp	.+306    	; 0x238 <__bad_interrupt>
     106:	00 00       	nop
     108:	97 c0       	rjmp	.+302    	; 0x238 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	95 c0       	rjmp	.+298    	; 0x238 <__bad_interrupt>
     10e:	00 00       	nop
     110:	93 c0       	rjmp	.+294    	; 0x238 <__bad_interrupt>
     112:	00 00       	nop
     114:	91 c0       	rjmp	.+290    	; 0x238 <__bad_interrupt>
     116:	00 00       	nop
     118:	8f c0       	rjmp	.+286    	; 0x238 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	8d c0       	rjmp	.+282    	; 0x238 <__bad_interrupt>
     11e:	00 00       	nop
     120:	8b c0       	rjmp	.+278    	; 0x238 <__bad_interrupt>
     122:	00 00       	nop
     124:	89 c0       	rjmp	.+274    	; 0x238 <__bad_interrupt>
     126:	00 00       	nop
     128:	87 c0       	rjmp	.+270    	; 0x238 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	85 c0       	rjmp	.+266    	; 0x238 <__bad_interrupt>
     12e:	00 00       	nop
     130:	83 c0       	rjmp	.+262    	; 0x238 <__bad_interrupt>
     132:	00 00       	nop
     134:	0c 94 d4 0c 	jmp	0x19a8	; 0x19a8 <__vector_77>
     138:	0c 94 01 0d 	jmp	0x1a02	; 0x1a02 <__vector_78>
     13c:	0c 94 2e 0d 	jmp	0x1a5c	; 0x1a5c <__vector_79>
     140:	0c 94 5b 0d 	jmp	0x1ab6	; 0x1ab6 <__vector_80>
     144:	0c 94 88 0d 	jmp	0x1b10	; 0x1b10 <__vector_81>
     148:	0c 94 b5 0d 	jmp	0x1b6a	; 0x1b6a <__vector_82>
     14c:	0c 94 e2 0d 	jmp	0x1bc4	; 0x1bc4 <__vector_83>
     150:	0c 94 0f 0e 	jmp	0x1c1e	; 0x1c1e <__vector_84>
     154:	0c 94 3c 0e 	jmp	0x1c78	; 0x1c78 <__vector_85>
     158:	0c 94 69 0e 	jmp	0x1cd2	; 0x1cd2 <__vector_86>
     15c:	6d c0       	rjmp	.+218    	; 0x238 <__bad_interrupt>
     15e:	00 00       	nop
     160:	6b c0       	rjmp	.+214    	; 0x238 <__bad_interrupt>
     162:	00 00       	nop
     164:	69 c0       	rjmp	.+210    	; 0x238 <__bad_interrupt>
     166:	00 00       	nop
     168:	67 c0       	rjmp	.+206    	; 0x238 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	65 c0       	rjmp	.+202    	; 0x238 <__bad_interrupt>
     16e:	00 00       	nop
     170:	63 c0       	rjmp	.+198    	; 0x238 <__bad_interrupt>
     172:	00 00       	nop
     174:	61 c0       	rjmp	.+194    	; 0x238 <__bad_interrupt>
     176:	00 00       	nop
     178:	5f c0       	rjmp	.+190    	; 0x238 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	5d c0       	rjmp	.+186    	; 0x238 <__bad_interrupt>
     17e:	00 00       	nop
     180:	5b c0       	rjmp	.+182    	; 0x238 <__bad_interrupt>
     182:	00 00       	nop
     184:	59 c0       	rjmp	.+178    	; 0x238 <__bad_interrupt>
     186:	00 00       	nop
     188:	57 c0       	rjmp	.+174    	; 0x238 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	55 c0       	rjmp	.+170    	; 0x238 <__bad_interrupt>
     18e:	00 00       	nop
     190:	53 c0       	rjmp	.+166    	; 0x238 <__bad_interrupt>
     192:	00 00       	nop
     194:	51 c0       	rjmp	.+162    	; 0x238 <__bad_interrupt>
     196:	00 00       	nop
     198:	4f c0       	rjmp	.+158    	; 0x238 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	4d c0       	rjmp	.+154    	; 0x238 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	4b c0       	rjmp	.+150    	; 0x238 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	49 c0       	rjmp	.+146    	; 0x238 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	47 c0       	rjmp	.+142    	; 0x238 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	45 c0       	rjmp	.+138    	; 0x238 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	0c 94 58 10 	jmp	0x20b0	; 0x20b0 <__vector_108>
     1b4:	0c 94 85 10 	jmp	0x210a	; 0x210a <__vector_109>
     1b8:	0c 94 b2 10 	jmp	0x2164	; 0x2164 <__vector_110>
     1bc:	0c 94 df 10 	jmp	0x21be	; 0x21be <__vector_111>
     1c0:	0c 94 0c 11 	jmp	0x2218	; 0x2218 <__vector_112>
     1c4:	0c 94 39 11 	jmp	0x2272	; 0x2272 <__vector_113>
     1c8:	37 c0       	rjmp	.+110    	; 0x238 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	35 c0       	rjmp	.+106    	; 0x238 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	33 c0       	rjmp	.+102    	; 0x238 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	31 c0       	rjmp	.+98     	; 0x238 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	2f c0       	rjmp	.+94     	; 0x238 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	27 c5       	rjmp	.+2638   	; 0xc2c <__vector_119>
     1de:	00 00       	nop
     1e0:	2b c0       	rjmp	.+86     	; 0x238 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	5b c5       	rjmp	.+2742   	; 0xc9c <__vector_121>
     1e6:	00 00       	nop
     1e8:	27 c0       	rjmp	.+78     	; 0x238 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	25 c0       	rjmp	.+74     	; 0x238 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	23 c0       	rjmp	.+70     	; 0x238 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	21 c0       	rjmp	.+66     	; 0x238 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	1f c0       	rjmp	.+62     	; 0x238 <__bad_interrupt>
	...

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	cd bf       	out	0x3d, r28	; 61
     204:	df e2       	ldi	r29, 0x2F	; 47
     206:	de bf       	out	0x3e, r29	; 62

00000208 <__do_copy_data>:
     208:	10 e2       	ldi	r17, 0x20	; 32
     20a:	a0 e0       	ldi	r26, 0x00	; 0
     20c:	b0 e2       	ldi	r27, 0x20	; 32
     20e:	e0 e7       	ldi	r30, 0x70	; 112
     210:	fd e2       	ldi	r31, 0x2D	; 45
     212:	00 e0       	ldi	r16, 0x00	; 0
     214:	0b bf       	out	0x3b, r16	; 59
     216:	02 c0       	rjmp	.+4      	; 0x21c <__do_copy_data+0x14>
     218:	07 90       	elpm	r0, Z+
     21a:	0d 92       	st	X+, r0
     21c:	ac 31       	cpi	r26, 0x1C	; 28
     21e:	b1 07       	cpc	r27, r17
     220:	d9 f7       	brne	.-10     	; 0x218 <__do_copy_data+0x10>

00000222 <__do_clear_bss>:
     222:	22 e2       	ldi	r18, 0x22	; 34
     224:	ac e1       	ldi	r26, 0x1C	; 28
     226:	b0 e2       	ldi	r27, 0x20	; 32
     228:	01 c0       	rjmp	.+2      	; 0x22c <.do_clear_bss_start>

0000022a <.do_clear_bss_loop>:
     22a:	1d 92       	st	X+, r1

0000022c <.do_clear_bss_start>:
     22c:	a9 34       	cpi	r26, 0x49	; 73
     22e:	b2 07       	cpc	r27, r18
     230:	e1 f7       	brne	.-8      	; 0x22a <.do_clear_bss_loop>
     232:	63 d5       	rcall	.+2758   	; 0xcfa <main>
     234:	0c 94 b6 16 	jmp	0x2d6c	; 0x2d6c <_exit>

00000238 <__bad_interrupt>:
     238:	e3 ce       	rjmp	.-570    	; 0x0 <__vectors>

0000023a <board_init>:
#include <board.h>
#include <conf_board.h>
#include <avr/io.h>

void board_init(void)
{
     23a:	cf 93       	push	r28
     23c:	df 93       	push	r29
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
     23e:	87 e0       	ldi	r24, 0x07	; 7
     240:	e0 ea       	ldi	r30, 0xA0	; 160
     242:	f0 e0       	ldi	r31, 0x00	; 0
     244:	82 83       	std	Z+2, r24	; 0x02
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
	pmic_init();
	sysclk_init();
     246:	c2 d7       	rcall	.+3972   	; 0x11cc <sysclk_init>
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
     248:	a0 ea       	ldi	r26, 0xA0	; 160
     24a:	b6 e0       	ldi	r27, 0x06	; 6
     24c:	30 e1       	ldi	r19, 0x10	; 16
     24e:	11 96       	adiw	r26, 0x01	; 1
     250:	3c 93       	st	X, r19
     252:	11 97       	sbiw	r26, 0x01	; 1
     254:	20 e2       	ldi	r18, 0x20	; 32
     256:	11 96       	adiw	r26, 0x01	; 1
     258:	2c 93       	st	X, r18
     25a:	11 97       	sbiw	r26, 0x01	; 1
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
     25c:	e0 e8       	ldi	r30, 0x80	; 128
     25e:	f6 e0       	ldi	r31, 0x06	; 6
     260:	81 e0       	ldi	r24, 0x01	; 1
     262:	82 83       	std	Z+2, r24	; 0x02
     264:	92 e0       	ldi	r25, 0x02	; 2
     266:	92 83       	std	Z+2, r25	; 0x02
     268:	84 e0       	ldi	r24, 0x04	; 4
     26a:	82 83       	std	Z+2, r24	; 0x02
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 93       	st	X, r25
     270:	11 97       	sbiw	r26, 0x01	; 1
     272:	c0 e6       	ldi	r28, 0x60	; 96
     274:	d6 e0       	ldi	r29, 0x06	; 6
     276:	89 83       	std	Y+1, r24	; 0x01
     278:	98 e0       	ldi	r25, 0x08	; 8
     27a:	99 83       	std	Y+1, r25	; 0x01
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
     27c:	12 96       	adiw	r26, 0x02	; 2
     27e:	8c 93       	st	X, r24
     280:	12 97       	sbiw	r26, 0x02	; 2
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	9c 93       	st	X, r25
     286:	80 e4       	ldi	r24, 0x40	; 64
     288:	81 83       	std	Z+1, r24	; 0x01
     28a:	90 e8       	ldi	r25, 0x80	; 128
     28c:	91 83       	std	Z+1, r25	; 0x01
     28e:	e0 e4       	ldi	r30, 0x40	; 64
     290:	f6 e0       	ldi	r31, 0x06	; 6
     292:	31 83       	std	Z+1, r19	; 0x01
     294:	21 83       	std	Z+1, r18	; 0x01
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
     296:	82 83       	std	Z+2, r24	; 0x02
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	PORTCFG.MPCMASK = arch_ioport_pin_to_mask(pin);
     298:	80 93 b0 00 	sts	0x00B0, r24
	base->PIN0CTRL = mode;
     29c:	88 e1       	ldi	r24, 0x18	; 24
     29e:	80 8b       	std	Z+16, r24	; 0x10
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
     2a0:	91 83       	std	Z+1, r25	; 0x01
	ioport_set_pin_mode(DRV_MISO, IOPORT_MODE_PULLUP);	
	ioport_set_pin_dir(DRV_SCLK, IOPORT_DIR_OUTPUT);
//	ioport_set_pin_dir(MY_BUTTON, IOPORT_DIR_INPUT);
//	ioport_set_pin_mode(MY_BUTTON, IOPORT_MODE_INVERT_PIN);

}
     2a2:	df 91       	pop	r29
     2a4:	cf 91       	pop	r28
     2a6:	08 95       	ret

000002a8 <uart_getcharF0>:

int uart_getcharF0(FILE *stream)
{
	char data;

	while (rx_counter_USARTF0==0);
     2a8:	80 91 20 20 	lds	r24, 0x2020
     2ac:	88 23       	and	r24, r24
     2ae:	e1 f3       	breq	.-8      	; 0x2a8 <uart_getcharF0>
	data=rx_buffer_USARTF0[rx_rd_index_USARTF0++];
     2b0:	e0 91 21 20 	lds	r30, 0x2021
     2b4:	81 e0       	ldi	r24, 0x01	; 1
     2b6:	8e 0f       	add	r24, r30
     2b8:	80 93 21 20 	sts	0x2021, r24
     2bc:	f0 e0       	ldi	r31, 0x00	; 0
     2be:	e1 52       	subi	r30, 0x21	; 33
     2c0:	fe 4d       	sbci	r31, 0xDE	; 222
     2c2:	80 81       	ld	r24, Z
	if (rx_rd_index_USARTF0 == RX_BUFFER_SIZE_USARTF0) rx_rd_index_USARTF0=0;
     2c4:	90 91 21 20 	lds	r25, 0x2021
     2c8:	90 34       	cpi	r25, 0x40	; 64
     2ca:	11 f4       	brne	.+4      	; 0x2d0 <uart_getcharF0+0x28>
     2cc:	10 92 21 20 	sts	0x2021, r1
	--rx_counter_USARTF0;
     2d0:	90 91 20 20 	lds	r25, 0x2020
     2d4:	91 50       	subi	r25, 0x01	; 1
     2d6:	90 93 20 20 	sts	0x2020, r25
	return data;
}
     2da:	99 27       	eor	r25, r25
     2dc:	87 fd       	sbrc	r24, 7
     2de:	90 95       	com	r25
     2e0:	08 95       	ret

000002e2 <uart_putcharF0>:
	}
}

int uart_putcharF0(char c)
{
	while (tx_counter_USARTF0 == TX_BUFFER_SIZE_USARTF0);
     2e2:	90 91 1c 20 	lds	r25, 0x201C
     2e6:	9a 3f       	cpi	r25, 0xFA	; 250
     2e8:	e1 f3       	breq	.-8      	; 0x2e2 <uart_putcharF0>
	cli();
     2ea:	f8 94       	cli
	if (tx_counter_USARTF0 || ((USARTF0.STATUS & USART_DREIF_bm)==0))
     2ec:	90 91 1c 20 	lds	r25, 0x201C
     2f0:	91 11       	cpse	r25, r1
     2f2:	05 c0       	rjmp	.+10     	; 0x2fe <uart_putcharF0+0x1c>
     2f4:	e0 ea       	ldi	r30, 0xA0	; 160
     2f6:	fb e0       	ldi	r31, 0x0B	; 11
     2f8:	91 81       	ldd	r25, Z+1	; 0x01
     2fa:	95 fd       	sbrc	r25, 5
     2fc:	16 c0       	rjmp	.+44     	; 0x32a <uart_putcharF0+0x48>
	{
		tx_buffer_USARTF0[tx_wr_index_USARTF0++]=c;
     2fe:	e0 91 1e 20 	lds	r30, 0x201E
     302:	91 e0       	ldi	r25, 0x01	; 1
     304:	9e 0f       	add	r25, r30
     306:	90 93 1e 20 	sts	0x201E, r25
     30a:	f0 e0       	ldi	r31, 0x00	; 0
     30c:	e0 52       	subi	r30, 0x20	; 32
     30e:	ff 4d       	sbci	r31, 0xDF	; 223
     310:	80 83       	st	Z, r24
		if (tx_wr_index_USARTF0 == TX_BUFFER_SIZE_USARTF0) tx_wr_index_USARTF0=0;
     312:	80 91 1e 20 	lds	r24, 0x201E
     316:	8a 3f       	cpi	r24, 0xFA	; 250
     318:	11 f4       	brne	.+4      	; 0x31e <uart_putcharF0+0x3c>
     31a:	10 92 1e 20 	sts	0x201E, r1
		++tx_counter_USARTF0;
     31e:	80 91 1c 20 	lds	r24, 0x201C
     322:	8f 5f       	subi	r24, 0xFF	; 255
     324:	80 93 1c 20 	sts	0x201C, r24
     328:	02 c0       	rjmp	.+4      	; 0x32e <uart_putcharF0+0x4c>
	}
	else
	USARTF0.DATA=c;
     32a:	80 93 a0 0b 	sts	0x0BA0, r24
	sei();
     32e:	78 94       	sei
	return 0;
}
     330:	80 e0       	ldi	r24, 0x00	; 0
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	08 95       	ret

00000336 <crc8>:
/* 8 bit CRC , polynomal X^8+X^5+X^4+1 , start value = 0 */
static uint8_t crc8(uint8_t crc, uint8_t crc_data)
{
	uint8_t i;

	i = crc_data ^ crc;
     336:	68 27       	eor	r22, r24
	crc = 0;
	if(i & 0x01)
     338:	60 fd       	sbrc	r22, 0
     33a:	02 c0       	rjmp	.+4      	; 0x340 <crc8+0xa>
static uint8_t crc8(uint8_t crc, uint8_t crc_data)
{
	uint8_t i;

	i = crc_data ^ crc;
	crc = 0;
     33c:	80 e0       	ldi	r24, 0x00	; 0
     33e:	01 c0       	rjmp	.+2      	; 0x342 <crc8+0xc>
	if(i & 0x01)
	crc ^= 0x5e;
     340:	8e e5       	ldi	r24, 0x5E	; 94
	if(i & 0x02)
     342:	61 ff       	sbrs	r22, 1
     344:	02 c0       	rjmp	.+4      	; 0x34a <crc8+0x14>
	crc ^= 0xbc;
     346:	9c eb       	ldi	r25, 0xBC	; 188
     348:	89 27       	eor	r24, r25
	if(i & 0x04)
     34a:	62 ff       	sbrs	r22, 2
     34c:	02 c0       	rjmp	.+4      	; 0x352 <crc8+0x1c>
	crc ^= 0x61;
     34e:	91 e6       	ldi	r25, 0x61	; 97
     350:	89 27       	eor	r24, r25
	if(i & 0x08)
     352:	63 ff       	sbrs	r22, 3
     354:	02 c0       	rjmp	.+4      	; 0x35a <crc8+0x24>
	crc ^= 0xc2;
     356:	92 ec       	ldi	r25, 0xC2	; 194
     358:	89 27       	eor	r24, r25
	if(i & 0x10)
     35a:	64 ff       	sbrs	r22, 4
     35c:	02 c0       	rjmp	.+4      	; 0x362 <crc8+0x2c>
	crc ^= 0x9d;
     35e:	9d e9       	ldi	r25, 0x9D	; 157
     360:	89 27       	eor	r24, r25
	if(i & 0x20)
     362:	65 ff       	sbrs	r22, 5
     364:	02 c0       	rjmp	.+4      	; 0x36a <crc8+0x34>
	crc ^= 0x23;
     366:	93 e2       	ldi	r25, 0x23	; 35
     368:	89 27       	eor	r24, r25
	if(i & 0x40)
     36a:	66 ff       	sbrs	r22, 6
     36c:	02 c0       	rjmp	.+4      	; 0x372 <crc8+0x3c>
	crc ^= 0x46;
     36e:	96 e4       	ldi	r25, 0x46	; 70
     370:	89 27       	eor	r24, r25
	if(i & 0x80)
     372:	66 23       	and	r22, r22
     374:	14 f4       	brge	.+4      	; 0x37a <crc8+0x44>
	crc ^= 0x8c;
     376:	9c e8       	ldi	r25, 0x8C	; 140
     378:	89 27       	eor	r24, r25

	return(crc);
}
     37a:	08 95       	ret

0000037c <drv_disable>:
	tc_write_clock_source(&TCE0, TC_CLKSEL_DIV1_gc);
}

static void drv_disable(void)
{
	i_i = 0;
     37c:	10 92 9a 20 	sts	0x209A, r1
     380:	10 92 9b 20 	sts	0x209B, r1
     384:	10 92 9c 20 	sts	0x209C, r1
     388:	10 92 9d 20 	sts	0x209D, r1
	i_setpoint = 0;
     38c:	10 92 23 20 	sts	0x2023, r1
     390:	10 92 24 20 	sts	0x2024, r1
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     394:	80 e1       	ldi	r24, 0x10	; 16
     396:	e0 ea       	ldi	r30, 0xA0	; 160
     398:	f6 e0       	ldi	r31, 0x06	; 6
     39a:	86 83       	std	Z+6, r24	; 0x06
	ioport_set_pin_level(LED0, false);
	senable = 0;	
     39c:	10 92 8f 20 	sts	0x208F, r1
     3a0:	08 95       	ret

000003a2 <VelocityControl>:
{
	return q8mul(raw, R2IGAIN);
}

static void VelocityControl(void)
{
     3a2:	cf 92       	push	r12
     3a4:	df 92       	push	r13
     3a6:	ef 92       	push	r14
     3a8:	ff 92       	push	r15
     3aa:	0f 93       	push	r16
     3ac:	1f 93       	push	r17
     3ae:	cf 93       	push	r28
     3b0:	df 93       	push	r29
	
	
	iDifference = 0;
     3b2:	10 92 dc 20 	sts	0x20DC, r1
     3b6:	10 92 dd 20 	sts	0x20DD, r1
	fControl = 0;
     3ba:	10 92 7b 20 	sts	0x207B, r1
     3be:	10 92 7c 20 	sts	0x207C, r1
     3c2:	10 92 7d 20 	sts	0x207D, r1
     3c6:	10 92 7e 20 	sts	0x207E, r1
	iError = 0;
     3ca:	10 92 b2 20 	sts	0x20B2, r1
     3ce:	10 92 b3 20 	sts	0x20B3, r1
	iIntegral = 0;
     3d2:	10 92 da 21 	sts	0x21DA, r1
     3d6:	10 92 db 21 	sts	0x21DB, r1
	int measure_time = 10;
	iPreviousValue = iMeasuredValue;
     3da:	80 91 ce 20 	lds	r24, 0x20CE
     3de:	90 91 cf 20 	lds	r25, 0x20CF
     3e2:	80 93 9e 20 	sts	0x209E, r24
     3e6:	90 93 9f 20 	sts	0x209F, r25
	
	// Every 10 ms, attempt to control velocity
	if(intcnt++ >= measure_time)
     3ea:	20 91 33 22 	lds	r18, 0x2233
     3ee:	30 91 34 22 	lds	r19, 0x2234
     3f2:	2a 30       	cpi	r18, 0x0A	; 10
     3f4:	31 05       	cpc	r19, r1
     3f6:	38 f4       	brcc	.+14     	; 0x406 <VelocityControl+0x64>
     3f8:	2f 5f       	subi	r18, 0xFF	; 255
     3fa:	3f 4f       	sbci	r19, 0xFF	; 255
     3fc:	20 93 33 22 	sts	0x2233, r18
     400:	30 93 34 22 	sts	0x2234, r19
     404:	97 c0       	rjmp	.+302    	; 0x534 <VelocityControl+0x192>
	{
		intcnt = 0;	
     406:	10 92 33 22 	sts	0x2233, r1
     40a:	10 92 34 22 	sts	0x2234, r1
		//iKp and iKi are the control gains, 100 times as big to avoid commas
		//iKp = 5;
		//iKi = 0;
		
		// measure number of pulses and calculate difference since last loop.
		iMeasuredValue = qei_raw;
     40e:	20 91 87 20 	lds	r18, 0x2087
     412:	30 91 88 20 	lds	r19, 0x2088
     416:	20 93 ce 20 	sts	0x20CE, r18
     41a:	30 93 cf 20 	sts	0x20CF, r19
		iDifference =  iPreviousValue - iMeasuredValue;
     41e:	82 1b       	sub	r24, r18
     420:	93 0b       	sbc	r25, r19
     422:	80 93 dc 20 	sts	0x20DC, r24
     426:	90 93 dd 20 	sts	0x20DD, r25
			iMeasuredValue =  65536 -iMeasuredValue;
			iDifference = iMeasuredValue + iPreviousValue;	
		}
		
		// Convert pulses per 10 ms to rotations per minute.
		iMeasuredVelocity = iDifference / 4;
     42a:	9c 01       	movw	r18, r24
     42c:	99 23       	and	r25, r25
     42e:	14 f4       	brge	.+4      	; 0x434 <VelocityControl+0x92>
     430:	2d 5f       	subi	r18, 0xFD	; 253
     432:	3f 4f       	sbci	r19, 0xFF	; 255
     434:	35 95       	asr	r19
     436:	27 95       	ror	r18
     438:	35 95       	asr	r19
     43a:	27 95       	ror	r18
     43c:	20 93 35 22 	sts	0x2235, r18
     440:	30 93 36 22 	sts	0x2236, r19
		//divided by 4 ~= (60 * 10)/(measure_time * 245) (=0.2449);
		// Setpoint stored in data1 (received from ROS)
		iError = setpoint - iMeasuredVelocity;
     444:	c0 91 94 20 	lds	r28, 0x2094
     448:	d0 91 95 20 	lds	r29, 0x2095
     44c:	c2 1b       	sub	r28, r18
     44e:	d3 0b       	sbc	r29, r19
     450:	c0 93 b2 20 	sts	0x20B2, r28
     454:	d0 93 b3 20 	sts	0x20B3, r29
		iIntegral = iError + iPreviousError;
     458:	00 91 82 20 	lds	r16, 0x2082
     45c:	10 91 83 20 	lds	r17, 0x2083
     460:	0c 0f       	add	r16, r28
     462:	1d 1f       	adc	r17, r29
     464:	00 93 da 21 	sts	0x21DA, r16
     468:	10 93 db 21 	sts	0x21DB, r17
		// Control loop. Divide by 10 to compensate iKp and iKi value
		
		//control iKp
		if(iKp == 50){
     46c:	a0 91 a8 20 	lds	r26, 0x20A8
     470:	b0 91 a9 20 	lds	r27, 0x20A9
     474:	a2 33       	cpi	r26, 0x32	; 50
     476:	b1 05       	cpc	r27, r1
     478:	29 f4       	brne	.+10     	; 0x484 <VelocityControl+0xe2>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     47a:	80 e2       	ldi	r24, 0x20	; 32
     47c:	e0 ea       	ldi	r30, 0xA0	; 160
     47e:	f6 e0       	ldi	r31, 0x06	; 6
     480:	85 83       	std	Z+5, r24	; 0x05
     482:	04 c0       	rjmp	.+8      	; 0x48c <VelocityControl+0xea>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     484:	80 e2       	ldi	r24, 0x20	; 32
     486:	e0 ea       	ldi	r30, 0xA0	; 160
     488:	f6 e0       	ldi	r31, 0x06	; 6
     48a:	86 83       	std	Z+6, r24	; 0x06
			ioport_set_pin_level(LED1, true);
		}else{
			ioport_set_pin_level(LED1, false);
		}
		
		fControl = ((int32_t)iError * (int32_t)iKp) / 100.0 + ((int32_t)iIntegral * (int32_t)iKi) / 100.0;
     48c:	9e 01       	movw	r18, r28
     48e:	0e 94 c5 14 	call	0x298a	; 0x298a <__mulhisi3>
     492:	0e 94 02 16 	call	0x2c04	; 0x2c04 <__floatsisf>
     496:	20 e0       	ldi	r18, 0x00	; 0
     498:	30 e0       	ldi	r19, 0x00	; 0
     49a:	48 ec       	ldi	r20, 0xC8	; 200
     49c:	52 e4       	ldi	r21, 0x42	; 66
     49e:	0e 94 67 15 	call	0x2ace	; 0x2ace <__divsf3>
     4a2:	6b 01       	movw	r12, r22
     4a4:	7c 01       	movw	r14, r24
     4a6:	a0 91 ad 20 	lds	r26, 0x20AD
     4aa:	b0 91 ae 20 	lds	r27, 0x20AE
     4ae:	98 01       	movw	r18, r16
     4b0:	0e 94 c5 14 	call	0x298a	; 0x298a <__mulhisi3>
     4b4:	0e 94 02 16 	call	0x2c04	; 0x2c04 <__floatsisf>
     4b8:	20 e0       	ldi	r18, 0x00	; 0
     4ba:	30 e0       	ldi	r19, 0x00	; 0
     4bc:	48 ec       	ldi	r20, 0xC8	; 200
     4be:	52 e4       	ldi	r21, 0x42	; 66
     4c0:	0e 94 67 15 	call	0x2ace	; 0x2ace <__divsf3>
     4c4:	9b 01       	movw	r18, r22
     4c6:	ac 01       	movw	r20, r24
     4c8:	c7 01       	movw	r24, r14
     4ca:	b6 01       	movw	r22, r12
     4cc:	0e 94 ff 14 	call	0x29fe	; 0x29fe <__addsf3>
     4d0:	60 93 7b 20 	sts	0x207B, r22
     4d4:	70 93 7c 20 	sts	0x207C, r23
     4d8:	80 93 7d 20 	sts	0x207D, r24
     4dc:	90 93 7e 20 	sts	0x207E, r25
		// Send control value to current control (function "servoloop")
		i_setpoint = raw2current((int16_t)fControl);
     4e0:	0e 94 cf 15 	call	0x2b9e	; 0x2b9e <__fixsfsi>
}
*/
static int16_t q8mul(int16_t value, int16_t mul)
{
	int32_t res;
	res = ((int32_t)value * mul) >> 8;
     4e4:	db 01       	movw	r26, r22
     4e6:	2d e0       	ldi	r18, 0x0D	; 13
     4e8:	33 e0       	ldi	r19, 0x03	; 3
     4ea:	0e 94 da 14 	call	0x29b4	; 0x29b4 <__usmulhisi3>
     4ee:	bb 27       	eor	r27, r27
     4f0:	97 fd       	sbrc	r25, 7
     4f2:	ba 95       	dec	r27
     4f4:	a9 2f       	mov	r26, r25
     4f6:	98 2f       	mov	r25, r24
     4f8:	87 2f       	mov	r24, r23
     4fa:	81 15       	cp	r24, r1
     4fc:	20 e8       	ldi	r18, 0x80	; 128
     4fe:	92 07       	cpc	r25, r18
     500:	a1 05       	cpc	r26, r1
     502:	b1 05       	cpc	r27, r1
     504:	24 f0       	brlt	.+8      	; 0x50e <VelocityControl+0x16c>
     506:	8f ef       	ldi	r24, 0xFF	; 255
     508:	9f e7       	ldi	r25, 0x7F	; 127
     50a:	a0 e0       	ldi	r26, 0x00	; 0
     50c:	b0 e0       	ldi	r27, 0x00	; 0
     50e:	81 15       	cp	r24, r1
     510:	20 e8       	ldi	r18, 0x80	; 128
     512:	92 07       	cpc	r25, r18
     514:	2f ef       	ldi	r18, 0xFF	; 255
     516:	a2 07       	cpc	r26, r18
     518:	b2 07       	cpc	r27, r18
     51a:	24 f4       	brge	.+8      	; 0x524 <VelocityControl+0x182>
     51c:	80 e0       	ldi	r24, 0x00	; 0
     51e:	90 e8       	ldi	r25, 0x80	; 128
     520:	af ef       	ldi	r26, 0xFF	; 255
     522:	bf ef       	ldi	r27, 0xFF	; 255
	if (res > 32767)
	res = 32767;
	if (res < -32768)
	res = -32768;
	return res;
     524:	80 93 23 20 	sts	0x2023, r24
     528:	90 93 24 20 	sts	0x2024, r25
		}
		
		fControl = ((int32_t)iError * (int32_t)iKp) / 100.0 + ((int32_t)iIntegral * (int32_t)iKi) / 100.0;
		// Send control value to current control (function "servoloop")
		i_setpoint = raw2current((int16_t)fControl);
		iPreviousError = iError;
     52c:	c0 93 82 20 	sts	0x2082, r28
     530:	d0 93 83 20 	sts	0x2083, r29
	}
	if(wdcnt++ >= WATCHDOG)
     534:	80 91 7f 20 	lds	r24, 0x207F
     538:	84 36       	cpi	r24, 0x64	; 100
     53a:	20 f4       	brcc	.+8      	; 0x544 <VelocityControl+0x1a2>
     53c:	8f 5f       	subi	r24, 0xFF	; 255
     53e:	80 93 7f 20 	sts	0x207F, r24
     542:	05 c0       	rjmp	.+10     	; 0x54e <VelocityControl+0x1ac>
	{
		wdcnt = WATCHDOG;
     544:	84 e6       	ldi	r24, 0x64	; 100
     546:	80 93 7f 20 	sts	0x207F, r24
		cenable = 0;
     54a:	10 92 26 22 	sts	0x2226, r1
	}
	if(ADCntc < OVERTEMP)
     54e:	80 91 a2 20 	lds	r24, 0x20A2
     552:	90 91 a3 20 	lds	r25, 0x20A3
     556:	80 3f       	cpi	r24, 0xF0	; 240
     558:	91 05       	cpc	r25, r1
     55a:	44 f4       	brge	.+16     	; 0x56c <VelocityControl+0x1ca>
	{
		if (ntccnt <= 100) ntccnt++;
     55c:	80 91 90 20 	lds	r24, 0x2090
     560:	85 36       	cpi	r24, 0x65	; 101
     562:	40 f4       	brcc	.+16     	; 0x574 <VelocityControl+0x1d2>
     564:	8f 5f       	subi	r24, 0xFF	; 255
     566:	80 93 90 20 	sts	0x2090, r24
     56a:	04 c0       	rjmp	.+8      	; 0x574 <VelocityControl+0x1d2>
	}	  
	else
	{
		ntccnt=0;  
     56c:	10 92 90 20 	sts	0x2090, r1
		overtemp = 0;
     570:	10 92 cd 20 	sts	0x20CD, r1
	}	 
	if(ntccnt >= 100) 
     574:	80 91 90 20 	lds	r24, 0x2090
     578:	84 36       	cpi	r24, 0x64	; 100
     57a:	28 f0       	brcs	.+10     	; 0x586 <VelocityControl+0x1e4>
	{
		cenable = 0;
     57c:	10 92 26 22 	sts	0x2226, r1
		overtemp = 1;
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	80 93 cd 20 	sts	0x20CD, r24

static void DRV8301_sm(void)
{
	int tmpadr;
	uint16_t tdata;
	switch(DRVstate)
     586:	80 91 d9 20 	lds	r24, 0x20D9
     58a:	90 91 da 20 	lds	r25, 0x20DA
     58e:	81 30       	cpi	r24, 0x01	; 1
     590:	91 05       	cpc	r25, r1
     592:	09 f4       	brne	.+2      	; 0x596 <VelocityControl+0x1f4>
     594:	4d c0       	rjmp	.+154    	; 0x630 <VelocityControl+0x28e>
     596:	82 30       	cpi	r24, 0x02	; 2
     598:	91 05       	cpc	r25, r1
     59a:	09 f4       	brne	.+2      	; 0x59e <VelocityControl+0x1fc>
     59c:	5c c0       	rjmp	.+184    	; 0x656 <VelocityControl+0x2b4>
     59e:	89 2b       	or	r24, r25
     5a0:	09 f0       	breq	.+2      	; 0x5a4 <VelocityControl+0x202>
     5a2:	a4 c0       	rjmp	.+328    	; 0x6ec <VelocityControl+0x34a>
     5a4:	80 e1       	ldi	r24, 0x10	; 16
     5a6:	e0 e4       	ldi	r30, 0x40	; 64
     5a8:	f6 e0       	ldi	r31, 0x06	; 6
     5aa:	86 83       	std	Z+6, r24	; 0x06
	{
		case 0:
			ioport_set_pin_level(DRV_CS, false);
			if(DRVadr < 0x04)
     5ac:	80 91 af 20 	lds	r24, 0x20AF
     5b0:	90 91 b0 20 	lds	r25, 0x20B0
     5b4:	84 30       	cpi	r24, 0x04	; 4
     5b6:	91 05       	cpc	r25, r1
     5b8:	5c f4       	brge	.+22     	; 0x5d0 <VelocityControl+0x22e>
			{
				tdata = bmDRVread | (DRVadr << 11);
				DRVt1 = (uint8_t)tdata;
     5ba:	10 92 8e 20 	sts	0x208E, r1
	{
		case 0:
			ioport_set_pin_level(DRV_CS, false);
			if(DRVadr < 0x04)
			{
				tdata = bmDRVread | (DRVadr << 11);
     5be:	98 2f       	mov	r25, r24
     5c0:	88 27       	eor	r24, r24
     5c2:	99 0f       	add	r25, r25
     5c4:	99 0f       	add	r25, r25
     5c6:	99 0f       	add	r25, r25
     5c8:	90 68       	ori	r25, 0x80	; 128
				DRVt1 = (uint8_t)tdata;
				DRVt2 = (uint8_t)(tdata >> 8);				
     5ca:	90 93 89 20 	sts	0x2089, r25
     5ce:	0f c0       	rjmp	.+30     	; 0x5ee <VelocityControl+0x24c>
			}
			else
			{
				tdata = bmDRVread;
				DRVt1 = (uint8_t)tdata;
     5d0:	10 92 8e 20 	sts	0x208E, r1
				DRVt2 = (uint8_t)(tdata >> 8);
     5d4:	80 e8       	ldi	r24, 0x80	; 128
     5d6:	80 93 89 20 	sts	0x2089, r24
				if(DRVwr)
     5da:	80 91 84 20 	lds	r24, 0x2084
     5de:	90 91 85 20 	lds	r25, 0x2085
     5e2:	00 97       	sbiw	r24, 0x00	; 0
     5e4:	21 f0       	breq	.+8      	; 0x5ee <VelocityControl+0x24c>
				{
					DRVt1 = (uint8_t)DRVwr;
     5e6:	80 93 8e 20 	sts	0x208E, r24
					DRVt2 = (uint8_t)(DRVwr >> 8);
     5ea:	90 93 89 20 	sts	0x2089, r25
				}			
			}
			DRVadr++;
     5ee:	80 91 af 20 	lds	r24, 0x20AF
     5f2:	90 91 b0 20 	lds	r25, 0x20B0
     5f6:	01 96       	adiw	r24, 0x01	; 1
			if(DRVadr > 0x04)
     5f8:	85 30       	cpi	r24, 0x05	; 5
     5fa:	91 05       	cpc	r25, r1
     5fc:	2c f4       	brge	.+10     	; 0x608 <VelocityControl+0x266>
				{
					DRVt1 = (uint8_t)DRVwr;
					DRVt2 = (uint8_t)(DRVwr >> 8);
				}			
			}
			DRVadr++;
     5fe:	80 93 af 20 	sts	0x20AF, r24
     602:	90 93 b0 20 	sts	0x20B0, r25
     606:	08 c0       	rjmp	.+16     	; 0x618 <VelocityControl+0x276>
			if(DRVadr > 0x04)
			{
				 DRVadr = 0;
     608:	10 92 af 20 	sts	0x20AF, r1
     60c:	10 92 b0 20 	sts	0x20B0, r1
				 DRVwr = 0;
     610:	10 92 84 20 	sts	0x2084, r1
     614:	10 92 85 20 	sts	0x2085, r1
			}				 
			spi_put(&DRVSPI, DRVt2);
     618:	80 91 89 20 	lds	r24, 0x2089
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(SPI_t *spi, uint8_t data)
{
	spi->DATA = data;
     61c:	e0 ec       	ldi	r30, 0xC0	; 192
     61e:	f8 e0       	ldi	r31, 0x08	; 8
     620:	83 83       	std	Z+3, r24	; 0x03
			DRVstate = 1;
     622:	81 e0       	ldi	r24, 0x01	; 1
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	80 93 d9 20 	sts	0x20D9, r24
     62a:	90 93 da 20 	sts	0x20DA, r25
     62e:	5e c0       	rjmp	.+188    	; 0x6ec <VelocityControl+0x34a>
 *
 * \return \c 1 if the SPI Receive Holding Register is full, otherwise \c 0.
 */
static inline bool spi_is_tx_ok(SPI_t *spi)
{
	return spi->STATUS & SPI_IF_bm ? true : false;
     630:	e0 ec       	ldi	r30, 0xC0	; 192
     632:	f8 e0       	ldi	r31, 0x08	; 8
     634:	82 81       	ldd	r24, Z+2	; 0x02
			break;
		case 1:
			if(spi_is_tx_ready(&DRVSPI))
     636:	88 23       	and	r24, r24
     638:	0c f0       	brlt	.+2      	; 0x63c <VelocityControl+0x29a>
     63a:	58 c0       	rjmp	.+176    	; 0x6ec <VelocityControl+0x34a>
 * \return The data byte
 *
 */
static inline uint8_t spi_get(SPI_t *spi)
{
	return spi->DATA;
     63c:	83 81       	ldd	r24, Z+3	; 0x03
			{
				DRVr2 = spi_get(&DRVSPI);
     63e:	80 93 98 20 	sts	0x2098, r24
				spi_put(&DRVSPI, DRVt1);
     642:	80 91 8e 20 	lds	r24, 0x208E
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(SPI_t *spi, uint8_t data)
{
	spi->DATA = data;
     646:	83 83       	std	Z+3, r24	; 0x03
				DRVstate = 2;		
     648:	82 e0       	ldi	r24, 0x02	; 2
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	80 93 d9 20 	sts	0x20D9, r24
     650:	90 93 da 20 	sts	0x20DA, r25
     654:	4b c0       	rjmp	.+150    	; 0x6ec <VelocityControl+0x34a>
 *
 * \return \c 1 if the SPI Receive Holding Register is full, otherwise \c 0.
 */
static inline bool spi_is_tx_ok(SPI_t *spi)
{
	return spi->STATUS & SPI_IF_bm ? true : false;
     656:	e0 ec       	ldi	r30, 0xC0	; 192
     658:	f8 e0       	ldi	r31, 0x08	; 8
     65a:	82 81       	ldd	r24, Z+2	; 0x02
			}
			break;
		case 2:
			if(spi_is_tx_ready(&DRVSPI))
     65c:	88 23       	and	r24, r24
     65e:	0c f0       	brlt	.+2      	; 0x662 <VelocityControl+0x2c0>
     660:	45 c0       	rjmp	.+138    	; 0x6ec <VelocityControl+0x34a>
 * \return The data byte
 *
 */
static inline uint8_t spi_get(SPI_t *spi)
{
	return spi->DATA;
     662:	83 81       	ldd	r24, Z+3	; 0x03
			{
				DRVr1 = spi_get(&DRVSPI);
     664:	80 93 21 22 	sts	0x2221, r24
				DRVraw = ((uint16_t)DRVr2 << 8) | DRVr1;
     668:	20 91 98 20 	lds	r18, 0x2098
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	92 2b       	or	r25, r18
     670:	80 93 be 20 	sts	0x20BE, r24
     674:	90 93 bf 20 	sts	0x20BF, r25
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     678:	20 e1       	ldi	r18, 0x10	; 16
     67a:	e0 e4       	ldi	r30, 0x40	; 64
     67c:	f6 e0       	ldi	r31, 0x06	; 6
     67e:	25 83       	std	Z+5, r18	; 0x05
				ioport_set_pin_level(DRV_CS, true);
				if(DRVraw == 0xffff) // DRV not enabled. MISO has pull up
     680:	01 96       	adiw	r24, 0x01	; 1
     682:	89 f4       	brne	.+34     	; 0x6a6 <VelocityControl+0x304>
				{
					DRVreg[0] = DRVreg[1] = DRVreg[2] = DRVreg[3] = 0;
     684:	10 92 79 20 	sts	0x2079, r1
     688:	10 92 7a 20 	sts	0x207A, r1
     68c:	10 92 77 20 	sts	0x2077, r1
     690:	10 92 78 20 	sts	0x2078, r1
     694:	10 92 75 20 	sts	0x2075, r1
     698:	10 92 76 20 	sts	0x2076, r1
     69c:	10 92 73 20 	sts	0x2073, r1
     6a0:	10 92 74 20 	sts	0x2074, r1
					drv_disable();
     6a4:	6b de       	rcall	.-810    	; 0x37c <drv_disable>
				}
				if(!(DRVraw & bmDRVread))
     6a6:	80 91 be 20 	lds	r24, 0x20BE
     6aa:	90 91 bf 20 	lds	r25, 0x20BF
     6ae:	99 23       	and	r25, r25
     6b0:	cc f0       	brlt	.+50     	; 0x6e4 <VelocityControl+0x342>
				{
					tmpadr = (DRVraw & 0x7800) >> 11;
     6b2:	9c 01       	movw	r18, r24
     6b4:	22 27       	eor	r18, r18
     6b6:	38 77       	andi	r19, 0x78	; 120
     6b8:	23 2f       	mov	r18, r19
     6ba:	33 27       	eor	r19, r19
     6bc:	26 95       	lsr	r18
     6be:	26 95       	lsr	r18
     6c0:	26 95       	lsr	r18
					if((tmpadr < 0x04) && !prevDRVwr)
     6c2:	24 30       	cpi	r18, 0x04	; 4
     6c4:	31 05       	cpc	r19, r1
     6c6:	74 f4       	brge	.+28     	; 0x6e4 <VelocityControl+0x342>
     6c8:	40 91 6f 20 	lds	r20, 0x206F
     6cc:	50 91 70 20 	lds	r21, 0x2070
     6d0:	45 2b       	or	r20, r21
     6d2:	41 f4       	brne	.+16     	; 0x6e4 <VelocityControl+0x342>
					{
						DRVreg[tmpadr] = DRVraw & 0x07ff;					
     6d4:	f9 01       	movw	r30, r18
     6d6:	ee 0f       	add	r30, r30
     6d8:	ff 1f       	adc	r31, r31
     6da:	ed 58       	subi	r30, 0x8D	; 141
     6dc:	ff 4d       	sbci	r31, 0xDF	; 223
     6de:	97 70       	andi	r25, 0x07	; 7
     6e0:	80 83       	st	Z, r24
     6e2:	91 83       	std	Z+1, r25	; 0x01
					}
				}
				DRVstate = 0;
     6e4:	10 92 d9 20 	sts	0x20D9, r1
     6e8:	10 92 da 20 	sts	0x20DA, r1
		cenable = 0;
		overtemp = 1;
	}		
		
    DRV8301_sm();
	if (cenable && !senable)
     6ec:	80 91 26 22 	lds	r24, 0x2226
     6f0:	88 23       	and	r24, r24
     6f2:	09 f4       	brne	.+2      	; 0x6f6 <VelocityControl+0x354>
     6f4:	b5 c0       	rjmp	.+362    	; 0x860 <VelocityControl+0x4be>
     6f6:	80 91 8f 20 	lds	r24, 0x208F
     6fa:	81 11       	cpse	r24, r1
     6fc:	a0 c0       	rjmp	.+320    	; 0x83e <VelocityControl+0x49c>
	{
        if((DRVadr == 0x00) && (DRVreg[3] != DRV3REG))
     6fe:	80 91 af 20 	lds	r24, 0x20AF
     702:	90 91 b0 20 	lds	r25, 0x20B0
     706:	00 97       	sbiw	r24, 0x00	; 0
     708:	79 f4       	brne	.+30     	; 0x728 <VelocityControl+0x386>
     70a:	20 91 79 20 	lds	r18, 0x2079
     70e:	30 91 7a 20 	lds	r19, 0x207A
     712:	21 30       	cpi	r18, 0x01	; 1
     714:	31 05       	cpc	r19, r1
     716:	41 f0       	breq	.+16     	; 0x728 <VelocityControl+0x386>
        {
			calstate = 0;
     718:	10 92 d4 20 	sts	0x20D4, r1
	        // Shunt amplifier 0=10V/V 1=20V/V 2=40V/V 3=80V/V
	        DRVwr = (uint16_t)bmDRVctrl2 | DRV3REG;
     71c:	21 e0       	ldi	r18, 0x01	; 1
     71e:	38 e1       	ldi	r19, 0x18	; 24
     720:	20 93 84 20 	sts	0x2084, r18
     724:	30 93 85 20 	sts	0x2085, r19
        }
		if(!caldone && (DRVreg[3] == DRV3REG))
     728:	20 91 dc 21 	lds	r18, 0x21DC
     72c:	21 11       	cpse	r18, r1
     72e:	59 c0       	rjmp	.+178    	; 0x7e2 <VelocityControl+0x440>
     730:	20 91 79 20 	lds	r18, 0x2079
     734:	30 91 7a 20 	lds	r19, 0x207A
     738:	21 30       	cpi	r18, 0x01	; 1
     73a:	31 05       	cpc	r19, r1
     73c:	09 f0       	breq	.+2      	; 0x740 <VelocityControl+0x39e>
     73e:	51 c0       	rjmp	.+162    	; 0x7e2 <VelocityControl+0x440>
}

// ADC zero calibration on current measure channels
static void cal_sm(void)
{
	if(calstate == 0)	
     740:	e0 91 d4 20 	lds	r30, 0x20D4
     744:	e1 11       	cpse	r30, r1
     746:	11 c0       	rjmp	.+34     	; 0x76a <VelocityControl+0x3c8>
	{
		cal_a1 = 0;
		cal_a2 = 0;
	}
	cal_a1 += ADCso1;
     748:	20 91 c0 20 	lds	r18, 0x20C0
     74c:	30 91 c1 20 	lds	r19, 0x20C1
     750:	20 93 2b 22 	sts	0x222B, r18
     754:	30 93 2c 22 	sts	0x222C, r19
	cal_a2 += ADCso2;		
     758:	20 91 80 20 	lds	r18, 0x2080
     75c:	30 91 81 20 	lds	r19, 0x2081
     760:	20 93 1f 22 	sts	0x221F, r18
     764:	30 93 20 22 	sts	0x2220, r19
     768:	37 c0       	rjmp	.+110    	; 0x7d8 <VelocityControl+0x436>
	if(calstate == 0)	
	{
		cal_a1 = 0;
		cal_a2 = 0;
	}
	cal_a1 += ADCso1;
     76a:	40 91 c0 20 	lds	r20, 0x20C0
     76e:	50 91 c1 20 	lds	r21, 0x20C1
     772:	20 91 2b 22 	lds	r18, 0x222B
     776:	30 91 2c 22 	lds	r19, 0x222C
     77a:	42 0f       	add	r20, r18
     77c:	53 1f       	adc	r21, r19
     77e:	40 93 2b 22 	sts	0x222B, r20
     782:	50 93 2c 22 	sts	0x222C, r21
	cal_a2 += ADCso2;		
     786:	60 91 80 20 	lds	r22, 0x2080
     78a:	70 91 81 20 	lds	r23, 0x2081
     78e:	20 91 1f 22 	lds	r18, 0x221F
     792:	30 91 20 22 	lds	r19, 0x2220
     796:	26 0f       	add	r18, r22
     798:	37 1f       	adc	r19, r23
     79a:	20 93 1f 22 	sts	0x221F, r18
     79e:	30 93 20 22 	sts	0x2220, r19
	if(calstate >= 15)
     7a2:	ef 30       	cpi	r30, 0x0F	; 15
     7a4:	c8 f0       	brcs	.+50     	; 0x7d8 <VelocityControl+0x436>
	{
		so1_zero = cal_a1 >> 4;
     7a6:	52 95       	swap	r21
     7a8:	42 95       	swap	r20
     7aa:	4f 70       	andi	r20, 0x0F	; 15
     7ac:	45 27       	eor	r20, r21
     7ae:	5f 70       	andi	r21, 0x0F	; 15
     7b0:	45 27       	eor	r20, r21
     7b2:	40 93 de 20 	sts	0x20DE, r20
     7b6:	50 93 df 20 	sts	0x20DF, r21
		so2_zero = cal_a2 >> 4;
     7ba:	32 95       	swap	r19
     7bc:	22 95       	swap	r18
     7be:	2f 70       	andi	r18, 0x0F	; 15
     7c0:	23 27       	eor	r18, r19
     7c2:	3f 70       	andi	r19, 0x0F	; 15
     7c4:	23 27       	eor	r18, r19
     7c6:	20 93 27 22 	sts	0x2227, r18
     7ca:	30 93 28 22 	sts	0x2228, r19
		caldone = 1;
     7ce:	21 e0       	ldi	r18, 0x01	; 1
     7d0:	20 93 dc 21 	sts	0x21DC, r18
		calstate = 0;
     7d4:	10 92 d4 20 	sts	0x20D4, r1
	}
	calstate++;
     7d8:	20 91 d4 20 	lds	r18, 0x20D4
     7dc:	2f 5f       	subi	r18, 0xFF	; 255
     7de:	20 93 d4 20 	sts	0x20D4, r18
        }
		if(!caldone && (DRVreg[3] == DRV3REG))
		{
			cal_sm();
		}			
        if((DRVadr == 0x00) && !DRVwr && !(DRVreg[2] & 0x008) && caldone)
     7e2:	89 2b       	or	r24, r25
     7e4:	a1 f4       	brne	.+40     	; 0x80e <VelocityControl+0x46c>
     7e6:	80 91 84 20 	lds	r24, 0x2084
     7ea:	90 91 85 20 	lds	r25, 0x2085
     7ee:	89 2b       	or	r24, r25
     7f0:	71 f4       	brne	.+28     	; 0x80e <VelocityControl+0x46c>
     7f2:	80 91 77 20 	lds	r24, 0x2077
     7f6:	83 fd       	sbrc	r24, 3
     7f8:	0a c0       	rjmp	.+20     	; 0x80e <VelocityControl+0x46c>
     7fa:	80 91 dc 21 	lds	r24, 0x21DC
     7fe:	88 23       	and	r24, r24
     800:	31 f0       	breq	.+12     	; 0x80e <VelocityControl+0x46c>
        {
	        // PWMmode = 1 (3 pins) OCADJ_SET = 3 (+-86mV) 10 = (+-197mV) 14 = (+-317mV)
	        DRVwr = (uint16_t)bmDRVctrl1 | 0x008 | (10 << 6);
     802:	88 e8       	ldi	r24, 0x88	; 136
     804:	92 e1       	ldi	r25, 0x12	; 18
     806:	80 93 84 20 	sts	0x2084, r24
     80a:	90 93 85 20 	sts	0x2085, r25
        }
	    i_i = 0;
     80e:	10 92 9a 20 	sts	0x209A, r1
     812:	10 92 9b 20 	sts	0x209B, r1
     816:	10 92 9c 20 	sts	0x209C, r1
     81a:	10 92 9d 20 	sts	0x209D, r1
        if((DRVreg[2] & 0x008) && caldone)
     81e:	80 91 77 20 	lds	r24, 0x2077
     822:	83 ff       	sbrs	r24, 3
     824:	22 c0       	rjmp	.+68     	; 0x86a <VelocityControl+0x4c8>
     826:	80 91 dc 21 	lds	r24, 0x21DC
     82a:	88 23       	and	r24, r24
     82c:	f1 f0       	breq	.+60     	; 0x86a <VelocityControl+0x4c8>
        {
	        senable = 1;
     82e:	81 e0       	ldi	r24, 0x01	; 1
     830:	80 93 8f 20 	sts	0x208F, r24
     834:	80 e1       	ldi	r24, 0x10	; 16
     836:	e0 ea       	ldi	r30, 0xA0	; 160
     838:	f6 e0       	ldi	r31, 0x06	; 6
     83a:	85 83       	std	Z+5, r24	; 0x05
     83c:	16 c0       	rjmp	.+44     	; 0x86a <VelocityControl+0x4c8>
			ioport_set_pin_level(LED0, true);
        }
	}			
	if((!cenable && senable) || (cenable && senable && (DRVreg[3] != DRV3REG)) )
     83e:	80 91 79 20 	lds	r24, 0x2079
     842:	90 91 7a 20 	lds	r25, 0x207A
     846:	01 97       	sbiw	r24, 0x01	; 1
     848:	b1 f0       	breq	.+44     	; 0x876 <VelocityControl+0x4d4>
	{
        if(DRVreg[2] & 0x008)
     84a:	80 91 77 20 	lds	r24, 0x2077
     84e:	83 ff       	sbrs	r24, 3
     850:	11 c0       	rjmp	.+34     	; 0x874 <VelocityControl+0x4d2>
        {
	        // PWMmode = 0 (6 pins) OCADJ_SET = 3 (+-86mV) 10 = (+-197mV) 14 = (+-317mV)
	        DRVwr = (uint16_t)bmDRVctrl1 | 0x000 | (10 << 6);
     852:	80 e8       	ldi	r24, 0x80	; 128
     854:	92 e1       	ldi	r25, 0x12	; 18
     856:	80 93 84 20 	sts	0x2084, r24
     85a:	90 93 85 20 	sts	0x2085, r25
     85e:	0b c0       	rjmp	.+22     	; 0x876 <VelocityControl+0x4d4>
        {
	        senable = 1;
			ioport_set_pin_level(LED0, true);
        }
	}			
	if((!cenable && senable) || (cenable && senable && (DRVreg[3] != DRV3REG)) )
     860:	80 91 8f 20 	lds	r24, 0x208F
     864:	81 11       	cpse	r24, r1
     866:	f1 cf       	rjmp	.-30     	; 0x84a <VelocityControl+0x4a8>
     868:	06 c0       	rjmp	.+12     	; 0x876 <VelocityControl+0x4d4>
     86a:	80 91 8f 20 	lds	r24, 0x208F
     86e:	88 23       	and	r24, r24
     870:	11 f0       	breq	.+4      	; 0x876 <VelocityControl+0x4d4>
     872:	e5 cf       	rjmp	.-54     	; 0x83e <VelocityControl+0x49c>
	        // PWMmode = 0 (6 pins) OCADJ_SET = 3 (+-86mV) 10 = (+-197mV) 14 = (+-317mV)
	        DRVwr = (uint16_t)bmDRVctrl1 | 0x000 | (10 << 6);
        }
        if(!(DRVreg[2] & 0x008))
        {
			drv_disable();
     874:	83 dd       	rcall	.-1274   	; 0x37c <drv_disable>
        }
	}
}
     876:	df 91       	pop	r29
     878:	cf 91       	pop	r28
     87a:	1f 91       	pop	r17
     87c:	0f 91       	pop	r16
     87e:	ff 90       	pop	r15
     880:	ef 90       	pop	r14
     882:	df 90       	pop	r13
     884:	cf 90       	pop	r12
     886:	08 95       	ret

00000888 <PWMtop>:
{
	TCD0.CCD = value;
}

static void PWMtop(void)
{
     888:	8f 92       	push	r8
     88a:	9f 92       	push	r9
     88c:	af 92       	push	r10
     88e:	bf 92       	push	r11
     890:	cf 92       	push	r12
     892:	df 92       	push	r13
     894:	ef 92       	push	r14
     896:	ff 92       	push	r15
     898:	0f 93       	push	r16
     89a:	1f 93       	push	r17
	ADCso1 = adc_get_result(&ADC, ADC_CH0) - so1_zero;
     89c:	e0 e0       	ldi	r30, 0x00	; 0
     89e:	f2 e0       	ldi	r31, 0x02	; 2
     8a0:	24 a1       	ldd	r18, Z+36	; 0x24
     8a2:	35 a1       	ldd	r19, Z+37	; 0x25
     8a4:	80 91 de 20 	lds	r24, 0x20DE
     8a8:	90 91 df 20 	lds	r25, 0x20DF
     8ac:	28 1b       	sub	r18, r24
     8ae:	39 0b       	sbc	r19, r25
     8b0:	20 93 c0 20 	sts	0x20C0, r18
     8b4:	30 93 c1 20 	sts	0x20C1, r19
	ADCso2 = adc_get_result(&ADC, ADC_CH1) - so2_zero;
     8b8:	e8 e2       	ldi	r30, 0x28	; 40
     8ba:	f2 e0       	ldi	r31, 0x02	; 2
     8bc:	84 81       	ldd	r24, Z+4	; 0x04
     8be:	95 81       	ldd	r25, Z+5	; 0x05
     8c0:	40 91 27 22 	lds	r20, 0x2227
     8c4:	50 91 28 22 	lds	r21, 0x2228
     8c8:	84 1b       	sub	r24, r20
     8ca:	95 0b       	sbc	r25, r21
     8cc:	80 93 80 20 	sts	0x2080, r24
     8d0:	90 93 81 20 	sts	0x2081, r25
	ADCvpwr = adc_get_result(&ADC, ADC_CH2);
     8d4:	e0 e3       	ldi	r30, 0x30	; 48
     8d6:	f2 e0       	ldi	r31, 0x02	; 2
     8d8:	64 81       	ldd	r22, Z+4	; 0x04
     8da:	75 81       	ldd	r23, Z+5	; 0x05
     8dc:	60 93 29 22 	sts	0x2229, r22
     8e0:	70 93 2a 22 	sts	0x222A, r23
	
	if(i_con >= 0)
     8e4:	40 91 b4 20 	lds	r20, 0x20B4
     8e8:	50 91 b5 20 	lds	r21, 0x20B5
     8ec:	55 23       	and	r21, r21
     8ee:	44 f0       	brlt	.+16     	; 0x900 <PWMtop+0x78>
	{
		I_meas = -ADCso2;
     8f0:	91 95       	neg	r25
     8f2:	81 95       	neg	r24
     8f4:	91 09       	sbc	r25, r1
     8f6:	80 93 c2 20 	sts	0x20C2, r24
     8fa:	90 93 c3 20 	sts	0x20C3, r25
     8fe:	04 c0       	rjmp	.+8      	; 0x908 <PWMtop+0x80>
	}
	else
	{
		I_meas = ADCso1;
     900:	20 93 c2 20 	sts	0x20C2, r18
     904:	30 93 c3 20 	sts	0x20C3, r19
	}
	if(controltick++ > 0)
     908:	80 91 db 20 	lds	r24, 0x20DB
     90c:	91 e0       	ldi	r25, 0x01	; 1
     90e:	98 0f       	add	r25, r24
     910:	90 93 db 20 	sts	0x20DB, r25
     914:	88 23       	and	r24, r24
     916:	09 f4       	brne	.+2      	; 0x91a <PWMtop+0x92>
     918:	46 c1       	rjmp	.+652    	; 0xba6 <PWMtop+0x31e>
	{
		controltick = 0;
     91a:	10 92 db 20 	sts	0x20DB, r1
 * \param tc Pointer to TC module.
 * \note Output the Counter value CNT
 */
static inline uint16_t tc_read_count(volatile void *tc)
{
	return (((TC0_t *)tc)->CNT);
     91e:	e0 e0       	ldi	r30, 0x00	; 0
     920:	fa e0       	ldi	r31, 0x0A	; 10
     922:	80 a1       	ldd	r24, Z+32	; 0x20
     924:	91 a1       	ldd	r25, Z+33	; 0x21
		qei_raw = tc_read_count(&TCE0);
     926:	80 93 87 20 	sts	0x2087, r24
     92a:	90 93 88 20 	sts	0x2088, r25
		iqei_raw = qei_raw;
		if(iqei_raw > 0x8000)
     92e:	81 30       	cpi	r24, 0x01	; 1
     930:	20 e8       	ldi	r18, 0x80	; 128
     932:	92 07       	cpc	r25, r18
     934:	28 f4       	brcc	.+10     	; 0x940 <PWMtop+0xb8>
	}
	if(controltick++ > 0)
	{
		controltick = 0;
		qei_raw = tc_read_count(&TCE0);
		iqei_raw = qei_raw;
     936:	80 93 d7 20 	sts	0x20D7, r24
     93a:	90 93 d8 20 	sts	0x20D8, r25
     93e:	06 c0       	rjmp	.+12     	; 0x94c <PWMtop+0xc4>
		if(iqei_raw > 0x8000)
		{
			iqei_raw = iqei_raw - 0x8000; 
     940:	9c 01       	movw	r18, r24
     942:	30 58       	subi	r19, 0x80	; 128
     944:	20 93 d7 20 	sts	0x20D7, r18
     948:	30 93 d8 20 	sts	0x20D8, r19
		}
		qei_val = qei_raw - qei_prev;
     94c:	20 91 91 20 	lds	r18, 0x2091
     950:	30 91 92 20 	lds	r19, 0x2092
     954:	ac 01       	movw	r20, r24
     956:	42 1b       	sub	r20, r18
     958:	53 0b       	sbc	r21, r19
     95a:	40 93 a6 20 	sts	0x20A6, r20
     95e:	50 93 a7 20 	sts	0x20A7, r21
		qei_prev = qei_raw;
     962:	80 93 91 20 	sts	0x2091, r24
     966:	90 93 92 20 	sts	0x2092, r25
		cv_I = (I_meas + cv_I2); // sample two cycles for servoloop
     96a:	e0 91 c2 20 	lds	r30, 0x20C2
     96e:	f0 91 c3 20 	lds	r31, 0x20C3
     972:	80 91 aa 20 	lds	r24, 0x20AA
     976:	90 91 ab 20 	lds	r25, 0x20AB
     97a:	8e 0f       	add	r24, r30
     97c:	9f 1f       	adc	r25, r31
     97e:	80 93 2d 22 	sts	0x222D, r24
     982:	90 93 2e 22 	sts	0x222E, r25
}

static void servoloop(void)
{		
	// current control error
	i_err = i_setpoint - cv_I;
     986:	c0 90 23 20 	lds	r12, 0x2023
     98a:	d0 90 24 20 	lds	r13, 0x2024
     98e:	c8 1a       	sub	r12, r24
     990:	d9 0a       	sbc	r13, r25
     992:	c0 92 d0 20 	sts	0x20D0, r12
     996:	d0 92 d1 20 	sts	0x20D1, r13
	// integrator, wind up limiter
	i_i = clip32(i_i + i_err, -240000, 240000);
     99a:	ee 24       	eor	r14, r14
     99c:	d7 fc       	sbrc	r13, 7
     99e:	e0 94       	com	r14
     9a0:	fe 2c       	mov	r15, r14
     9a2:	00 91 9a 20 	lds	r16, 0x209A
     9a6:	10 91 9b 20 	lds	r17, 0x209B
     9aa:	20 91 9c 20 	lds	r18, 0x209C
     9ae:	30 91 9d 20 	lds	r19, 0x209D
     9b2:	0c 0d       	add	r16, r12
     9b4:	1d 1d       	adc	r17, r13
     9b6:	2e 1d       	adc	r18, r14
     9b8:	3f 1d       	adc	r19, r15
     9ba:	01 38       	cpi	r16, 0x81	; 129
     9bc:	59 ea       	ldi	r21, 0xA9	; 169
     9be:	15 07       	cpc	r17, r21
     9c0:	53 e0       	ldi	r21, 0x03	; 3
     9c2:	25 07       	cpc	r18, r21
     9c4:	31 05       	cpc	r19, r1
     9c6:	24 f0       	brlt	.+8      	; 0x9d0 <PWMtop+0x148>
     9c8:	00 e8       	ldi	r16, 0x80	; 128
     9ca:	19 ea       	ldi	r17, 0xA9	; 169
     9cc:	23 e0       	ldi	r18, 0x03	; 3
     9ce:	30 e0       	ldi	r19, 0x00	; 0
     9d0:	00 38       	cpi	r16, 0x80	; 128
     9d2:	86 e5       	ldi	r24, 0x56	; 86
     9d4:	18 07       	cpc	r17, r24
     9d6:	8c ef       	ldi	r24, 0xFC	; 252
     9d8:	28 07       	cpc	r18, r24
     9da:	8f ef       	ldi	r24, 0xFF	; 255
     9dc:	38 07       	cpc	r19, r24
     9de:	24 f4       	brge	.+8      	; 0x9e8 <PWMtop+0x160>
     9e0:	00 e8       	ldi	r16, 0x80	; 128
     9e2:	16 e5       	ldi	r17, 0x56	; 86
     9e4:	2c ef       	ldi	r18, 0xFC	; 252
     9e6:	3f ef       	ldi	r19, 0xFF	; 255
     9e8:	00 93 9a 20 	sts	0x209A, r16
     9ec:	10 93 9b 20 	sts	0x209B, r17
     9f0:	20 93 9c 20 	sts	0x209C, r18
     9f4:	30 93 9d 20 	sts	0x209D, r19
	// PWMgain = 1 / line voltage, 1 at 24V ( = UPWMGAIN )
	if (ADCvpwr < LPWMGAIN)
     9f8:	68 35       	cpi	r22, 0x58	; 88
     9fa:	42 e0       	ldi	r20, 0x02	; 2
     9fc:	74 07       	cpc	r23, r20
     9fe:	3c f4       	brge	.+14     	; 0xa0e <PWMtop+0x186>
		PWMgain = (UPWMGAIN / LPWMGAIN) * 256;
     a00:	80 e0       	ldi	r24, 0x00	; 0
     a02:	93 e0       	ldi	r25, 0x03	; 3
     a04:	80 93 c4 20 	sts	0x20C4, r24
     a08:	90 93 c5 20 	sts	0x20C5, r25
     a0c:	0e c0       	rjmp	.+28     	; 0xa2a <PWMtop+0x1a2>
	else  
		PWMgain = (UPWMGAIN << 4)/(ADCvpwr >> 3);
     a0e:	75 95       	asr	r23
     a10:	67 95       	ror	r22
     a12:	75 95       	asr	r23
     a14:	67 95       	ror	r22
     a16:	75 95       	asr	r23
     a18:	67 95       	ror	r22
     a1a:	80 e8       	ldi	r24, 0x80	; 128
     a1c:	90 e7       	ldi	r25, 0x70	; 112
     a1e:	0e 94 90 14 	call	0x2920	; 0x2920 <__divmodhi4>
     a22:	60 93 c4 20 	sts	0x20C4, r22
     a26:	70 93 c5 20 	sts	0x20C5, r23
	// PI controller : control = ((PGAIN * i_err) + (IGAIN * i_i)) * PWMgain
	// clipped at maximum duty cycle MAXCONTROL
	 i_con = (int16_t)clip32(q8mul32(q8mul32(i_err, PGAIN) + q8mul32((int16_t)(i_i >> 8), IGAIN), PWMgain), -MAXCONTROL, MAXCONTROL);
     a2a:	01 2f       	mov	r16, r17
     a2c:	12 2f       	mov	r17, r18
     a2e:	23 2f       	mov	r18, r19
     a30:	33 27       	eor	r19, r19
     a32:	27 fd       	sbrc	r18, 7
     a34:	3a 95       	dec	r19
}

static int32_t q8mul32(int16_t value, int16_t mul)
{
	int32_t res;
	res = ((int32_t)value * mul) >> 8;
     a36:	d8 01       	movw	r26, r16
     a38:	20 e0       	ldi	r18, 0x00	; 0
     a3a:	3c e0       	ldi	r19, 0x0C	; 12
     a3c:	0e 94 da 14 	call	0x29b4	; 0x29b4 <__usmulhisi3>
     a40:	87 2e       	mov	r8, r23
     a42:	98 2e       	mov	r9, r24
     a44:	a9 2e       	mov	r10, r25
     a46:	bb 24       	eor	r11, r11
     a48:	a7 fc       	sbrc	r10, 7
     a4a:	ba 94       	dec	r11
     a4c:	a0 e0       	ldi	r26, 0x00	; 0
     a4e:	b5 e0       	ldi	r27, 0x05	; 5
     a50:	a7 01       	movw	r20, r14
     a52:	96 01       	movw	r18, r12
     a54:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <__muluhisi3>
     a58:	bb 27       	eor	r27, r27
     a5a:	97 fd       	sbrc	r25, 7
     a5c:	ba 95       	dec	r27
     a5e:	a9 2f       	mov	r26, r25
     a60:	98 2f       	mov	r25, r24
     a62:	87 2f       	mov	r24, r23
		PWMgain = (UPWMGAIN / LPWMGAIN) * 256;
	else  
		PWMgain = (UPWMGAIN << 4)/(ADCvpwr >> 3);
	// PI controller : control = ((PGAIN * i_err) + (IGAIN * i_i)) * PWMgain
	// clipped at maximum duty cycle MAXCONTROL
	 i_con = (int16_t)clip32(q8mul32(q8mul32(i_err, PGAIN) + q8mul32((int16_t)(i_i >> 8), IGAIN), PWMgain), -MAXCONTROL, MAXCONTROL);
     a64:	94 01       	movw	r18, r8
     a66:	28 0f       	add	r18, r24
     a68:	39 1f       	adc	r19, r25
}

static int32_t q8mul32(int16_t value, int16_t mul)
{
	int32_t res;
	res = ((int32_t)value * mul) >> 8;
     a6a:	a0 91 c4 20 	lds	r26, 0x20C4
     a6e:	b0 91 c5 20 	lds	r27, 0x20C5
     a72:	0e 94 c5 14 	call	0x298a	; 0x298a <__mulhisi3>
     a76:	bb 27       	eor	r27, r27
     a78:	97 fd       	sbrc	r25, 7
     a7a:	ba 95       	dec	r27
     a7c:	a9 2f       	mov	r26, r25
     a7e:	98 2f       	mov	r25, r24
     a80:	87 2f       	mov	r24, r23
     a82:	81 30       	cpi	r24, 0x01	; 1
     a84:	58 e1       	ldi	r21, 0x18	; 24
     a86:	95 07       	cpc	r25, r21
     a88:	a1 05       	cpc	r26, r1
     a8a:	b1 05       	cpc	r27, r1
     a8c:	24 f0       	brlt	.+8      	; 0xa96 <PWMtop+0x20e>
     a8e:	80 e0       	ldi	r24, 0x00	; 0
     a90:	98 e1       	ldi	r25, 0x18	; 24
     a92:	a0 e0       	ldi	r26, 0x00	; 0
     a94:	b0 e0       	ldi	r27, 0x00	; 0
     a96:	81 15       	cp	r24, r1
     a98:	28 ee       	ldi	r18, 0xE8	; 232
     a9a:	92 07       	cpc	r25, r18
     a9c:	2f ef       	ldi	r18, 0xFF	; 255
     a9e:	a2 07       	cpc	r26, r18
     aa0:	b2 07       	cpc	r27, r18
     aa2:	24 f4       	brge	.+8      	; 0xaac <PWMtop+0x224>
     aa4:	80 e0       	ldi	r24, 0x00	; 0
     aa6:	98 ee       	ldi	r25, 0xE8	; 232
     aa8:	af ef       	ldi	r26, 0xFF	; 255
     aaa:	bf ef       	ldi	r27, 0xFF	; 255
		PWMgain = (UPWMGAIN / LPWMGAIN) * 256;
	else  
		PWMgain = (UPWMGAIN << 4)/(ADCvpwr >> 3);
	// PI controller : control = ((PGAIN * i_err) + (IGAIN * i_i)) * PWMgain
	// clipped at maximum duty cycle MAXCONTROL
	 i_con = (int16_t)clip32(q8mul32(q8mul32(i_err, PGAIN) + q8mul32((int16_t)(i_i >> 8), IGAIN), PWMgain), -MAXCONTROL, MAXCONTROL);
     aac:	9c 01       	movw	r18, r24
     aae:	80 93 b4 20 	sts	0x20B4, r24
     ab2:	90 93 b5 20 	sts	0x20B5, r25
		}
		qei_val = qei_raw - qei_prev;
		qei_prev = qei_raw;
		cv_I = (I_meas + cv_I2); // sample two cycles for servoloop
		servoloop();
		cv_a = 0;
     ab6:	10 92 37 22 	sts	0x2237, r1
     aba:	10 92 38 22 	sts	0x2238, r1
		cv_b = 0;
     abe:	10 92 d2 20 	sts	0x20D2, r1
     ac2:	10 92 d3 20 	sts	0x20D3, r1
		if(senable)
     ac6:	80 91 8f 20 	lds	r24, 0x208F
     aca:	88 23       	and	r24, r24
     acc:	69 f1       	breq	.+90     	; 0xb28 <PWMtop+0x2a0>
		{
			//forward
			if(i_con > 0)
     ace:	12 16       	cp	r1, r18
     ad0:	13 06       	cpc	r1, r19
     ad2:	a4 f4       	brge	.+40     	; 0xafc <PWMtop+0x274>
			{
				cv_a = MINCONTROL + i_con;
     ad4:	c9 01       	movw	r24, r18
     ad6:	80 58       	subi	r24, 0x80	; 128
     ad8:	9f 4f       	sbci	r25, 0xFF	; 255
     ada:	80 93 37 22 	sts	0x2237, r24
     ade:	90 93 38 22 	sts	0x2238, r25
				
				// conv_trig was old value of halfpwm
				conv_trig = (cv_a + MINCONTROL + MINCONTROL);
     ae2:	20 58       	subi	r18, 0x80	; 128
     ae4:	3e 4f       	sbci	r19, 0xFE	; 254
     ae6:	20 93 71 20 	sts	0x2071, r18
     aea:	30 93 72 20 	sts	0x2072, r19
				cv_b = MINCONTROL;
     aee:	80 e8       	ldi	r24, 0x80	; 128
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	80 93 d2 20 	sts	0x20D2, r24
     af6:	90 93 d3 20 	sts	0x20D3, r25
     afa:	16 c0       	rjmp	.+44     	; 0xb28 <PWMtop+0x2a0>
			}
			//backwards
			else if(i_con < 0)
     afc:	33 23       	and	r19, r19
     afe:	a4 f4       	brge	.+40     	; 0xb28 <PWMtop+0x2a0>
			{
				cv_a = MINCONTROL;
     b00:	80 e8       	ldi	r24, 0x80	; 128
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	80 93 37 22 	sts	0x2237, r24
     b08:	90 93 38 22 	sts	0x2238, r25
				cv_b = MINCONTROL - i_con;    // - - = + i_con
     b0c:	82 1b       	sub	r24, r18
     b0e:	93 0b       	sbc	r25, r19
     b10:	80 93 d2 20 	sts	0x20D2, r24
     b14:	90 93 d3 20 	sts	0x20D3, r25
				
					// conv_trig was old value of halfpwm
				conv_trig = (cv_b + MINCONTROL + MINCONTROL);
     b18:	80 e8       	ldi	r24, 0x80	; 128
     b1a:	91 e0       	ldi	r25, 0x01	; 1
     b1c:	82 1b       	sub	r24, r18
     b1e:	93 0b       	sbc	r25, r19
     b20:	80 93 71 20 	sts	0x2071, r24
     b24:	90 93 72 20 	sts	0x2072, r25
			}
		}		
		write_pwm_a(cv_a);
     b28:	80 91 37 22 	lds	r24, 0x2237
     b2c:	90 91 38 22 	lds	r25, 0x2238
	TCD0.CCA = value;
}

static void inline write_pwm_a(uint16_t value)
{
	TCD0.CCC = value;
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b9 e0       	ldi	r27, 0x09	; 9
     b34:	9c 96       	adiw	r26, 0x2c	; 44
     b36:	8d 93       	st	X+, r24
     b38:	9c 93       	st	X, r25
     b3a:	9d 97       	sbiw	r26, 0x2d	; 45
					// conv_trig was old value of halfpwm
				conv_trig = (cv_b + MINCONTROL + MINCONTROL);
			}
		}		
		write_pwm_a(cv_a);
		write_pwm_b(cv_b);		
     b3c:	80 91 d2 20 	lds	r24, 0x20D2
     b40:	90 91 d3 20 	lds	r25, 0x20D3
	TCD0.CCC = value;
}

static void inline write_pwm_b(uint16_t value)
{
	TCD0.CCD = value;
     b44:	9e 96       	adiw	r26, 0x2e	; 46
     b46:	8d 93       	st	X+, r24
     b48:	9c 93       	st	X, r25
     b4a:	9f 97       	sbiw	r26, 0x2f	; 47
				conv_trig = (cv_b + MINCONTROL + MINCONTROL);
			}
		}		
		write_pwm_a(cv_a);
		write_pwm_b(cv_b);		
		write_conv_trig(conv_trig);
     b4c:	80 91 71 20 	lds	r24, 0x2071
     b50:	90 91 72 20 	lds	r25, 0x2072
	 i_con = (int16_t)clip32(q8mul32(q8mul32(i_err, PGAIN) + q8mul32((int16_t)(i_i >> 8), IGAIN), PWMgain), -MAXCONTROL, MAXCONTROL);
}	

static void inline write_conv_trig(uint16_t value)
{
	TCD0.CCA = value;
     b54:	98 96       	adiw	r26, 0x28	; 40
     b56:	8d 93       	st	X+, r24
     b58:	9c 93       	st	X, r25
     b5a:	99 97       	sbiw	r26, 0x29	; 41
			}
		}		
		write_pwm_a(cv_a);
		write_pwm_b(cv_b);		
		write_conv_trig(conv_trig);
		ifiltsum += I_meas;
     b5c:	80 91 39 22 	lds	r24, 0x2239
     b60:	90 91 3a 22 	lds	r25, 0x223A
     b64:	e8 0f       	add	r30, r24
     b66:	f9 1f       	adc	r31, r25
     b68:	e0 93 39 22 	sts	0x2239, r30
     b6c:	f0 93 3a 22 	sts	0x223A, r31
		if(ifcnt++>31)
     b70:	80 91 31 22 	lds	r24, 0x2231
     b74:	91 e0       	ldi	r25, 0x01	; 1
     b76:	98 0f       	add	r25, r24
     b78:	90 93 31 22 	sts	0x2231, r25
     b7c:	80 32       	cpi	r24, 0x20	; 32
     b7e:	08 f1       	brcs	.+66     	; 0xbc2 <PWMtop+0x33a>
		{
			ifilt = ifiltsum >> 4;
     b80:	f5 95       	asr	r31
     b82:	e7 95       	ror	r30
     b84:	f5 95       	asr	r31
     b86:	e7 95       	ror	r30
     b88:	f5 95       	asr	r31
     b8a:	e7 95       	ror	r30
     b8c:	f5 95       	asr	r31
     b8e:	e7 95       	ror	r30
     b90:	e0 93 dd 21 	sts	0x21DD, r30
     b94:	f0 93 de 21 	sts	0x21DE, r31
			ifcnt = 0;
     b98:	10 92 31 22 	sts	0x2231, r1
			ifiltsum = 0;
     b9c:	10 92 39 22 	sts	0x2239, r1
     ba0:	10 92 3a 22 	sts	0x223A, r1
     ba4:	0e c0       	rjmp	.+28     	; 0xbc2 <PWMtop+0x33a>
		}
	}
	else /// ????
	{
		write_conv_trig((conv_trig + (int16_t)(0.5 * PWMPER)) % PWMPER);		
     ba6:	80 91 71 20 	lds	r24, 0x2071
     baa:	90 91 72 20 	lds	r25, 0x2072
     bae:	80 58       	subi	r24, 0x80	; 128
     bb0:	93 4f       	sbci	r25, 0xF3	; 243
     bb2:	60 e0       	ldi	r22, 0x00	; 0
     bb4:	79 e1       	ldi	r23, 0x19	; 25
     bb6:	0e 94 90 14 	call	0x2920	; 0x2920 <__divmodhi4>
	 i_con = (int16_t)clip32(q8mul32(q8mul32(i_err, PGAIN) + q8mul32((int16_t)(i_i >> 8), IGAIN), PWMgain), -MAXCONTROL, MAXCONTROL);
}	

static void inline write_conv_trig(uint16_t value)
{
	TCD0.CCA = value;
     bba:	e0 e0       	ldi	r30, 0x00	; 0
     bbc:	f9 e0       	ldi	r31, 0x09	; 9
     bbe:	80 a7       	std	Z+40, r24	; 0x28
     bc0:	91 a7       	std	Z+41, r25	; 0x29
	}
	else /// ????
	{
		write_conv_trig((conv_trig + (int16_t)(0.5 * PWMPER)) % PWMPER);		
	}
	cv_I2 = I_meas;
     bc2:	80 91 c2 20 	lds	r24, 0x20C2
     bc6:	90 91 c3 20 	lds	r25, 0x20C3
     bca:	80 93 aa 20 	sts	0x20AA, r24
     bce:	90 93 ab 20 	sts	0x20AB, r25

	// alternate ntc1 and ntc2 sensor read out
	if(!adctoggle)
     bd2:	80 91 93 20 	lds	r24, 0x2093
     bd6:	81 11       	cpse	r24, r1
     bd8:	10 c0       	rjmp	.+32     	; 0xbfa <PWMtop+0x372>
	{
		adctoggle = 1;
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	80 93 93 20 	sts	0x2093, r24
		ADCntc = adc_get_result(&ADC, ADC_CH3);
     be0:	e8 e3       	ldi	r30, 0x38	; 56
     be2:	f2 e0       	ldi	r31, 0x02	; 2
     be4:	84 81       	ldd	r24, Z+4	; 0x04
     be6:	95 81       	ldd	r25, Z+5	; 0x05
     be8:	80 93 a2 20 	sts	0x20A2, r24
     bec:	90 93 a3 20 	sts	0x20A3, r25
		// prepare next scan for NTC2 sensor
		ADC.CH3.MUXCTRL = (ADCCH_POS_PIN7 << ADC_CH_MUXPOS_gp) | (ADCCH_NEG_PIN1 << ADC_CH_MUXNEG_gp);
     bf0:	89 e3       	ldi	r24, 0x39	; 57
     bf2:	e0 e0       	ldi	r30, 0x00	; 0
     bf4:	f2 e0       	ldi	r31, 0x02	; 2
     bf6:	81 af       	std	Z+57, r24	; 0x39
     bf8:	0e c0       	rjmp	.+28     	; 0xc16 <PWMtop+0x38e>
	}
	else
	{
		adctoggle = 0;
     bfa:	10 92 93 20 	sts	0x2093, r1
		ADCntc2 = adc_get_result(&ADC, ADC_CH3);
     bfe:	e8 e3       	ldi	r30, 0x38	; 56
     c00:	f2 e0       	ldi	r31, 0x02	; 2
     c02:	84 81       	ldd	r24, Z+4	; 0x04
     c04:	95 81       	ldd	r25, Z+5	; 0x05
     c06:	80 93 a0 20 	sts	0x20A0, r24
     c0a:	90 93 a1 20 	sts	0x20A1, r25
		// prepare next scan for NTC1 sensor
		ADC.CH3.MUXCTRL = (ADCCH_POS_PIN5 << ADC_CH_MUXPOS_gp) | (ADCCH_NEG_PIN1 << ADC_CH_MUXNEG_gp);
     c0e:	89 e2       	ldi	r24, 0x29	; 41
     c10:	e0 e0       	ldi	r30, 0x00	; 0
     c12:	f2 e0       	ldi	r31, 0x02	; 2
     c14:	81 af       	std	Z+57, r24	; 0x39
	}
}
     c16:	1f 91       	pop	r17
     c18:	0f 91       	pop	r16
     c1a:	ff 90       	pop	r15
     c1c:	ef 90       	pop	r14
     c1e:	df 90       	pop	r13
     c20:	cf 90       	pop	r12
     c22:	bf 90       	pop	r11
     c24:	af 90       	pop	r10
     c26:	9f 90       	pop	r9
     c28:	8f 90       	pop	r8
     c2a:	08 95       	ret

00000c2c <__vector_119>:
static FILE mystdout = FDEV_SETUP_STREAM (uart_putcharF0, NULL, _FDEV_SETUP_WRITE);
static FILE mystdin  = FDEV_SETUP_STREAM (NULL, uart_getcharF0, _FDEV_SETUP_READ);

// USARTF0 Receiver interrupt service routine
ISR(USARTF0_RXC_vect)
{
     c2c:	1f 92       	push	r1
     c2e:	0f 92       	push	r0
     c30:	0f b6       	in	r0, 0x3f	; 63
     c32:	0f 92       	push	r0
     c34:	11 24       	eor	r1, r1
     c36:	0b b6       	in	r0, 0x3b	; 59
     c38:	0f 92       	push	r0
     c3a:	8f 93       	push	r24
     c3c:	9f 93       	push	r25
     c3e:	ef 93       	push	r30
     c40:	ff 93       	push	r31
	unsigned char status;
	char data;

	status=USARTF0.STATUS;
     c42:	e0 ea       	ldi	r30, 0xA0	; 160
     c44:	fb e0       	ldi	r31, 0x0B	; 11
     c46:	81 81       	ldd	r24, Z+1	; 0x01
	data=USARTF0.DATA;
     c48:	90 81       	ld	r25, Z
	if ((status & (USART_FERR_bm | USART_PERR_bm | USART_BUFOVF_bm)) == 0)
     c4a:	8c 71       	andi	r24, 0x1C	; 28
     c4c:	e1 f4       	brne	.+56     	; 0xc86 <__vector_119+0x5a>
	{
		rx_buffer_USARTF0[rx_wr_index_USARTF0++]=data;
     c4e:	e0 91 22 20 	lds	r30, 0x2022
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	8e 0f       	add	r24, r30
     c56:	80 93 22 20 	sts	0x2022, r24
     c5a:	f0 e0       	ldi	r31, 0x00	; 0
     c5c:	e1 52       	subi	r30, 0x21	; 33
     c5e:	fe 4d       	sbci	r31, 0xDE	; 222
     c60:	90 83       	st	Z, r25
		if (rx_wr_index_USARTF0 == RX_BUFFER_SIZE_USARTF0) rx_wr_index_USARTF0=0;
     c62:	80 91 22 20 	lds	r24, 0x2022
     c66:	80 34       	cpi	r24, 0x40	; 64
     c68:	11 f4       	brne	.+4      	; 0xc6e <__vector_119+0x42>
     c6a:	10 92 22 20 	sts	0x2022, r1
		if (++rx_counter_USARTF0 == RX_BUFFER_SIZE_USARTF0)
     c6e:	80 91 20 20 	lds	r24, 0x2020
     c72:	8f 5f       	subi	r24, 0xFF	; 255
     c74:	80 93 20 20 	sts	0x2020, r24
     c78:	80 34       	cpi	r24, 0x40	; 64
     c7a:	29 f4       	brne	.+10     	; 0xc86 <__vector_119+0x5a>
		{
			rx_counter_USARTF0=0;
     c7c:	10 92 20 20 	sts	0x2020, r1
			rx_buffer_overflow_USARTF0=1;
     c80:	81 e0       	ldi	r24, 0x01	; 1
     c82:	80 93 1f 20 	sts	0x201F, r24
		};
	};
}
     c86:	ff 91       	pop	r31
     c88:	ef 91       	pop	r30
     c8a:	9f 91       	pop	r25
     c8c:	8f 91       	pop	r24
     c8e:	0f 90       	pop	r0
     c90:	0b be       	out	0x3b, r0	; 59
     c92:	0f 90       	pop	r0
     c94:	0f be       	out	0x3f, r0	; 63
     c96:	0f 90       	pop	r0
     c98:	1f 90       	pop	r1
     c9a:	18 95       	reti

00000c9c <__vector_121>:
	return data;
}

// USARTF0 Transmitter interrupt service routine
ISR(USARTF0_TXC_vect)
{
     c9c:	1f 92       	push	r1
     c9e:	0f 92       	push	r0
     ca0:	0f b6       	in	r0, 0x3f	; 63
     ca2:	0f 92       	push	r0
     ca4:	11 24       	eor	r1, r1
     ca6:	0b b6       	in	r0, 0x3b	; 59
     ca8:	0f 92       	push	r0
     caa:	8f 93       	push	r24
     cac:	ef 93       	push	r30
     cae:	ff 93       	push	r31
	if (tx_counter_USARTF0)
     cb0:	80 91 1c 20 	lds	r24, 0x201C
     cb4:	88 23       	and	r24, r24
     cb6:	b9 f0       	breq	.+46     	; 0xce6 <__vector_121+0x4a>
	{
		--tx_counter_USARTF0;
     cb8:	80 91 1c 20 	lds	r24, 0x201C
     cbc:	81 50       	subi	r24, 0x01	; 1
     cbe:	80 93 1c 20 	sts	0x201C, r24
		USARTF0.DATA=tx_buffer_USARTF0[tx_rd_index_USARTF0++];
     cc2:	e0 91 1d 20 	lds	r30, 0x201D
     cc6:	81 e0       	ldi	r24, 0x01	; 1
     cc8:	8e 0f       	add	r24, r30
     cca:	80 93 1d 20 	sts	0x201D, r24
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	e0 52       	subi	r30, 0x20	; 32
     cd2:	ff 4d       	sbci	r31, 0xDF	; 223
     cd4:	80 81       	ld	r24, Z
     cd6:	80 93 a0 0b 	sts	0x0BA0, r24
		if (tx_rd_index_USARTF0 == TX_BUFFER_SIZE_USARTF0) tx_rd_index_USARTF0=0;
     cda:	80 91 1d 20 	lds	r24, 0x201D
     cde:	8a 3f       	cpi	r24, 0xFA	; 250
     ce0:	11 f4       	brne	.+4      	; 0xce6 <__vector_121+0x4a>
     ce2:	10 92 1d 20 	sts	0x201D, r1
	}
}
     ce6:	ff 91       	pop	r31
     ce8:	ef 91       	pop	r30
     cea:	8f 91       	pop	r24
     cec:	0f 90       	pop	r0
     cee:	0b be       	out	0x3b, r0	; 59
     cf0:	0f 90       	pop	r0
     cf2:	0f be       	out	0x3f, r0	; 63
     cf4:	0f 90       	pop	r0
     cf6:	1f 90       	pop	r1
     cf8:	18 95       	reti

00000cfa <main>:
		cenable = 0;
	}
}

int main (void)
{
     cfa:	cf 93       	push	r28
     cfc:	df 93       	push	r29
     cfe:	cd b7       	in	r28, 0x3d	; 61
     d00:	de b7       	in	r29, 0x3e	; 62
     d02:	29 97       	sbiw	r28, 0x09	; 9
     d04:	cd bf       	out	0x3d, r28	; 61
     d06:	de bf       	out	0x3e, r29	; 62
		.charlength   = USART_CHSIZE_8BIT_gc,
		.paritytype   = USART_PMODE_DISABLED_gc,
		.stopbits     = false
	};
	
	board_init();	
     d08:	98 da       	rcall	.-2768   	; 0x23a <board_init>
     d0a:	80 e0       	ldi	r24, 0x00	; 0
     d0c:	90 e0       	ldi	r25, 0x00	; 0
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
     d0e:	01 96       	adiw	r24, 0x01	; 1
     d10:	85 35       	cpi	r24, 0x55	; 85
     d12:	23 e5       	ldi	r18, 0x53	; 83
     d14:	92 07       	cpc	r25, r18
     d16:	d9 f7       	brne	.-10     	; 0xd0e <main+0x14>
     d18:	80 e1       	ldi	r24, 0x10	; 16
     d1a:	e0 ea       	ldi	r30, 0xA0	; 160
     d1c:	f6 e0       	ldi	r31, 0x06	; 6
     d1e:	85 83       	std	Z+5, r24	; 0x05
     d20:	e0 e4       	ldi	r30, 0x40	; 64
     d22:	f6 e0       	ldi	r31, 0x06	; 6
     d24:	85 83       	std	Z+5, r24	; 0x05

static void adc_init(void)
{
	struct adc_config adc_conf;

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     d26:	62 e0       	ldi	r22, 0x02	; 2
     d28:	80 e0       	ldi	r24, 0x00	; 0
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	8f d2       	rcall	.+1310   	; 0x124c <sysclk_enable_module>
	//EVSYS.CH3MUX = EVSYS_CHMUX_TCD0_OVF_gc;
	EVSYS.CH3MUX = EVSYS_CHMUX_TCD0_CCA_gc;
     d2e:	68 94       	set
     d30:	cc 24       	eor	r12, r12
     d32:	c7 f8       	bld	r12, 7
     d34:	dd 24       	eor	r13, r13
     d36:	d3 94       	inc	r13
     d38:	84 ed       	ldi	r24, 0xD4	; 212
     d3a:	f6 01       	movw	r30, r12
     d3c:	83 83       	std	Z+3, r24	; 0x03
	adc_read_configuration(&ADC, &adc_conf);
     d3e:	be 01       	movw	r22, r28
     d40:	6f 5f       	subi	r22, 0xFF	; 255
     d42:	7f 4f       	sbci	r23, 0xFF	; 255
     d44:	80 e0       	ldi	r24, 0x00	; 0
     d46:	92 e0       	ldi	r25, 0x02	; 2
     d48:	7f d3       	rcall	.+1790   	; 0x1448 <adc_read_configuration>
	adcch_read_configuration(&ADC, ADC_CH0, &adcch_conf);
     d4a:	4a e8       	ldi	r20, 0x8A	; 138
     d4c:	50 e2       	ldi	r21, 0x20	; 32
     d4e:	61 e0       	ldi	r22, 0x01	; 1
     d50:	80 e0       	ldi	r24, 0x00	; 0
     d52:	92 e0       	ldi	r25, 0x02	; 2
     d54:	d5 d3       	rcall	.+1962   	; 0x1500 <adcch_read_configuration>
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
     d56:	8a 81       	ldd	r24, Y+2	; 0x02
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
     d58:	9b 81       	ldd	r25, Y+3	; 0x03
     d5a:	9f 78       	andi	r25, 0x8F	; 143
	conf->refctrl |= ref;
     d5c:	90 62       	ori	r25, 0x20	; 32
     d5e:	9b 83       	std	Y+3, r25	; 0x03
		conf->ctrlb |= ADC_FREERUN_bm;
		conf->evctrl = (nr_of_ch - 1) << ADC_SWEEP_gp;
		break;

	case ADC_TRIG_EVENT_SWEEP:
		conf->ctrlb &= ~ADC_FREERUN_bm;
     d60:	81 7e       	andi	r24, 0xE1	; 225
     d62:	80 61       	ori	r24, 0x10	; 16
     d64:	8a 83       	std	Y+2, r24	; 0x02
		conf->evctrl = (nr_of_ch - 1) << ADC_SWEEP_gp |
     d66:	8d ed       	ldi	r24, 0xDD	; 221
     d68:	8c 83       	std	Y+4, r24	; 0x04
		psc = ADC_PRESCALER_DIV256_gc;
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
	}

	conf->prescaler = psc;
     d6a:	68 94       	set
     d6c:	bb 24       	eor	r11, r11
     d6e:	b1 f8       	bld	r11, 1
     d70:	bd 82       	std	Y+5, r11	; 0x05

	adc_set_conversion_parameters(&adc_conf, ADC_SIGN_ON , ADC_RES_12, ADC_REFSEL_AREFA_gc);
	/* set adc start at event ch 3, sweep over 4 channels */
	adc_set_conversion_trigger(&adc_conf, ADC_TRIG_EVENT_SWEEP, 4, 3);
	adc_set_clock_rate(&adc_conf, 2000000UL);
	adc_write_configuration(&ADC, &adc_conf);
     d72:	be 01       	movw	r22, r28
     d74:	6f 5f       	subi	r22, 0xFF	; 255
     d76:	7f 4f       	sbci	r23, 0xFF	; 255
     d78:	80 e0       	ldi	r24, 0x00	; 0
     d7a:	92 e0       	ldi	r25, 0x02	; 2
     d7c:	14 d3       	rcall	.+1576   	; 0x13a6 <adc_write_configuration>
		 * stage is not used, i.e., unity gain.
		 */
		if (neg <= ADCCH_NEG_PIN3) {
			Assert(gain == 1);

			ch_conf->ctrl = ADC_CH_INPUTMODE_DIFF_gc;
     d7e:	0f 2e       	mov	r0, r31
     d80:	fa e8       	ldi	r31, 0x8A	; 138
     d82:	ef 2e       	mov	r14, r31
     d84:	f0 e2       	ldi	r31, 0x20	; 32
     d86:	ff 2e       	mov	r15, r31
     d88:	f0 2d       	mov	r31, r0
     d8a:	f7 01       	movw	r30, r14
     d8c:	b0 82       	st	Z, r11
			ch_conf->muxctrl = (pos << ADC_CH_MUXPOS_gp) |
     d8e:	0b e8       	ldi	r16, 0x8B	; 139
     d90:	10 e2       	ldi	r17, 0x20	; 32
     d92:	81 e1       	ldi	r24, 0x11	; 17
     d94:	f8 01       	movw	r30, r16
     d96:	80 83       	st	Z, r24

	// current input 1
	adcch_set_input(&adcch_conf, ADCCH_POS_PIN2, ADCCH_NEG_PIN1, 1);
	adcch_write_configuration(&ADC, ADC_CH0, &adcch_conf);
     d98:	a7 01       	movw	r20, r14
     d9a:	61 e0       	ldi	r22, 0x01	; 1
     d9c:	80 e0       	ldi	r24, 0x00	; 0
     d9e:	92 e0       	ldi	r25, 0x02	; 2
     da0:	76 d3       	rcall	.+1772   	; 0x148e <adcch_write_configuration>
		 * stage is not used, i.e., unity gain.
		 */
		if (neg <= ADCCH_NEG_PIN3) {
			Assert(gain == 1);

			ch_conf->ctrl = ADC_CH_INPUTMODE_DIFF_gc;
     da2:	f7 01       	movw	r30, r14
     da4:	b0 82       	st	Z, r11
			ch_conf->muxctrl = (pos << ADC_CH_MUXPOS_gp) |
     da6:	89 e1       	ldi	r24, 0x19	; 25
     da8:	f8 01       	movw	r30, r16
     daa:	80 83       	st	Z, r24
	// current input 2
	adcch_set_input(&adcch_conf, ADCCH_POS_PIN3, ADCCH_NEG_PIN1, 1);
	adcch_write_configuration(&ADC, ADC_CH1, &adcch_conf);
     dac:	a7 01       	movw	r20, r14
     dae:	62 e0       	ldi	r22, 0x02	; 2
     db0:	80 e0       	ldi	r24, 0x00	; 0
     db2:	92 e0       	ldi	r25, 0x02	; 2
     db4:	6c d3       	rcall	.+1752   	; 0x148e <adcch_write_configuration>
		 * stage is not used, i.e., unity gain.
		 */
		if (neg <= ADCCH_NEG_PIN3) {
			Assert(gain == 1);

			ch_conf->ctrl = ADC_CH_INPUTMODE_DIFF_gc;
     db6:	f7 01       	movw	r30, r14
     db8:	b0 82       	st	Z, r11
			ch_conf->muxctrl = (pos << ADC_CH_MUXPOS_gp) |
     dba:	81 e2       	ldi	r24, 0x21	; 33
     dbc:	f8 01       	movw	r30, r16
     dbe:	80 83       	st	Z, r24
	// PWM supply voltage
	adcch_set_input(&adcch_conf, ADCCH_POS_PIN4, ADCCH_NEG_PIN1, 1);
	adcch_write_configuration(&ADC, ADC_CH2, &adcch_conf);
     dc0:	a7 01       	movw	r20, r14
     dc2:	64 e0       	ldi	r22, 0x04	; 4
     dc4:	80 e0       	ldi	r24, 0x00	; 0
     dc6:	92 e0       	ldi	r25, 0x02	; 2
     dc8:	62 d3       	rcall	.+1732   	; 0x148e <adcch_write_configuration>
		 * stage is not used, i.e., unity gain.
		 */
		if (neg <= ADCCH_NEG_PIN3) {
			Assert(gain == 1);

			ch_conf->ctrl = ADC_CH_INPUTMODE_DIFF_gc;
     dca:	f7 01       	movw	r30, r14
     dcc:	b0 82       	st	Z, r11
			ch_conf->muxctrl = (pos << ADC_CH_MUXPOS_gp) |
     dce:	89 e2       	ldi	r24, 0x29	; 41
     dd0:	f8 01       	movw	r30, r16
     dd2:	80 83       	st	Z, r24
	// NTC sensor
	adcch_set_input(&adcch_conf, ADCCH_POS_PIN5, ADCCH_NEG_PIN1, 1);
	adcch_write_configuration(&ADC, ADC_CH3, &adcch_conf);
     dd4:	a7 01       	movw	r20, r14
     dd6:	68 e0       	ldi	r22, 0x08	; 8
     dd8:	80 e0       	ldi	r24, 0x00	; 0
     dda:	92 e0       	ldi	r25, 0x02	; 2
     ddc:	58 d3       	rcall	.+1712   	; 0x148e <adcch_write_configuration>

	adc_enable(&ADC);
     dde:	80 e0       	ldi	r24, 0x00	; 0
     de0:	92 e0       	ldi	r25, 0x02	; 2
     de2:	ca d2       	rcall	.+1428   	; 0x1378 <adc_enable>
}

static void qei_init(void)
{
	PORTE.PIN0CTRL = PORT_ISC_LEVEL_gc;         // QDPH0  - D0
     de4:	e0 e8       	ldi	r30, 0x80	; 128
     de6:	f6 e0       	ldi	r31, 0x06	; 6
     de8:	83 e0       	ldi	r24, 0x03	; 3
     dea:	80 8b       	std	Z+16, r24	; 0x10
	PORTE.PIN1CTRL = PORT_ISC_LEVEL_gc;         // QDPH90 - D1	
     dec:	81 8b       	std	Z+17, r24	; 0x11
	EVSYS.CH0MUX = EVSYS_CHMUX_PORTE_PIN0_gc;
     dee:	80 e7       	ldi	r24, 0x70	; 112
     df0:	f6 01       	movw	r30, r12
     df2:	80 83       	st	Z, r24
	EVSYS_CH0CTRL = EVSYS_QDEN_bm | EVSYS_DIGFILT_2SAMPLES_gc; 
     df4:	89 e0       	ldi	r24, 0x09	; 9
     df6:	80 93 88 01 	sts	0x0188, r24
	tc_enable(&TCE0);
     dfa:	80 e0       	ldi	r24, 0x00	; 0
     dfc:	9a e0       	ldi	r25, 0x0A	; 10
     dfe:	0e 94 66 11 	call	0x22cc	; 0x22cc <tc_enable>
 * \param eventaction Event action capture type
 */
static inline void tc_set_input_capture(volatile void *tc,
		TC_EVSEL_t eventsource, TC_EVACT_t eventaction)
{
	((TC0_t *)tc)->CTRLD &= ~(TC0_EVSEL_gm | TC0_EVACT_gm);
     e02:	e0 e0       	ldi	r30, 0x00	; 0
     e04:	fa e0       	ldi	r31, 0x0A	; 10
     e06:	83 81       	ldd	r24, Z+3	; 0x03
     e08:	80 71       	andi	r24, 0x10	; 16
     e0a:	83 83       	std	Z+3, r24	; 0x03
	((TC0_t *)tc)->CTRLD |= ((uint8_t)eventsource | (uint8_t)eventaction);
     e0c:	83 81       	ldd	r24, Z+3	; 0x03
     e0e:	88 66       	ori	r24, 0x68	; 104
     e10:	83 83       	std	Z+3, r24	; 0x03
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
     e12:	8f ef       	ldi	r24, 0xFF	; 255
     e14:	9f ef       	ldi	r25, 0xFF	; 255
     e16:	86 a3       	std	Z+38, r24	; 0x26
     e18:	97 a3       	std	Z+39, r25	; 0x27
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
     e1a:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
     e1c:	80 7f       	andi	r24, 0xF0	; 240
     e1e:	81 60       	ori	r24, 0x01	; 1
     e20:	80 83       	st	Z, r24
	
	adc_init();
	qei_init();
	
	/* setup TimerCounter D0 for single-slope PWM 40KHz at 8*cpu clock = 256MHz */
	tc_enable(&TCD0);
     e22:	80 e0       	ldi	r24, 0x00	; 0
     e24:	99 e0       	ldi	r25, 0x09	; 9
     e26:	0e 94 66 11 	call	0x22cc	; 0x22cc <tc_enable>
	tc_set_overflow_interrupt_callback(&TCD0, &PWMtop);
     e2a:	64 e4       	ldi	r22, 0x44	; 68
     e2c:	74 e0       	ldi	r23, 0x04	; 4
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	99 e0       	ldi	r25, 0x09	; 9
     e32:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <tc_set_overflow_interrupt_callback>
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
     e36:	e0 e0       	ldi	r30, 0x00	; 0
     e38:	f9 e0       	ldi	r31, 0x09	; 9
     e3a:	81 81       	ldd	r24, Z+1	; 0x01
     e3c:	88 7f       	andi	r24, 0xF8	; 248
     e3e:	83 60       	ori	r24, 0x03	; 3
     e40:	81 83       	std	Z+1, r24	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
     e42:	80 e0       	ldi	r24, 0x00	; 0
     e44:	99 e1       	ldi	r25, 0x19	; 25
     e46:	86 a3       	std	Z+38, r24	; 0x26
     e48:	97 a3       	std	Z+39, r25	; 0x27
 * \note  Configures OVFINTLVL in INTCTRLA
 */
static inline void tc_set_overflow_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
	((TC0_t *)tc)->INTCTRLA = ((TC0_t *)tc)->INTCTRLA & ~TC0_OVFINTLVL_gm;
     e4a:	86 81       	ldd	r24, Z+6	; 0x06
     e4c:	8c 7f       	andi	r24, 0xFC	; 252
     e4e:	86 83       	std	Z+6, r24	; 0x06
	((TC0_t *)tc)->INTCTRLA =
			((TC0_t *)tc)->INTCTRLA | (level << TC0_OVFINTLVL_gp);
     e50:	86 81       	ldd	r24, Z+6	; 0x06
 */
static inline void tc_set_overflow_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
	((TC0_t *)tc)->INTCTRLA = ((TC0_t *)tc)->INTCTRLA & ~TC0_OVFINTLVL_gm;
	((TC0_t *)tc)->INTCTRLA =
     e52:	82 60       	ori	r24, 0x02	; 2
     e54:	86 83       	std	Z+6, r24	; 0x06
 * \param hires Pointer to AWeX module (AWEXC or AWEXE)
 * \param hi_res_mode HIRES configuration
 */
static inline void tc_hires_set_mode(HIRES_t * hires, HIRES_HREN_t hi_res_mode)
{
	((HIRES_t *)hires)->CTRLA = hi_res_mode;
     e56:	85 e0       	ldi	r24, 0x05	; 5
     e58:	80 93 90 09 	sts	0x0990, r24
			break;
		case TC_CCB:
			((TC0_t *)tc)->CCB = value;
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCC = value;
     e5c:	14 a6       	std	Z+44, r1	; 0x2c
     e5e:	15 a6       	std	Z+45, r1	; 0x2d
			break;
		case TC_CCD:
			((TC0_t *)tc)->CCD = value;
     e60:	16 a6       	std	Z+46, r1	; 0x2e
     e62:	17 a6       	std	Z+47, r1	; 0x2f
	tc_write_period(&TCD0, PWMPER);
	tc_set_overflow_interrupt_level(&TCD0, TC_INT_LVL_MED);
	tc_hires_set_mode(&HIRESD, HIRES_HREN_TC0_gc | SUPERHIGHRES); // 
	tc_write_cc(&TCD0, TC_CCC, 0); // init at 0% PWM
	tc_write_cc(&TCD0, TC_CCD, 0); // init at 0% PWM
	conv_trig = HALFPWM;
     e64:	80 e8       	ldi	r24, 0x80	; 128
     e66:	9c e0       	ldi	r25, 0x0C	; 12
     e68:	80 93 71 20 	sts	0x2071, r24
     e6c:	90 93 72 20 	sts	0x2072, r25
	 i_con = (int16_t)clip32(q8mul32(q8mul32(i_err, PGAIN) + q8mul32((int16_t)(i_i >> 8), IGAIN), PWMgain), -MAXCONTROL, MAXCONTROL);
}	

static void inline write_conv_trig(uint16_t value)
{
	TCD0.CCA = value;
     e70:	80 a7       	std	Z+40, r24	; 0x28
     e72:	91 a7       	std	Z+41, r25	; 0x29
 */
static inline void tc_enable_cc_channels(volatile void *tc,
		enum tc_cc_channel_mask_enable_t enablemask)
{
	if (tc_is_tc0(void *tc)) {
		((TC0_t *)tc)->CTRLB |= enablemask;
     e74:	81 81       	ldd	r24, Z+1	; 0x01
     e76:	80 64       	ori	r24, 0x40	; 64
     e78:	81 83       	std	Z+1, r24	; 0x01
     e7a:	81 81       	ldd	r24, Z+1	; 0x01
     e7c:	80 68       	ori	r24, 0x80	; 128
     e7e:	81 83       	std	Z+1, r24	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
     e80:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
     e82:	80 7f       	andi	r24, 0xF0	; 240
     e84:	81 60       	ori	r24, 0x01	; 1
     e86:	80 83       	st	Z, r24
	tc_enable_cc_channels(&TCD0,TC_CCCEN); // enable compare C to pin PD2 = PWM_A
	tc_enable_cc_channels(&TCD0,TC_CCDEN); // enable compare D to pin PD3 = PWM_B
	tc_write_clock_source(&TCD0, TC_CLKSEL_DIV1_gc);
	
	/* setup TimerCounter C0 for single-slope 1KHZ  */
	tc_enable(&TCC0);
     e88:	80 e0       	ldi	r24, 0x00	; 0
     e8a:	98 e0       	ldi	r25, 0x08	; 8
     e8c:	0e 94 66 11 	call	0x22cc	; 0x22cc <tc_enable>
	tc_set_overflow_interrupt_callback(&TCC0, &VelocityControl); //Call back functie naar de regeling
     e90:	61 ed       	ldi	r22, 0xD1	; 209
     e92:	71 e0       	ldi	r23, 0x01	; 1
     e94:	80 e0       	ldi	r24, 0x00	; 0
     e96:	98 e0       	ldi	r25, 0x08	; 8
     e98:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <tc_set_overflow_interrupt_callback>
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
     e9c:	e0 e0       	ldi	r30, 0x00	; 0
     e9e:	f8 e0       	ldi	r31, 0x08	; 8
     ea0:	81 81       	ldd	r24, Z+1	; 0x01
     ea2:	88 7f       	andi	r24, 0xF8	; 248
     ea4:	83 60       	ori	r24, 0x03	; 3
     ea6:	81 83       	std	Z+1, r24	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
     ea8:	80 e0       	ldi	r24, 0x00	; 0
     eaa:	9d e7       	ldi	r25, 0x7D	; 125
     eac:	86 a3       	std	Z+38, r24	; 0x26
     eae:	97 a3       	std	Z+39, r25	; 0x27
 * \note  Configures OVFINTLVL in INTCTRLA
 */
static inline void tc_set_overflow_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
	((TC0_t *)tc)->INTCTRLA = ((TC0_t *)tc)->INTCTRLA & ~TC0_OVFINTLVL_gm;
     eb0:	86 81       	ldd	r24, Z+6	; 0x06
     eb2:	8c 7f       	andi	r24, 0xFC	; 252
     eb4:	86 83       	std	Z+6, r24	; 0x06
	((TC0_t *)tc)->INTCTRLA =
			((TC0_t *)tc)->INTCTRLA | (level << TC0_OVFINTLVL_gp);
     eb6:	86 81       	ldd	r24, Z+6	; 0x06
 */
static inline void tc_set_overflow_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
	((TC0_t *)tc)->INTCTRLA = ((TC0_t *)tc)->INTCTRLA & ~TC0_OVFINTLVL_gm;
	((TC0_t *)tc)->INTCTRLA =
     eb8:	81 60       	ori	r24, 0x01	; 1
     eba:	86 83       	std	Z+6, r24	; 0x06
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
     ebc:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
     ebe:	80 7f       	andi	r24, 0xF0	; 240
     ec0:	81 60       	ori	r24, 0x01	; 1
     ec2:	80 83       	st	Z, r24
	tc_write_period(&TCC0, SERVICEPER);
	tc_set_overflow_interrupt_level(&TCC0, TC_INT_LVL_LO);
	tc_write_clock_source(&TCC0, TC_CLKSEL_DIV1_gc);

	/* setup SPI port for DRV, mode 1 and 1MHz */
	spi_master_init(&DRVSPI);
     ec4:	80 ec       	ldi	r24, 0xC0	; 192
     ec6:	98 e0       	ldi	r25, 0x08	; 8
     ec8:	d6 d1       	rcall	.+940    	; 0x1276 <spi_master_init>
	spi_master_setup_device(&DRVSPI, NULL, SPI_MODE_1, 1000000, 0);
     eca:	c1 2c       	mov	r12, r1
     ecc:	d1 2c       	mov	r13, r1
     ece:	76 01       	movw	r14, r12
     ed0:	00 e4       	ldi	r16, 0x40	; 64
     ed2:	12 e4       	ldi	r17, 0x42	; 66
     ed4:	2f e0       	ldi	r18, 0x0F	; 15
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	41 e0       	ldi	r20, 0x01	; 1
     eda:	60 e0       	ldi	r22, 0x00	; 0
     edc:	70 e0       	ldi	r23, 0x00	; 0
     ede:	80 ec       	ldi	r24, 0xC0	; 192
     ee0:	98 e0       	ldi	r25, 0x08	; 8
     ee2:	eb d1       	rcall	.+982    	; 0x12ba <spi_master_setup_device>
 *
 * \param spi Base address of the SPI instance.
 */
static inline void spi_enable(SPI_t *spi)
{
	spi->CTRL |= SPI_ENABLE_bm;
     ee4:	e0 ec       	ldi	r30, 0xC0	; 192
     ee6:	f8 e0       	ldi	r31, 0x08	; 8
     ee8:	80 81       	ld	r24, Z
     eea:	80 64       	ori	r24, 0x40	; 64
     eec:	80 83       	st	Z, r24
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
     eee:	83 e0       	ldi	r24, 0x03	; 3
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	8d 83       	std	Y+5, r24	; 0x05
     ef4:	9e 83       	std	Y+6, r25	; 0x06
	usart_rs232_options.paritytype   = options->paritytype;
     ef6:	1f 82       	std	Y+7, r1	; 0x07
     ef8:	18 86       	std	Y+8, r1	; 0x08
	usart_rs232_options.stopbits     = options->stopbits;
     efa:	19 86       	std	Y+9, r1	; 0x09
	usart_rs232_options.baudrate     = options->baudrate;
     efc:	80 e0       	ldi	r24, 0x00	; 0
     efe:	92 ec       	ldi	r25, 0xC2	; 194
     f00:	a1 e0       	ldi	r26, 0x01	; 1
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	89 83       	std	Y+1, r24	; 0x01
     f06:	9a 83       	std	Y+2, r25	; 0x02
     f08:	ab 83       	std	Y+3, r26	; 0x03
     f0a:	bc 83       	std	Y+4, r27	; 0x04
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART1_bm);
	}
#endif
#ifdef USARTF0
	if((uint16_t)usart == (uint16_t)&USARTF0) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART0_bm);
     f0c:	60 e1       	ldi	r22, 0x10	; 16
     f0e:	86 e0       	ldi	r24, 0x06	; 6
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	9c d1       	rcall	.+824    	; 0x124c <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
     f14:	be 01       	movw	r22, r28
     f16:	6f 5f       	subi	r22, 0xFF	; 255
     f18:	7f 4f       	sbci	r23, 0xFF	; 255
     f1a:	80 ea       	ldi	r24, 0xA0	; 160
     f1c:	9b e0       	ldi	r25, 0x0B	; 11
     f1e:	0e 94 24 13 	call	0x2648	; 0x2648 <usart_init_rs232>
 * \param level Interrupt level of the RXD interrupt.
 */
static inline void usart_set_rx_interrupt_level(USART_t *usart,
		enum usart_int_level_t level)
{
	(usart)->CTRLA = ((usart)->CTRLA & ~USART_RXCINTLVL_gm) |
     f22:	e0 ea       	ldi	r30, 0xA0	; 160
     f24:	fb e0       	ldi	r31, 0x0B	; 11
     f26:	83 81       	ldd	r24, Z+3	; 0x03
     f28:	8f 7c       	andi	r24, 0xCF	; 207
     f2a:	80 61       	ori	r24, 0x10	; 16
     f2c:	83 83       	std	Z+3, r24	; 0x03
 * \param level Interrupt level of the TXD interrupt.
 */
static inline void usart_set_tx_interrupt_level(USART_t *usart,
		enum usart_int_level_t level)
{
	(usart)->CTRLA = ((usart)->CTRLA & ~USART_TXCINTLVL_gm) |
     f2e:	83 81       	ldd	r24, Z+3	; 0x03
     f30:	83 7f       	andi	r24, 0xF3	; 243
     f32:	84 60       	ori	r24, 0x04	; 4
     f34:	83 83       	std	Z+3, r24	; 0x03
	return 0;
}

static void set_stdinout(void)
{
	stdout = &mystdout;
     f36:	8e e0       	ldi	r24, 0x0E	; 14
     f38:	90 e2       	ldi	r25, 0x20	; 32
     f3a:	80 93 45 22 	sts	0x2245, r24
     f3e:	90 93 46 22 	sts	0x2246, r25
	stdin = &mystdin;
     f42:	80 e0       	ldi	r24, 0x00	; 0
     f44:	90 e2       	ldi	r25, 0x20	; 32
     f46:	80 93 43 22 	sts	0x2243, r24
     f4a:	90 93 44 22 	sts	0x2244, r25
	usart_serial_init(&SER1, &usart_serial_options);
	usart_set_rx_interrupt_level(&SER1, USART_INT_LVL_LO);
	usart_set_tx_interrupt_level(&SER1, USART_INT_LVL_LO);
	set_stdinout();

	cpu_irq_enable();
     f4e:	78 94       	sei
     f50:	80 e0       	ldi	r24, 0x00	; 0
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	01 96       	adiw	r24, 0x01	; 1
     f56:	85 35       	cpi	r24, 0x55	; 85
     f58:	f0 ed       	ldi	r31, 0xD0	; 208
     f5a:	9f 07       	cpc	r25, r31
     f5c:	d9 f7       	brne	.-10     	; 0xf54 <main+0x25a>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     f5e:	80 e1       	ldi	r24, 0x10	; 16
     f60:	e0 ea       	ldi	r30, 0xA0	; 160
     f62:	f6 e0       	ldi	r31, 0x06	; 6
     f64:	86 83       	std	Z+6, r24	; 0x06
     f66:	e0 e8       	ldi	r30, 0x80	; 128
     f68:	f6 e0       	ldi	r31, 0x06	; 6
     f6a:	80 e8       	ldi	r24, 0x80	; 128
     f6c:	86 83       	std	Z+6, r24	; 0x06
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     f6e:	80 e4       	ldi	r24, 0x40	; 64
     f70:	85 83       	std	Z+5, r24	; 0x05
	delay_ms(10);
	ioport_set_pin_level(LED0, false);
	ioport_set_pin_level(RS422RE, false); 
	ioport_set_pin_level(RS422DE, true);
	
	i_con = 0;
     f72:	10 92 b4 20 	sts	0x20B4, r1
     f76:	10 92 b5 20 	sts	0x20B5, r1
	i_i = 0;
     f7a:	10 92 9a 20 	sts	0x209A, r1
     f7e:	10 92 9b 20 	sts	0x209B, r1
     f82:	10 92 9c 20 	sts	0x209C, r1
     f86:	10 92 9d 20 	sts	0x209D, r1
	i_setpoint = 0;
     f8a:	10 92 23 20 	sts	0x2023, r1
     f8e:	10 92 24 20 	sts	0x2024, r1
	cenable = 0;
     f92:	10 92 26 22 	sts	0x2226, r1
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     f96:	0f 2e       	mov	r0, r31
     f98:	f0 ea       	ldi	r31, 0xA0	; 160
     f9a:	8f 2e       	mov	r8, r31
     f9c:	f6 e0       	ldi	r31, 0x06	; 6
     f9e:	9f 2e       	mov	r9, r31
     fa0:	f0 2d       	mov	r31, r0
{
	uint8_t i;
	int8_t crc;
	if(rx_counter_USARTF0 >= 8)
	{
		inpacket[0] = uart_getcharF0(0x00);
     fa2:	0f 2e       	mov	r0, r31
     fa4:	f6 eb       	ldi	r31, 0xB6	; 182
     fa6:	6f 2e       	mov	r6, r31
     fa8:	f0 e2       	ldi	r31, 0x20	; 32
     faa:	7f 2e       	mov	r7, r31
     fac:	f0 2d       	mov	r31, r0
     fae:	0f 2e       	mov	r0, r31
     fb0:	f7 eb       	ldi	r31, 0xB7	; 183
     fb2:	af 2e       	mov	r10, r31
     fb4:	f0 e2       	ldi	r31, 0x20	; 32
     fb6:	bf 2e       	mov	r11, r31
     fb8:	f0 2d       	mov	r31, r0
     fba:	0f 2e       	mov	r0, r31
     fbc:	fd eb       	ldi	r31, 0xBD	; 189
     fbe:	ef 2e       	mov	r14, r31
     fc0:	f0 e2       	ldi	r31, 0x20	; 32
     fc2:	ff 2e       	mov	r15, r31
     fc4:	f0 2d       	mov	r31, r0
	packett *pp;
	irqflags_t flags;
//	int16_t rawc;
	
	pp = (packett *)&outpacket[0];
	pp->sof = SOF;
     fc6:	0f 2e       	mov	r0, r31
     fc8:	f6 ec       	ldi	r31, 0xC6	; 198
     fca:	4f 2e       	mov	r4, r31
     fcc:	f0 e2       	ldi	r31, 0x20	; 32
     fce:	5f 2e       	mov	r5, r31
     fd0:	f0 2d       	mov	r31, r0
     fd2:	0f 2e       	mov	r0, r31
     fd4:	fd ec       	ldi	r31, 0xCD	; 205
     fd6:	cf 2e       	mov	r12, r31
     fd8:	f0 e2       	ldi	r31, 0x20	; 32
     fda:	df 2e       	mov	r13, r31
     fdc:	f0 2d       	mov	r31, r0
	i_setpoint = 0;
	cenable = 0;
	
	while(1)
	{	
		if (ADCvpwr < SHUTDOWNVOLTAGE)
     fde:	60 91 29 22 	lds	r22, 0x2229
     fe2:	70 91 2a 22 	lds	r23, 0x222A
     fe6:	88 27       	eor	r24, r24
     fe8:	77 fd       	sbrc	r23, 7
     fea:	80 95       	com	r24
     fec:	98 2f       	mov	r25, r24
     fee:	0e 94 02 16 	call	0x2c04	; 0x2c04 <__floatsisf>
     ff2:	20 e0       	ldi	r18, 0x00	; 0
     ff4:	30 ee       	ldi	r19, 0xE0	; 224
     ff6:	44 e4       	ldi	r20, 0x44	; 68
     ff8:	54 e4       	ldi	r21, 0x44	; 68
     ffa:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <__cmpsf2>
     ffe:	88 23       	and	r24, r24
    1000:	3c f4       	brge	.+14     	; 0x1010 <main+0x316>
    1002:	82 e0       	ldi	r24, 0x02	; 2
    1004:	f4 01       	movw	r30, r8
    1006:	86 83       	std	Z+6, r24	; 0x06
		{
			ioport_set_pin_level(DRV_EN , false);	
			drv_disable();
    1008:	b9 d9       	rcall	.-3214   	; 0x37c <drv_disable>
			undervoltage = 1;
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	80 93 b1 20 	sts	0x20B1, r24
		}
		if (ADCvpwr > STARTUPVOLTAGE)
    1010:	60 91 29 22 	lds	r22, 0x2229
    1014:	70 91 2a 22 	lds	r23, 0x222A
    1018:	88 27       	eor	r24, r24
    101a:	77 fd       	sbrc	r23, 7
    101c:	80 95       	com	r24
    101e:	98 2f       	mov	r25, r24
    1020:	0e 94 02 16 	call	0x2c04	; 0x2c04 <__floatsisf>
    1024:	20 e0       	ldi	r18, 0x00	; 0
    1026:	30 e4       	ldi	r19, 0x40	; 64
    1028:	4e e4       	ldi	r20, 0x4E	; 78
    102a:	54 e4       	ldi	r21, 0x44	; 68
    102c:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <__gesf2>
    1030:	18 16       	cp	r1, r24
    1032:	2c f4       	brge	.+10     	; 0x103e <main+0x344>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1034:	82 e0       	ldi	r24, 0x02	; 2
    1036:	f4 01       	movw	r30, r8
    1038:	85 83       	std	Z+5, r24	; 0x05
		{
			ioport_set_pin_level(DRV_EN , true);
			undervoltage = 0;
    103a:	10 92 b1 20 	sts	0x20B1, r1

static uint8_t getpacket(void)
{
	uint8_t i;
	int8_t crc;
	if(rx_counter_USARTF0 >= 8)
    103e:	80 91 20 20 	lds	r24, 0x2020
    1042:	88 30       	cpi	r24, 0x08	; 8
    1044:	60 f2       	brcs	.-104    	; 0xfde <main+0x2e4>
	{
		inpacket[0] = uart_getcharF0(0x00);
    1046:	80 e0       	ldi	r24, 0x00	; 0
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	2e d9       	rcall	.-3492   	; 0x2a8 <uart_getcharF0>
    104c:	f3 01       	movw	r30, r6
    104e:	80 83       	st	Z, r24
		if(inpacket[0] == SOF)
    1050:	8a 35       	cpi	r24, 0x5A	; 90
    1052:	29 f6       	brne	.-118    	; 0xfde <main+0x2e4>
		{
			crc = 0;
			crc = crc8(crc, inpacket[0]);
    1054:	6a e5       	ldi	r22, 0x5A	; 90
    1056:	80 e0       	ldi	r24, 0x00	; 0
    1058:	6e d9       	rcall	.-3364   	; 0x336 <crc8>
    105a:	38 2e       	mov	r3, r24
    105c:	85 01       	movw	r16, r10
			for(i = 1; i <= 6 ; i++)
			{
				inpacket[i] = uart_getcharF0(0x00);
    105e:	80 e0       	ldi	r24, 0x00	; 0
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	22 d9       	rcall	.-3516   	; 0x2a8 <uart_getcharF0>
    1064:	f8 01       	movw	r30, r16
    1066:	81 93       	st	Z+, r24
    1068:	8f 01       	movw	r16, r30
				crc = crc8(crc, inpacket[i]);
    106a:	68 2f       	mov	r22, r24
    106c:	83 2d       	mov	r24, r3
    106e:	63 d9       	rcall	.-3386   	; 0x336 <crc8>
    1070:	38 2e       	mov	r3, r24
		inpacket[0] = uart_getcharF0(0x00);
		if(inpacket[0] == SOF)
		{
			crc = 0;
			crc = crc8(crc, inpacket[0]);
			for(i = 1; i <= 6 ; i++)
    1072:	0e 15       	cp	r16, r14
    1074:	1f 05       	cpc	r17, r15
    1076:	99 f7       	brne	.-26     	; 0x105e <main+0x364>
			{
				inpacket[i] = uart_getcharF0(0x00);
				crc = crc8(crc, inpacket[i]);
			}
			inpacket[7] = uart_getcharF0(0x00);
    1078:	80 e0       	ldi	r24, 0x00	; 0
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	15 d9       	rcall	.-3542   	; 0x2a8 <uart_getcharF0>
    107e:	f7 01       	movw	r30, r14
    1080:	80 83       	st	Z, r24
			rcrc = crc;
    1082:	30 92 32 22 	sts	0x2232, r3
			
			// overrule CRC if CRC data = 0x00
			if((inpacket[7] == rcrc) ||(inpacket[7] == 0x00) )
    1086:	38 16       	cp	r3, r24
    1088:	11 f0       	breq	.+4      	; 0x108e <main+0x394>
		if (ADCvpwr > STARTUPVOLTAGE)
		{
			ioport_set_pin_level(DRV_EN , true);
			undervoltage = 0;
		}
		if(getpacket())
    108a:	81 11       	cpse	r24, r1
    108c:	a8 cf       	rjmp	.-176    	; 0xfde <main+0x2e4>
		{
			switch(inpacket[1])
    108e:	f5 01       	movw	r30, r10
    1090:	80 81       	ld	r24, Z
    1092:	8a 3a       	cpi	r24, 0xAA	; 170
    1094:	c1 f0       	breq	.+48     	; 0x10c6 <main+0x3cc>
    1096:	08 f4       	brcc	.+2      	; 0x109a <main+0x3a0>
    1098:	a2 cf       	rjmp	.-188    	; 0xfde <main+0x2e4>
    109a:	80 3b       	cpi	r24, 0xB0	; 176
    109c:	08 f0       	brcs	.+2      	; 0x10a0 <main+0x3a6>
    109e:	9f cf       	rjmp	.-194    	; 0xfde <main+0x2e4>
	uint8_t i;
	uint8_t crc;
	packett *pp;
	
	pp = (packett *)&inpacket[0];
	pp->type--;
    10a0:	81 50       	subi	r24, 0x01	; 1
    10a2:	80 83       	st	Z, r24
    10a4:	83 01       	movw	r16, r6
	crc = 0;
    10a6:	21 2c       	mov	r2, r1
	for(i = 0; i <= 6 ; i++)
	{
		crc = crc8(crc, inpacket[i]);
    10a8:	f8 01       	movw	r30, r16
    10aa:	31 90       	ld	r3, Z+
    10ac:	8f 01       	movw	r16, r30
    10ae:	63 2d       	mov	r22, r3
    10b0:	82 2d       	mov	r24, r2
    10b2:	41 d9       	rcall	.-3454   	; 0x336 <crc8>
    10b4:	28 2e       	mov	r2, r24
		uart_putcharF0(inpacket[i]);
    10b6:	83 2d       	mov	r24, r3
    10b8:	14 d9       	rcall	.-3544   	; 0x2e2 <uart_putcharF0>
	packett *pp;
	
	pp = (packett *)&inpacket[0];
	pp->type--;
	crc = 0;
	for(i = 0; i <= 6 ; i++)
    10ba:	e0 16       	cp	r14, r16
    10bc:	f1 06       	cpc	r15, r17
    10be:	a1 f7       	brne	.-24     	; 0x10a8 <main+0x3ae>
	{
		crc = crc8(crc, inpacket[i]);
		uart_putcharF0(inpacket[i]);
	}
	uart_putcharF0(crc);
    10c0:	82 2d       	mov	r24, r2
    10c2:	0f d9       	rcall	.-3554   	; 0x2e2 <uart_putcharF0>
    10c4:	8c cf       	rjmp	.-232    	; 0xfde <main+0x2e4>
	packett *pp;
	irqflags_t flags;
//	int16_t rawc;
	
	pp = (packett *)&outpacket[0];
	pp->sof = SOF;
    10c6:	8a e5       	ldi	r24, 0x5A	; 90
    10c8:	f2 01       	movw	r30, r4
    10ca:	80 83       	st	Z, r24
	pp->type = 0x55;
    10cc:	85 e5       	ldi	r24, 0x55	; 85
    10ce:	e7 ec       	ldi	r30, 0xC7	; 199
    10d0:	f0 e2       	ldi	r31, 0x20	; 32
    10d2:	80 83       	st	Z, r24
	pp->cmd = (senable & 0x01) | (overtemp << 2) | (undervoltage << 3) | (inpacket[2] & 0xf0);
    10d4:	e8 eb       	ldi	r30, 0xB8	; 184
    10d6:	f0 e2       	ldi	r31, 0x20	; 32
    10d8:	20 81       	ld	r18, Z
    10da:	20 7f       	andi	r18, 0xF0	; 240
    10dc:	80 91 8f 20 	lds	r24, 0x208F
    10e0:	81 70       	andi	r24, 0x01	; 1
    10e2:	28 2b       	or	r18, r24
    10e4:	90 91 cd 20 	lds	r25, 0x20CD
    10e8:	99 0f       	add	r25, r25
    10ea:	99 0f       	add	r25, r25
    10ec:	92 2b       	or	r25, r18
    10ee:	80 91 b1 20 	lds	r24, 0x20B1
    10f2:	88 0f       	add	r24, r24
    10f4:	88 0f       	add	r24, r24
    10f6:	88 0f       	add	r24, r24
    10f8:	89 2b       	or	r24, r25
    10fa:	e8 ec       	ldi	r30, 0xC8	; 200
    10fc:	f0 e2       	ldi	r31, 0x20	; 32
    10fe:	80 83       	st	Z, r24
	if (cenable > 1)
    1100:	80 91 26 22 	lds	r24, 0x2226
    1104:	82 30       	cpi	r24, 0x02	; 2
    1106:	60 f0       	brcs	.+24     	; 0x1120 <main+0x426>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1108:	2f b7       	in	r18, 0x3f	; 63
	cpu_irq_disable();
    110a:	f8 94       	cli
	{
		flags = cpu_irq_save();
		pp->data1 = (uint16_t)ADCntc2;
    110c:	80 91 a0 20 	lds	r24, 0x20A0
    1110:	90 91 a1 20 	lds	r25, 0x20A1
    1114:	e9 ec       	ldi	r30, 0xC9	; 201
    1116:	f0 e2       	ldi	r31, 0x20	; 32
    1118:	80 83       	st	Z, r24
    111a:	91 83       	std	Z+1, r25	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    111c:	2f bf       	out	0x3f, r18	; 63
    111e:	0b c0       	rjmp	.+22     	; 0x1136 <main+0x43c>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1120:	2f b7       	in	r18, 0x3f	; 63
	cpu_irq_disable();
    1122:	f8 94       	cli
		cpu_irq_restore(flags);
	}
	else
	{
		flags = cpu_irq_save();
		pp->data1 = (uint16_t)iMeasuredVelocity;
    1124:	80 91 35 22 	lds	r24, 0x2235
    1128:	90 91 36 22 	lds	r25, 0x2236
    112c:	e9 ec       	ldi	r30, 0xC9	; 201
    112e:	f0 e2       	ldi	r31, 0x20	; 32
    1130:	80 83       	st	Z, r24
    1132:	91 83       	std	Z+1, r25	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1134:	2f bf       	out	0x3f, r18	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1136:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    1138:	f8 94       	cli
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    113a:	8f bf       	out	0x3f, r24	; 63
	}
	
	flags = cpu_irq_save();
	cpu_irq_restore(flags);
	
	pp->data2 = setpoint;
    113c:	80 91 94 20 	lds	r24, 0x2094
    1140:	90 91 95 20 	lds	r25, 0x2095
    1144:	eb ec       	ldi	r30, 0xCB	; 203
    1146:	f0 e2       	ldi	r31, 0x20	; 32
    1148:	80 83       	st	Z, r24
    114a:	91 83       	std	Z+1, r25	; 0x01
    114c:	82 01       	movw	r16, r4
	
	crc = 0;
    114e:	21 2c       	mov	r2, r1
	for(i = 0; i <= 6 ; i++)
	{
		crc = crc8(crc, outpacket[i]);
    1150:	f8 01       	movw	r30, r16
    1152:	31 90       	ld	r3, Z+
    1154:	8f 01       	movw	r16, r30
    1156:	63 2d       	mov	r22, r3
    1158:	82 2d       	mov	r24, r2
    115a:	ed d8       	rcall	.-3622   	; 0x336 <crc8>
    115c:	28 2e       	mov	r2, r24
		uart_putcharF0(outpacket[i]);
    115e:	83 2d       	mov	r24, r3
    1160:	c0 d8       	rcall	.-3712   	; 0x2e2 <uart_putcharF0>
	cpu_irq_restore(flags);
	
	pp->data2 = setpoint;
	
	crc = 0;
	for(i = 0; i <= 6 ; i++)
    1162:	0c 15       	cp	r16, r12
    1164:	1d 05       	cpc	r17, r13
    1166:	a1 f7       	brne	.-24     	; 0x1150 <main+0x456>
	{
		crc = crc8(crc, outpacket[i]);
		uart_putcharF0(outpacket[i]);
	}
	uart_putcharF0(crc);
    1168:	82 2d       	mov	r24, r2
    116a:	bb d8       	rcall	.-3722   	; 0x2e2 <uart_putcharF0>
static void getsetpoints(void)
{
	packett *pp;
	
	// reset watchdog counter
	wdcnt = 0;
    116c:	10 92 7f 20 	sts	0x207F, r1
	
	pp = (packett *)&inpacket[0];
	if((pp->cmd & bmENABLE) && ((pp->cmd & bmMODEC) == bmMODEC) && !overtemp)
    1170:	e8 eb       	ldi	r30, 0xB8	; 184
    1172:	f0 e2       	ldi	r31, 0x20	; 32
    1174:	80 81       	ld	r24, Z
    1176:	98 2f       	mov	r25, r24
    1178:	93 70       	andi	r25, 0x03	; 3
    117a:	93 30       	cpi	r25, 0x03	; 3
    117c:	21 f5       	brne	.+72     	; 0x11c6 <main+0x4cc>
    117e:	90 91 cd 20 	lds	r25, 0x20CD
    1182:	91 11       	cpse	r25, r1
    1184:	20 c0       	rjmp	.+64     	; 0x11c6 <main+0x4cc>
	{
		cenable = 1;
		if ((pp->cmd & bmMODEV) == bmMODEV) cenable++;
    1186:	82 fd       	sbrc	r24, 2
    1188:	04 c0       	rjmp	.+8      	; 0x1192 <main+0x498>
	wdcnt = 0;
	
	pp = (packett *)&inpacket[0];
	if((pp->cmd & bmENABLE) && ((pp->cmd & bmMODEC) == bmMODEC) && !overtemp)
	{
		cenable = 1;
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	80 93 26 22 	sts	0x2226, r24
    1190:	03 c0       	rjmp	.+6      	; 0x1198 <main+0x49e>
		if ((pp->cmd & bmMODEV) == bmMODEV) cenable++;
    1192:	82 e0       	ldi	r24, 0x02	; 2
    1194:	80 93 26 22 	sts	0x2226, r24
		setpoint = (int16_t)pp->data1;
    1198:	e9 eb       	ldi	r30, 0xB9	; 185
    119a:	f0 e2       	ldi	r31, 0x20	; 32
    119c:	80 81       	ld	r24, Z
    119e:	91 81       	ldd	r25, Z+1	; 0x01
    11a0:	80 93 94 20 	sts	0x2094, r24
    11a4:	90 93 95 20 	sts	0x2095, r25
		//control factors will be read. It's not used already
		iKi = (int16_t)pp->data2 & 0xFF;
    11a8:	eb eb       	ldi	r30, 0xBB	; 187
    11aa:	f0 e2       	ldi	r31, 0x20	; 32
    11ac:	80 81       	ld	r24, Z
    11ae:	91 81       	ldd	r25, Z+1	; 0x01
    11b0:	9c 01       	movw	r18, r24
    11b2:	33 27       	eor	r19, r19
    11b4:	20 93 ad 20 	sts	0x20AD, r18
    11b8:	30 93 ae 20 	sts	0x20AE, r19
		iKp = ((int16_t)pp->data2 >> 8) & 0xFF;
    11bc:	90 93 a8 20 	sts	0x20A8, r25
    11c0:	10 92 a9 20 	sts	0x20A9, r1
    11c4:	0c cf       	rjmp	.-488    	; 0xfde <main+0x2e4>
	}
	else
	{
		cenable = 0;
    11c6:	10 92 26 22 	sts	0x2226, r1
    11ca:	09 cf       	rjmp	.-494    	; 0xfde <main+0x2e4>

000011cc <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    11cc:	8f ef       	ldi	r24, 0xFF	; 255
    11ce:	80 93 70 00 	sts	0x0070, r24
    11d2:	80 93 71 00 	sts	0x0071, r24
    11d6:	80 93 72 00 	sts	0x0072, r24
    11da:	80 93 73 00 	sts	0x0073, r24
    11de:	80 93 74 00 	sts	0x0074, r24
    11e2:	80 93 75 00 	sts	0x0075, r24
    11e6:	80 93 76 00 	sts	0x0076, r24
 * \param psbcdiv The prescaler B and C settings (one of the \c SYSCLK_PSBCDIV_*
 * definitions). These determine the clkPER2, clkPER and clkCPU frequencies.
 */
static inline void sysclk_set_prescalers(uint8_t psadiv, uint8_t psbcdiv)
{
	ccp_write_io((uint8_t *)&CLK.PSCTRL, psadiv | psbcdiv);
    11ea:	63 e0       	ldi	r22, 0x03	; 3
    11ec:	81 e4       	ldi	r24, 0x41	; 65
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	c1 d1       	rcall	.+898    	; 0x1574 <ccp_write_io>

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
    11f2:	e0 e5       	ldi	r30, 0x50	; 80
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	81 81       	ldd	r24, Z+1	; 0x01

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
    11f8:	84 fd       	sbrc	r24, 4
    11fa:	1b c0       	rjmp	.+54     	; 0x1232 <sysclk_init+0x66>

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    11fc:	81 81       	ldd	r24, Z+1	; 0x01
			osc_wait_ready(OSC_ID_RC32MHZ);
		}
		break;

	case PLL_SRC_XOSC:
		if (!osc_is_ready(OSC_ID_XOSC)) {
    11fe:	83 fd       	sbrc	r24, 3
    1200:	0b c0       	rjmp	.+22     	; 0x1218 <sysclk_init+0x4c>

#ifndef CONFIG_XOSC_32KHZ_LPM
#  if (XMEGA_E && (BOARD_XOSC_TYPE == XOSC_TYPE_EXTERNAL) && defined(CONFIG_XOSC_EXTERNAL_PC4))
	OSC.XOSCCTRL = OSC_XOSCSEL4_bm;
#  else 
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
    1202:	8b ec       	ldi	r24, 0xCB	; 203
    1204:	82 83       	std	Z+2, r24	; 0x02

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1206:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    1208:	f8 94       	cli
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
			CONFIG_XOSC_RANGE | OSC_X32KLPM_bm;
#endif /* CONFIG_XOSC_32KHZ_LPM */

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    120a:	90 81       	ld	r25, Z
    120c:	98 60       	ori	r25, 0x08	; 8
    120e:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1210:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    1212:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    1214:	83 ff       	sbrs	r24, 3
    1216:	fd cf       	rjmp	.-6      	; 0x1212 <sysclk_init+0x46>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1218:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    121a:	f8 94       	cli
static inline void pll_config_write(const struct pll_config *cfg,
		unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	OSC.PLLCTRL = cfg->ctrl;
    121c:	e0 e5       	ldi	r30, 0x50	; 80
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	98 ec       	ldi	r25, 0xC8	; 200
    1222:	95 83       	std	Z+5, r25	; 0x05

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
	pll_config_write(cfg, pll_id);
	OSC.CTRL |= OSC_PLLEN_bm;
    1224:	90 81       	ld	r25, Z
    1226:	90 61       	ori	r25, 0x10	; 16
    1228:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    122a:	8f bf       	out	0x3f, r24	; 63

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
    122c:	81 81       	ldd	r24, Z+1	; 0x01
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
    122e:	84 ff       	sbrs	r24, 4
    1230:	fd cf       	rjmp	.-6      	; 0x122c <sysclk_init+0x60>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    1232:	64 e0       	ldi	r22, 0x04	; 4
    1234:	80 e4       	ldi	r24, 0x40	; 64
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	9d d1       	rcall	.+826    	; 0x1574 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    123a:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    123c:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    123e:	e0 e5       	ldi	r30, 0x50	; 80
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	90 81       	ld	r25, Z
    1244:	9e 7f       	andi	r25, 0xFE	; 254
    1246:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1248:	8f bf       	out	0x3f, r24	; 63
    124a:	08 95       	ret

0000124c <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    124c:	2f b7       	in	r18, 0x3f	; 63
	cpu_irq_disable();
    124e:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    1250:	fc 01       	movw	r30, r24
    1252:	e0 59       	subi	r30, 0x90	; 144
    1254:	ff 4f       	sbci	r31, 0xFF	; 255
    1256:	60 95       	com	r22
    1258:	80 81       	ld	r24, Z
    125a:	68 23       	and	r22, r24
    125c:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    125e:	2f bf       	out	0x3f, r18	; 63
    1260:	08 95       	ret

00001262 <sysclk_disable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1262:	2f b7       	in	r18, 0x3f	; 63
	cpu_irq_disable();
    1264:	f8 94       	cli

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    1266:	fc 01       	movw	r30, r24
    1268:	e0 59       	subi	r30, 0x90	; 144
    126a:	ff 4f       	sbci	r31, 0xFF	; 255
    126c:	80 81       	ld	r24, Z
    126e:	68 2b       	or	r22, r24
    1270:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1272:	2f bf       	out	0x3f, r18	; 63
    1274:	08 95       	ret

00001276 <spi_master_init>:
 *
 * \param spi       Base address of the SPI instance.
 *
 */
void spi_master_init(SPI_t *spi)
{
    1276:	cf 93       	push	r28
    1278:	df 93       	push	r29
    127a:	ec 01       	movw	r28, r24
	if ((uint16_t)spi == (uint16_t)&SPIB) {
		sysclk_enable_module(SYSCLK_PORT_B, PR_SPI_bm);
	}
#endif
#ifdef SPIC
	if ((uint16_t)spi == (uint16_t)&SPIC) {
    127c:	c0 3c       	cpi	r28, 0xC0	; 192
    127e:	28 e0       	ldi	r18, 0x08	; 8
    1280:	d2 07       	cpc	r29, r18
    1282:	29 f4       	brne	.+10     	; 0x128e <spi_master_init+0x18>
		sysclk_enable_module(SYSCLK_PORT_C, PR_SPI_bm);
    1284:	68 e0       	ldi	r22, 0x08	; 8
    1286:	83 e0       	ldi	r24, 0x03	; 3
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	e0 df       	rcall	.-64     	; 0x124c <sysclk_enable_module>
    128c:	10 c0       	rjmp	.+32     	; 0x12ae <spi_master_init+0x38>
	}
#endif
#ifdef SPID
	if ((uint16_t)spi == (uint16_t)&SPID) {
    128e:	80 3c       	cpi	r24, 0xC0	; 192
    1290:	29 e0       	ldi	r18, 0x09	; 9
    1292:	92 07       	cpc	r25, r18
    1294:	29 f4       	brne	.+10     	; 0x12a0 <spi_master_init+0x2a>
		sysclk_enable_module(SYSCLK_PORT_D, PR_SPI_bm);
    1296:	68 e0       	ldi	r22, 0x08	; 8
    1298:	84 e0       	ldi	r24, 0x04	; 4
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	d7 df       	rcall	.-82     	; 0x124c <sysclk_enable_module>
    129e:	07 c0       	rjmp	.+14     	; 0x12ae <spi_master_init+0x38>
	}
#endif
#ifdef SPIE
	if ((uint16_t)spi == (uint16_t)&SPIE) {
    12a0:	80 3c       	cpi	r24, 0xC0	; 192
    12a2:	9a 40       	sbci	r25, 0x0A	; 10
    12a4:	21 f4       	brne	.+8      	; 0x12ae <spi_master_init+0x38>
		sysclk_enable_module(SYSCLK_PORT_E, PR_SPI_bm);
    12a6:	68 e0       	ldi	r22, 0x08	; 8
    12a8:	85 e0       	ldi	r24, 0x05	; 5
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	cf df       	rcall	.-98     	; 0x124c <sysclk_enable_module>
 *
 * \warning This may cause data loss if used on a slave SPI.
 */
static inline void spi_enable_master_mode(SPI_t *spi)
{
	spi->CTRL |= SPI_MASTER_bm;
    12ae:	88 81       	ld	r24, Y
    12b0:	80 61       	ori	r24, 0x10	; 16
    12b2:	88 83       	st	Y, r24
	if ((uint16_t)spi == (uint16_t)&SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, PR_SPI_bm);
	}
#endif
	spi_enable_master_mode(spi);
}
    12b4:	df 91       	pop	r29
    12b6:	cf 91       	pop	r28
    12b8:	08 95       	ret

000012ba <spi_master_setup_device>:
 * \param sel_id    Board specific select id
 */
void spi_master_setup_device(SPI_t *spi, struct spi_device *device,
		spi_flags_t flags, uint32_t baud_rate,
		board_spi_select_id_t sel_id)
{
    12ba:	ff 92       	push	r15
    12bc:	0f 93       	push	r16
    12be:	1f 93       	push	r17
    12c0:	cf 93       	push	r28
    12c2:	df 93       	push	r29
    12c4:	ec 01       	movw	r28, r24
    12c6:	f4 2e       	mov	r15, r20
    12c8:	b9 01       	movw	r22, r18
    12ca:	a8 01       	movw	r20, r16
	if (spi_xmega_set_baud_div(spi, baud_rate, sysclk_get_cpu_hz()) < 0) {
    12cc:	00 e0       	ldi	r16, 0x00	; 0
    12ce:	18 e4       	ldi	r17, 0x48	; 72
    12d0:	28 ee       	ldi	r18, 0xE8	; 232
    12d2:	31 e0       	ldi	r19, 0x01	; 1
    12d4:	5f d1       	rcall	.+702    	; 0x1594 <spi_xmega_set_baud_div>
    12d6:	88 23       	and	r24, r24
    12d8:	4c f0       	brlt	.+18     	; 0x12ec <spi_master_setup_device+0x32>
		Assert(false);
		return;
	}

	/* Clear any set SPI mode flags and set them to the user-specified mode */
	spi->CTRL = (spi->CTRL & ~SPI_MODE_gm) |
    12da:	88 81       	ld	r24, Y
			((flags << SPI_MODE_gp) & SPI_MODE_gm);
    12dc:	9f 2d       	mov	r25, r15
    12de:	99 0f       	add	r25, r25
    12e0:	99 0f       	add	r25, r25
		Assert(false);
		return;
	}

	/* Clear any set SPI mode flags and set them to the user-specified mode */
	spi->CTRL = (spi->CTRL & ~SPI_MODE_gm) |
    12e2:	9c 70       	andi	r25, 0x0C	; 12
    12e4:	83 7f       	andi	r24, 0xF3	; 243
    12e6:	f9 2e       	mov	r15, r25
    12e8:	f8 2a       	or	r15, r24
    12ea:	f8 82       	st	Y, r15
			((flags << SPI_MODE_gp) & SPI_MODE_gm);
}
    12ec:	df 91       	pop	r29
    12ee:	cf 91       	pop	r28
    12f0:	1f 91       	pop	r17
    12f2:	0f 91       	pop	r16
    12f4:	ff 90       	pop	r15
    12f6:	08 95       	ret

000012f8 <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    12f8:	81 15       	cp	r24, r1
    12fa:	22 e0       	ldi	r18, 0x02	; 2
    12fc:	92 07       	cpc	r25, r18
    12fe:	69 f4       	brne	.+26     	; 0x131a <adc_enable_clock+0x22>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
    1300:	80 91 26 20 	lds	r24, 0x2026
    1304:	91 e0       	ldi	r25, 0x01	; 1
    1306:	98 0f       	add	r25, r24
    1308:	90 93 26 20 	sts	0x2026, r25
    130c:	81 11       	cpse	r24, r1
    130e:	14 c0       	rjmp	.+40     	; 0x1338 <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    1310:	62 e0       	ldi	r22, 0x02	; 2
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	9a cf       	rjmp	.-204    	; 0x124c <sysclk_enable_module>
    1318:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
    131a:	80 34       	cpi	r24, 0x40	; 64
    131c:	92 40       	sbci	r25, 0x02	; 2
    131e:	61 f4       	brne	.+24     	; 0x1338 <adc_enable_clock+0x40>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
    1320:	80 91 25 20 	lds	r24, 0x2025
    1324:	91 e0       	ldi	r25, 0x01	; 1
    1326:	98 0f       	add	r25, r24
    1328:	90 93 25 20 	sts	0x2025, r25
    132c:	81 11       	cpse	r24, r1
    132e:	04 c0       	rjmp	.+8      	; 0x1338 <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    1330:	62 e0       	ldi	r22, 0x02	; 2
    1332:	82 e0       	ldi	r24, 0x02	; 2
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	8a cf       	rjmp	.-236    	; 0x124c <sysclk_enable_module>
    1338:	08 95       	ret

0000133a <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    133a:	81 15       	cp	r24, r1
    133c:	22 e0       	ldi	r18, 0x02	; 2
    133e:	92 07       	cpc	r25, r18
    1340:	61 f4       	brne	.+24     	; 0x135a <adc_disable_clock+0x20>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
    1342:	80 91 26 20 	lds	r24, 0x2026
    1346:	81 50       	subi	r24, 0x01	; 1
    1348:	80 93 26 20 	sts	0x2026, r24
    134c:	81 11       	cpse	r24, r1
    134e:	13 c0       	rjmp	.+38     	; 0x1376 <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    1350:	62 e0       	ldi	r22, 0x02	; 2
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	85 cf       	rjmp	.-246    	; 0x1262 <sysclk_disable_module>
    1358:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
    135a:	80 34       	cpi	r24, 0x40	; 64
    135c:	92 40       	sbci	r25, 0x02	; 2
    135e:	59 f4       	brne	.+22     	; 0x1376 <adc_disable_clock+0x3c>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
    1360:	80 91 25 20 	lds	r24, 0x2025
    1364:	81 50       	subi	r24, 0x01	; 1
    1366:	80 93 25 20 	sts	0x2025, r24
    136a:	81 11       	cpse	r24, r1
    136c:	04 c0       	rjmp	.+8      	; 0x1376 <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    136e:	62 e0       	ldi	r22, 0x02	; 2
    1370:	82 e0       	ldi	r24, 0x02	; 2
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	76 cf       	rjmp	.-276    	; 0x1262 <sysclk_disable_module>
    1376:	08 95       	ret

00001378 <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
    1378:	1f 93       	push	r17
    137a:	cf 93       	push	r28
    137c:	df 93       	push	r29
    137e:	ec 01       	movw	r28, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1380:	1f b7       	in	r17, 0x3f	; 63
	cpu_irq_disable();
    1382:	f8 94       	cli
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
    1384:	b9 df       	rcall	.-142    	; 0x12f8 <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
    1386:	88 81       	ld	r24, Y
    1388:	81 60       	ori	r24, 0x01	; 1
    138a:	88 83       	st	Y, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    138c:	1f bf       	out	0x3f, r17	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    138e:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    1390:	f8 94       	cli
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    1392:	ee e3       	ldi	r30, 0x3E	; 62
    1394:	f2 e2       	ldi	r31, 0x22	; 34
    1396:	90 81       	ld	r25, Z
    1398:	9f 5f       	subi	r25, 0xFF	; 255
    139a:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    139c:	8f bf       	out	0x3f, r24	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
    139e:	df 91       	pop	r29
    13a0:	cf 91       	pop	r28
    13a2:	1f 91       	pop	r17
    13a4:	08 95       	ret

000013a6 <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
    13a6:	df 92       	push	r13
    13a8:	ef 92       	push	r14
    13aa:	ff 92       	push	r15
    13ac:	0f 93       	push	r16
    13ae:	1f 93       	push	r17
    13b0:	cf 93       	push	r28
    13b2:	df 93       	push	r29
    13b4:	ec 01       	movw	r28, r24
    13b6:	8b 01       	movw	r16, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    13b8:	c1 15       	cp	r28, r1
    13ba:	22 e0       	ldi	r18, 0x02	; 2
    13bc:	d2 07       	cpc	r29, r18
    13be:	71 f4       	brne	.+28     	; 0x13dc <adc_write_configuration+0x36>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    13c0:	61 e2       	ldi	r22, 0x21	; 33
    13c2:	70 e0       	ldi	r23, 0x00	; 0
    13c4:	82 e0       	ldi	r24, 0x02	; 2
    13c6:	dc d0       	rcall	.+440    	; 0x1580 <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    13c8:	e8 2e       	mov	r14, r24
    13ca:	f1 2c       	mov	r15, r1
    13cc:	60 e2       	ldi	r22, 0x20	; 32
    13ce:	70 e0       	ldi	r23, 0x00	; 0
    13d0:	82 e0       	ldi	r24, 0x02	; 2
    13d2:	d6 d0       	rcall	.+428    	; 0x1580 <nvm_read_byte>
		data <<= 8;
    13d4:	fe 2c       	mov	r15, r14
    13d6:	ee 24       	eor	r14, r14
		data |= nvm_read_production_signature_row(ADCACAL0);
    13d8:	e8 2a       	or	r14, r24
    13da:	10 c0       	rjmp	.+32     	; 0x13fc <adc_write_configuration+0x56>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    13dc:	80 34       	cpi	r24, 0x40	; 64
    13de:	92 40       	sbci	r25, 0x02	; 2
    13e0:	59 f5       	brne	.+86     	; 0x1438 <adc_write_configuration+0x92>
    13e2:	65 e2       	ldi	r22, 0x25	; 37
    13e4:	70 e0       	ldi	r23, 0x00	; 0
    13e6:	82 e0       	ldi	r24, 0x02	; 2
    13e8:	cb d0       	rcall	.+406    	; 0x1580 <nvm_read_byte>
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
    13ea:	e8 2e       	mov	r14, r24
    13ec:	f1 2c       	mov	r15, r1
    13ee:	64 e2       	ldi	r22, 0x24	; 36
    13f0:	70 e0       	ldi	r23, 0x00	; 0
    13f2:	82 e0       	ldi	r24, 0x02	; 2
    13f4:	c5 d0       	rcall	.+394    	; 0x1580 <nvm_read_byte>
		data <<= 8;
    13f6:	fe 2c       	mov	r15, r14
    13f8:	ee 24       	eor	r14, r14
		data |= nvm_read_production_signature_row(ADCBCAL0);
    13fa:	e8 2a       	or	r14, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    13fc:	df b6       	in	r13, 0x3f	; 63
	cpu_irq_disable();
    13fe:	f8 94       	cli
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
    1400:	ce 01       	movw	r24, r28
    1402:	7a df       	rcall	.-268    	; 0x12f8 <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
    1404:	28 81       	ld	r18, Y

	adc->CTRLA = ADC_FLUSH_bm;
    1406:	82 e0       	ldi	r24, 0x02	; 2
    1408:	88 83       	st	Y, r24
	adc->CAL = cal;
    140a:	ec 86       	std	Y+12, r14	; 0x0c
    140c:	fd 86       	std	Y+13, r15	; 0x0d
	adc->CMP = conf->cmp;
    140e:	f8 01       	movw	r30, r16
    1410:	85 81       	ldd	r24, Z+5	; 0x05
    1412:	96 81       	ldd	r25, Z+6	; 0x06
    1414:	88 8f       	std	Y+24, r24	; 0x18
    1416:	99 8f       	std	Y+25, r25	; 0x19
	adc->REFCTRL = conf->refctrl;
    1418:	82 81       	ldd	r24, Z+2	; 0x02
    141a:	8a 83       	std	Y+2, r24	; 0x02
	adc->PRESCALER = conf->prescaler;
    141c:	84 81       	ldd	r24, Z+4	; 0x04
    141e:	8c 83       	std	Y+4, r24	; 0x04
	adc->EVCTRL = conf->evctrl;
    1420:	83 81       	ldd	r24, Z+3	; 0x03
    1422:	8b 83       	std	Y+3, r24	; 0x03
	adc->CTRLB = conf->ctrlb;
    1424:	81 81       	ldd	r24, Z+1	; 0x01
    1426:	89 83       	std	Y+1, r24	; 0x01
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
	enable = adc->CTRLA & ADC_ENABLE_bm;
    1428:	82 2f       	mov	r24, r18
    142a:	81 70       	andi	r24, 0x01	; 1
	adc->REFCTRL = conf->refctrl;
	adc->PRESCALER = conf->prescaler;
	adc->EVCTRL = conf->evctrl;
	adc->CTRLB = conf->ctrlb;

	adc->CTRLA = enable | conf->ctrla;
    142c:	90 81       	ld	r25, Z
    142e:	89 2b       	or	r24, r25
    1430:	88 83       	st	Y, r24

	adc_disable_clock(adc);
    1432:	ce 01       	movw	r24, r28
    1434:	82 df       	rcall	.-252    	; 0x133a <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1436:	df be       	out	0x3f, r13	; 63

	cpu_irq_restore(flags);
}
    1438:	df 91       	pop	r29
    143a:	cf 91       	pop	r28
    143c:	1f 91       	pop	r17
    143e:	0f 91       	pop	r16
    1440:	ff 90       	pop	r15
    1442:	ef 90       	pop	r14
    1444:	df 90       	pop	r13
    1446:	08 95       	ret

00001448 <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
    1448:	ff 92       	push	r15
    144a:	0f 93       	push	r16
    144c:	1f 93       	push	r17
    144e:	cf 93       	push	r28
    1450:	df 93       	push	r29
    1452:	ec 01       	movw	r28, r24
    1454:	8b 01       	movw	r16, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1456:	ff b6       	in	r15, 0x3f	; 63
	cpu_irq_disable();
    1458:	f8 94       	cli
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
    145a:	4e df       	rcall	.-356    	; 0x12f8 <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
    145c:	88 81       	ld	r24, Y
    145e:	80 7c       	andi	r24, 0xC0	; 192
    1460:	f8 01       	movw	r30, r16
    1462:	80 83       	st	Z, r24

	conf->cmp = adc->CMP;
    1464:	88 8d       	ldd	r24, Y+24	; 0x18
    1466:	99 8d       	ldd	r25, Y+25	; 0x19
    1468:	85 83       	std	Z+5, r24	; 0x05
    146a:	96 83       	std	Z+6, r25	; 0x06
	conf->refctrl = adc->REFCTRL;
    146c:	8a 81       	ldd	r24, Y+2	; 0x02
    146e:	82 83       	std	Z+2, r24	; 0x02
	conf->prescaler = adc->PRESCALER;
    1470:	8c 81       	ldd	r24, Y+4	; 0x04
    1472:	84 83       	std	Z+4, r24	; 0x04
	conf->evctrl = adc->EVCTRL;
    1474:	8b 81       	ldd	r24, Y+3	; 0x03
    1476:	83 83       	std	Z+3, r24	; 0x03
	conf->ctrlb = adc->CTRLB;
    1478:	89 81       	ldd	r24, Y+1	; 0x01
    147a:	81 83       	std	Z+1, r24	; 0x01

	adc_disable_clock(adc);
    147c:	ce 01       	movw	r24, r28
    147e:	5d df       	rcall	.-326    	; 0x133a <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1480:	ff be       	out	0x3f, r15	; 63

	cpu_irq_restore(flags);
}
    1482:	df 91       	pop	r29
    1484:	cf 91       	pop	r28
    1486:	1f 91       	pop	r17
    1488:	0f 91       	pop	r16
    148a:	ff 90       	pop	r15
    148c:	08 95       	ret

0000148e <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
    148e:	cf 92       	push	r12
    1490:	df 92       	push	r13
    1492:	ef 92       	push	r14
    1494:	ff 92       	push	r15
    1496:	0f 93       	push	r16
    1498:	1f 93       	push	r17
    149a:	cf 93       	push	r28
    149c:	df 93       	push	r29
    149e:	7c 01       	movw	r14, r24
    14a0:	d6 2e       	mov	r13, r22
    14a2:	8a 01       	movw	r16, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    14a4:	86 2f       	mov	r24, r22
    14a6:	83 70       	andi	r24, 0x03	; 3
    14a8:	29 f4       	brne	.+10     	; 0x14b4 <adcch_write_configuration+0x26>
		index += 2;
		ch_mask >>= 2;
    14aa:	96 2f       	mov	r25, r22
    14ac:	96 95       	lsr	r25
    14ae:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    14b0:	82 e0       	ldi	r24, 0x02	; 2
    14b2:	02 c0       	rjmp	.+4      	; 0x14b8 <adcch_write_configuration+0x2a>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    14b4:	96 2f       	mov	r25, r22
 */
__always_inline ADC_CH_tmpfix_t *adc_get_channel(ADC_t *adc, uint8_t ch_mask);

__always_inline ADC_CH_tmpfix_t *adc_get_channel(ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    14b6:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    14b8:	90 ff       	sbrs	r25, 0
		index++;
    14ba:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_tmpfix_t *)(&adc->CH0 + index);
    14bc:	e7 01       	movw	r28, r14
    14be:	a0 96       	adiw	r28, 0x20	; 32
    14c0:	98 e0       	ldi	r25, 0x08	; 8
    14c2:	89 9f       	mul	r24, r25
    14c4:	c0 0d       	add	r28, r0
    14c6:	d1 1d       	adc	r29, r1
    14c8:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    14ca:	cf b6       	in	r12, 0x3f	; 63
	cpu_irq_disable();
    14cc:	f8 94       	cli
			return;
		}
	}
#endif

	adc_enable_clock(adc);
    14ce:	c7 01       	movw	r24, r14
    14d0:	13 df       	rcall	.-474    	; 0x12f8 <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
    14d2:	f8 01       	movw	r30, r16
    14d4:	80 81       	ld	r24, Z
    14d6:	88 83       	st	Y, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
    14d8:	82 81       	ldd	r24, Z+2	; 0x02
    14da:	8a 83       	std	Y+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
    14dc:	81 81       	ldd	r24, Z+1	; 0x01
    14de:	89 83       	std	Y+1, r24	; 0x01
#if CONFIG_ADC_VERSION == 2
	if (ch_mask & ADC_CH0) {
    14e0:	d0 fe       	sbrs	r13, 0
    14e2:	02 c0       	rjmp	.+4      	; 0x14e8 <adcch_write_configuration+0x5a>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
    14e4:	83 81       	ldd	r24, Z+3	; 0x03
    14e6:	8e 83       	std	Y+6, r24	; 0x06
	}
#endif
	adc_disable_clock(adc);
    14e8:	c7 01       	movw	r24, r14
    14ea:	27 df       	rcall	.-434    	; 0x133a <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    14ec:	cf be       	out	0x3f, r12	; 63

	cpu_irq_restore(flags);
}
    14ee:	df 91       	pop	r29
    14f0:	cf 91       	pop	r28
    14f2:	1f 91       	pop	r17
    14f4:	0f 91       	pop	r16
    14f6:	ff 90       	pop	r15
    14f8:	ef 90       	pop	r14
    14fa:	df 90       	pop	r13
    14fc:	cf 90       	pop	r12
    14fe:	08 95       	ret

00001500 <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
    1500:	cf 92       	push	r12
    1502:	df 92       	push	r13
    1504:	ef 92       	push	r14
    1506:	ff 92       	push	r15
    1508:	0f 93       	push	r16
    150a:	1f 93       	push	r17
    150c:	cf 93       	push	r28
    150e:	df 93       	push	r29
    1510:	7c 01       	movw	r14, r24
    1512:	d6 2e       	mov	r13, r22
    1514:	ea 01       	movw	r28, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1516:	86 2f       	mov	r24, r22
    1518:	83 70       	andi	r24, 0x03	; 3
    151a:	29 f4       	brne	.+10     	; 0x1526 <adcch_read_configuration+0x26>
		index += 2;
		ch_mask >>= 2;
    151c:	96 2f       	mov	r25, r22
    151e:	96 95       	lsr	r25
    1520:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    1522:	82 e0       	ldi	r24, 0x02	; 2
    1524:	02 c0       	rjmp	.+4      	; 0x152a <adcch_read_configuration+0x2a>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1526:	96 2f       	mov	r25, r22
 */
__always_inline ADC_CH_tmpfix_t *adc_get_channel(ADC_t *adc, uint8_t ch_mask);

__always_inline ADC_CH_tmpfix_t *adc_get_channel(ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    1528:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    152a:	90 ff       	sbrs	r25, 0
		index++;
    152c:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_tmpfix_t *)(&adc->CH0 + index);
    152e:	87 01       	movw	r16, r14
    1530:	00 5e       	subi	r16, 0xE0	; 224
    1532:	1f 4f       	sbci	r17, 0xFF	; 255
    1534:	98 e0       	ldi	r25, 0x08	; 8
    1536:	89 9f       	mul	r24, r25
    1538:	00 0d       	add	r16, r0
    153a:	11 1d       	adc	r17, r1
    153c:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    153e:	cf b6       	in	r12, 0x3f	; 63
	cpu_irq_disable();
    1540:	f8 94       	cli

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
    1542:	c7 01       	movw	r24, r14
    1544:	d9 de       	rcall	.-590    	; 0x12f8 <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
    1546:	f8 01       	movw	r30, r16
    1548:	80 81       	ld	r24, Z
    154a:	88 83       	st	Y, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
    154c:	82 81       	ldd	r24, Z+2	; 0x02
    154e:	8a 83       	std	Y+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
    1550:	81 81       	ldd	r24, Z+1	; 0x01
    1552:	89 83       	std	Y+1, r24	; 0x01
#if CONFIG_ADC_VERSION == 2
	if (ch_mask & ADC_CH0) {
    1554:	d0 fe       	sbrs	r13, 0
    1556:	02 c0       	rjmp	.+4      	; 0x155c <adcch_read_configuration+0x5c>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
    1558:	86 81       	ldd	r24, Z+6	; 0x06
    155a:	8b 83       	std	Y+3, r24	; 0x03
	}
#endif
	adc_disable_clock(adc);
    155c:	c7 01       	movw	r24, r14
    155e:	ed de       	rcall	.-550    	; 0x133a <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1560:	cf be       	out	0x3f, r12	; 63

	cpu_irq_restore(flags);
}
    1562:	df 91       	pop	r29
    1564:	cf 91       	pop	r28
    1566:	1f 91       	pop	r17
    1568:	0f 91       	pop	r16
    156a:	ff 90       	pop	r15
    156c:	ef 90       	pop	r14
    156e:	df 90       	pop	r13
    1570:	cf 90       	pop	r12
    1572:	08 95       	ret

00001574 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1574:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1576:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1578:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    157a:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    157c:	60 83       	st	Z, r22
	ret                             // Return to caller
    157e:	08 95       	ret

00001580 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    1580:	40 91 ca 01 	lds	r20, 0x01CA
	mov ZL, r22               ; Load byte index into low byte of Z.
    1584:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    1586:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    1588:	80 93 ca 01 	sts	0x01CA, r24
	lpm r24, Z                ; Perform an LPM to read out byte
    158c:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    158e:	40 93 ca 01 	sts	0x01CA, r20
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    1592:	08 95       	ret

00001594 <spi_xmega_set_baud_div>:
 * \return Status of operation.
 *   \retval >=0  Success.
 *   \retval  <0  Error.
 */
int8_t spi_xmega_set_baud_div(SPI_t *spi, uint32_t baudrate, uint32_t clkper_hz)
{
    1594:	cf 92       	push	r12
    1596:	df 92       	push	r13
    1598:	ef 92       	push	r14
    159a:	ff 92       	push	r15
    159c:	0f 93       	push	r16
    159e:	1f 93       	push	r17
    15a0:	cf 93       	push	r28
    15a2:	df 93       	push	r29
    15a4:	ec 01       	movw	r28, r24
    15a6:	6a 01       	movw	r12, r20
    15a8:	7b 01       	movw	r14, r22

	/*
	 * Get wanted divisor rounded up so we don't get speed higher than
	 * requested baudrate.
	 */
	divisor = (clkper_hz + baudrate - 1) / baudrate;
    15aa:	db 01       	movw	r26, r22
    15ac:	ca 01       	movw	r24, r20
    15ae:	01 97       	sbiw	r24, 0x01	; 1
    15b0:	a1 09       	sbc	r26, r1
    15b2:	b1 09       	sbc	r27, r1
    15b4:	bc 01       	movw	r22, r24
    15b6:	cd 01       	movw	r24, r26
    15b8:	60 0f       	add	r22, r16
    15ba:	71 1f       	adc	r23, r17
    15bc:	82 1f       	adc	r24, r18
    15be:	93 1f       	adc	r25, r19
    15c0:	a7 01       	movw	r20, r14
    15c2:	96 01       	movw	r18, r12
    15c4:	0e 94 a3 14 	call	0x2946	; 0x2946 <__udivmodsi4>

	if (divisor > 128) {
    15c8:	21 38       	cpi	r18, 0x81	; 129
    15ca:	31 05       	cpc	r19, r1
    15cc:	41 05       	cpc	r20, r1
    15ce:	51 05       	cpc	r21, r1
    15d0:	f8 f4       	brcc	.+62     	; 0x1610 <spi_xmega_set_baud_div+0x7c>

	/*
	 * For divisor values between the possible ones round up to the closest
	 * higher one to avoid higher baudrate than requested.
	 */
	if (divisor_8bit > 64) {
    15d2:	21 34       	cpi	r18, 0x41	; 65
    15d4:	60 f4       	brcc	.+24     	; 0x15ee <spi_xmega_set_baud_div+0x5a>
		ctrl = SPI_PRESCALER_DIV128_gc;
	}
	else if (divisor_8bit > 32) {
    15d6:	21 32       	cpi	r18, 0x21	; 33
    15d8:	60 f4       	brcc	.+24     	; 0x15f2 <spi_xmega_set_baud_div+0x5e>
		ctrl = SPI_PRESCALER_DIV64_gc;
	}
	else if (divisor_8bit > 16) {
    15da:	21 31       	cpi	r18, 0x11	; 17
    15dc:	60 f4       	brcc	.+24     	; 0x15f6 <spi_xmega_set_baud_div+0x62>
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV64_gc;
	}
	else if (divisor_8bit > 8) {
    15de:	29 30       	cpi	r18, 0x09	; 9
    15e0:	60 f4       	brcc	.+24     	; 0x15fa <spi_xmega_set_baud_div+0x66>
		ctrl = SPI_PRESCALER_DIV16_gc;
	}
	else if (divisor_8bit > 4) {
    15e2:	25 30       	cpi	r18, 0x05	; 5
    15e4:	60 f4       	brcc	.+24     	; 0x15fe <spi_xmega_set_baud_div+0x6a>
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV16_gc;
	}
	else if (divisor_8bit > 2) {
    15e6:	23 30       	cpi	r18, 0x03	; 3
    15e8:	60 f0       	brcs	.+24     	; 0x1602 <spi_xmega_set_baud_div+0x6e>
		ctrl = SPI_PRESCALER_DIV4_gc;
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	0b c0       	rjmp	.+22     	; 0x1604 <spi_xmega_set_baud_div+0x70>
	/*
	 * For divisor values between the possible ones round up to the closest
	 * higher one to avoid higher baudrate than requested.
	 */
	if (divisor_8bit > 64) {
		ctrl = SPI_PRESCALER_DIV128_gc;
    15ee:	93 e0       	ldi	r25, 0x03	; 3
    15f0:	09 c0       	rjmp	.+18     	; 0x1604 <spi_xmega_set_baud_div+0x70>
	}
	else if (divisor_8bit > 32) {
		ctrl = SPI_PRESCALER_DIV64_gc;
    15f2:	92 e0       	ldi	r25, 0x02	; 2
    15f4:	07 c0       	rjmp	.+14     	; 0x1604 <spi_xmega_set_baud_div+0x70>
	}
	else if (divisor_8bit > 16) {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV64_gc;
    15f6:	92 e8       	ldi	r25, 0x82	; 130
    15f8:	05 c0       	rjmp	.+10     	; 0x1604 <spi_xmega_set_baud_div+0x70>
	}
	else if (divisor_8bit > 8) {
		ctrl = SPI_PRESCALER_DIV16_gc;
    15fa:	91 e0       	ldi	r25, 0x01	; 1
    15fc:	03 c0       	rjmp	.+6      	; 0x1604 <spi_xmega_set_baud_div+0x70>
	}
	else if (divisor_8bit > 4) {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV16_gc;
    15fe:	91 e8       	ldi	r25, 0x81	; 129
    1600:	01 c0       	rjmp	.+2      	; 0x1604 <spi_xmega_set_baud_div+0x70>
	}
	else if (divisor_8bit > 2) {
		ctrl = SPI_PRESCALER_DIV4_gc;
	}
	else {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV4_gc;
    1602:	90 e8       	ldi	r25, 0x80	; 128
	}

	// Update register and make sure to clear out any leftover bits
	spi->CTRL = (spi->CTRL & ~(SPI_CLK2X_bm | SPI_PRESCALER_gm)) | ctrl;
    1604:	88 81       	ld	r24, Y
    1606:	8c 77       	andi	r24, 0x7C	; 124
    1608:	89 2b       	or	r24, r25
    160a:	88 83       	st	Y, r24

	return 1;
    160c:	81 e0       	ldi	r24, 0x01	; 1
    160e:	01 c0       	rjmp	.+2      	; 0x1612 <spi_xmega_set_baud_div+0x7e>
	if (divisor > 128) {
		/*
		 * Highest possible divisor is 128 so fail since we can't get
		 * low enough baudrate.
		 */
		return -1;
    1610:	8f ef       	ldi	r24, 0xFF	; 255

	// Update register and make sure to clear out any leftover bits
	spi->CTRL = (spi->CTRL & ~(SPI_CLK2X_bm | SPI_PRESCALER_gm)) | ctrl;

	return 1;
}
    1612:	df 91       	pop	r29
    1614:	cf 91       	pop	r28
    1616:	1f 91       	pop	r17
    1618:	0f 91       	pop	r16
    161a:	ff 90       	pop	r15
    161c:	ef 90       	pop	r14
    161e:	df 90       	pop	r13
    1620:	cf 90       	pop	r12
    1622:	08 95       	ret

00001624 <__vector_14>:
	{
		cpu_irq_restore(iflags);
		return;
	}
	cpu_irq_restore(iflags);
}
    1624:	1f 92       	push	r1
    1626:	0f 92       	push	r0
    1628:	0f b6       	in	r0, 0x3f	; 63
    162a:	0f 92       	push	r0
    162c:	11 24       	eor	r1, r1
    162e:	0b b6       	in	r0, 0x3b	; 59
    1630:	0f 92       	push	r0
    1632:	2f 93       	push	r18
    1634:	3f 93       	push	r19
    1636:	4f 93       	push	r20
    1638:	5f 93       	push	r21
    163a:	6f 93       	push	r22
    163c:	7f 93       	push	r23
    163e:	8f 93       	push	r24
    1640:	9f 93       	push	r25
    1642:	af 93       	push	r26
    1644:	bf 93       	push	r27
    1646:	ef 93       	push	r30
    1648:	ff 93       	push	r31
    164a:	e0 91 6d 20 	lds	r30, 0x206D
    164e:	f0 91 6e 20 	lds	r31, 0x206E
    1652:	30 97       	sbiw	r30, 0x00	; 0
    1654:	09 f0       	breq	.+2      	; 0x1658 <__vector_14+0x34>
    1656:	09 95       	icall
    1658:	ff 91       	pop	r31
    165a:	ef 91       	pop	r30
    165c:	bf 91       	pop	r27
    165e:	af 91       	pop	r26
    1660:	9f 91       	pop	r25
    1662:	8f 91       	pop	r24
    1664:	7f 91       	pop	r23
    1666:	6f 91       	pop	r22
    1668:	5f 91       	pop	r21
    166a:	4f 91       	pop	r20
    166c:	3f 91       	pop	r19
    166e:	2f 91       	pop	r18
    1670:	0f 90       	pop	r0
    1672:	0b be       	out	0x3b, r0	; 59
    1674:	0f 90       	pop	r0
    1676:	0f be       	out	0x3f, r0	; 63
    1678:	0f 90       	pop	r0
    167a:	1f 90       	pop	r1
    167c:	18 95       	reti

0000167e <__vector_15>:
    167e:	1f 92       	push	r1
    1680:	0f 92       	push	r0
    1682:	0f b6       	in	r0, 0x3f	; 63
    1684:	0f 92       	push	r0
    1686:	11 24       	eor	r1, r1
    1688:	0b b6       	in	r0, 0x3b	; 59
    168a:	0f 92       	push	r0
    168c:	2f 93       	push	r18
    168e:	3f 93       	push	r19
    1690:	4f 93       	push	r20
    1692:	5f 93       	push	r21
    1694:	6f 93       	push	r22
    1696:	7f 93       	push	r23
    1698:	8f 93       	push	r24
    169a:	9f 93       	push	r25
    169c:	af 93       	push	r26
    169e:	bf 93       	push	r27
    16a0:	ef 93       	push	r30
    16a2:	ff 93       	push	r31
    16a4:	e0 91 6b 20 	lds	r30, 0x206B
    16a8:	f0 91 6c 20 	lds	r31, 0x206C
    16ac:	30 97       	sbiw	r30, 0x00	; 0
    16ae:	09 f0       	breq	.+2      	; 0x16b2 <__vector_15+0x34>
    16b0:	09 95       	icall
    16b2:	ff 91       	pop	r31
    16b4:	ef 91       	pop	r30
    16b6:	bf 91       	pop	r27
    16b8:	af 91       	pop	r26
    16ba:	9f 91       	pop	r25
    16bc:	8f 91       	pop	r24
    16be:	7f 91       	pop	r23
    16c0:	6f 91       	pop	r22
    16c2:	5f 91       	pop	r21
    16c4:	4f 91       	pop	r20
    16c6:	3f 91       	pop	r19
    16c8:	2f 91       	pop	r18
    16ca:	0f 90       	pop	r0
    16cc:	0b be       	out	0x3b, r0	; 59
    16ce:	0f 90       	pop	r0
    16d0:	0f be       	out	0x3f, r0	; 63
    16d2:	0f 90       	pop	r0
    16d4:	1f 90       	pop	r1
    16d6:	18 95       	reti

000016d8 <__vector_16>:
    16d8:	1f 92       	push	r1
    16da:	0f 92       	push	r0
    16dc:	0f b6       	in	r0, 0x3f	; 63
    16de:	0f 92       	push	r0
    16e0:	11 24       	eor	r1, r1
    16e2:	0b b6       	in	r0, 0x3b	; 59
    16e4:	0f 92       	push	r0
    16e6:	2f 93       	push	r18
    16e8:	3f 93       	push	r19
    16ea:	4f 93       	push	r20
    16ec:	5f 93       	push	r21
    16ee:	6f 93       	push	r22
    16f0:	7f 93       	push	r23
    16f2:	8f 93       	push	r24
    16f4:	9f 93       	push	r25
    16f6:	af 93       	push	r26
    16f8:	bf 93       	push	r27
    16fa:	ef 93       	push	r30
    16fc:	ff 93       	push	r31
    16fe:	e0 91 69 20 	lds	r30, 0x2069
    1702:	f0 91 6a 20 	lds	r31, 0x206A
    1706:	30 97       	sbiw	r30, 0x00	; 0
    1708:	09 f0       	breq	.+2      	; 0x170c <__vector_16+0x34>
    170a:	09 95       	icall
    170c:	ff 91       	pop	r31
    170e:	ef 91       	pop	r30
    1710:	bf 91       	pop	r27
    1712:	af 91       	pop	r26
    1714:	9f 91       	pop	r25
    1716:	8f 91       	pop	r24
    1718:	7f 91       	pop	r23
    171a:	6f 91       	pop	r22
    171c:	5f 91       	pop	r21
    171e:	4f 91       	pop	r20
    1720:	3f 91       	pop	r19
    1722:	2f 91       	pop	r18
    1724:	0f 90       	pop	r0
    1726:	0b be       	out	0x3b, r0	; 59
    1728:	0f 90       	pop	r0
    172a:	0f be       	out	0x3f, r0	; 63
    172c:	0f 90       	pop	r0
    172e:	1f 90       	pop	r1
    1730:	18 95       	reti

00001732 <__vector_17>:
    1732:	1f 92       	push	r1
    1734:	0f 92       	push	r0
    1736:	0f b6       	in	r0, 0x3f	; 63
    1738:	0f 92       	push	r0
    173a:	11 24       	eor	r1, r1
    173c:	0b b6       	in	r0, 0x3b	; 59
    173e:	0f 92       	push	r0
    1740:	2f 93       	push	r18
    1742:	3f 93       	push	r19
    1744:	4f 93       	push	r20
    1746:	5f 93       	push	r21
    1748:	6f 93       	push	r22
    174a:	7f 93       	push	r23
    174c:	8f 93       	push	r24
    174e:	9f 93       	push	r25
    1750:	af 93       	push	r26
    1752:	bf 93       	push	r27
    1754:	ef 93       	push	r30
    1756:	ff 93       	push	r31
    1758:	e0 91 67 20 	lds	r30, 0x2067
    175c:	f0 91 68 20 	lds	r31, 0x2068
    1760:	30 97       	sbiw	r30, 0x00	; 0
    1762:	09 f0       	breq	.+2      	; 0x1766 <__vector_17+0x34>
    1764:	09 95       	icall
    1766:	ff 91       	pop	r31
    1768:	ef 91       	pop	r30
    176a:	bf 91       	pop	r27
    176c:	af 91       	pop	r26
    176e:	9f 91       	pop	r25
    1770:	8f 91       	pop	r24
    1772:	7f 91       	pop	r23
    1774:	6f 91       	pop	r22
    1776:	5f 91       	pop	r21
    1778:	4f 91       	pop	r20
    177a:	3f 91       	pop	r19
    177c:	2f 91       	pop	r18
    177e:	0f 90       	pop	r0
    1780:	0b be       	out	0x3b, r0	; 59
    1782:	0f 90       	pop	r0
    1784:	0f be       	out	0x3f, r0	; 63
    1786:	0f 90       	pop	r0
    1788:	1f 90       	pop	r1
    178a:	18 95       	reti

0000178c <__vector_18>:
    178c:	1f 92       	push	r1
    178e:	0f 92       	push	r0
    1790:	0f b6       	in	r0, 0x3f	; 63
    1792:	0f 92       	push	r0
    1794:	11 24       	eor	r1, r1
    1796:	0b b6       	in	r0, 0x3b	; 59
    1798:	0f 92       	push	r0
    179a:	2f 93       	push	r18
    179c:	3f 93       	push	r19
    179e:	4f 93       	push	r20
    17a0:	5f 93       	push	r21
    17a2:	6f 93       	push	r22
    17a4:	7f 93       	push	r23
    17a6:	8f 93       	push	r24
    17a8:	9f 93       	push	r25
    17aa:	af 93       	push	r26
    17ac:	bf 93       	push	r27
    17ae:	ef 93       	push	r30
    17b0:	ff 93       	push	r31
    17b2:	e0 91 65 20 	lds	r30, 0x2065
    17b6:	f0 91 66 20 	lds	r31, 0x2066
    17ba:	30 97       	sbiw	r30, 0x00	; 0
    17bc:	09 f0       	breq	.+2      	; 0x17c0 <__vector_18+0x34>
    17be:	09 95       	icall
    17c0:	ff 91       	pop	r31
    17c2:	ef 91       	pop	r30
    17c4:	bf 91       	pop	r27
    17c6:	af 91       	pop	r26
    17c8:	9f 91       	pop	r25
    17ca:	8f 91       	pop	r24
    17cc:	7f 91       	pop	r23
    17ce:	6f 91       	pop	r22
    17d0:	5f 91       	pop	r21
    17d2:	4f 91       	pop	r20
    17d4:	3f 91       	pop	r19
    17d6:	2f 91       	pop	r18
    17d8:	0f 90       	pop	r0
    17da:	0b be       	out	0x3b, r0	; 59
    17dc:	0f 90       	pop	r0
    17de:	0f be       	out	0x3f, r0	; 63
    17e0:	0f 90       	pop	r0
    17e2:	1f 90       	pop	r1
    17e4:	18 95       	reti

000017e6 <__vector_19>:
    17e6:	1f 92       	push	r1
    17e8:	0f 92       	push	r0
    17ea:	0f b6       	in	r0, 0x3f	; 63
    17ec:	0f 92       	push	r0
    17ee:	11 24       	eor	r1, r1
    17f0:	0b b6       	in	r0, 0x3b	; 59
    17f2:	0f 92       	push	r0
    17f4:	2f 93       	push	r18
    17f6:	3f 93       	push	r19
    17f8:	4f 93       	push	r20
    17fa:	5f 93       	push	r21
    17fc:	6f 93       	push	r22
    17fe:	7f 93       	push	r23
    1800:	8f 93       	push	r24
    1802:	9f 93       	push	r25
    1804:	af 93       	push	r26
    1806:	bf 93       	push	r27
    1808:	ef 93       	push	r30
    180a:	ff 93       	push	r31
    180c:	e0 91 63 20 	lds	r30, 0x2063
    1810:	f0 91 64 20 	lds	r31, 0x2064
    1814:	30 97       	sbiw	r30, 0x00	; 0
    1816:	09 f0       	breq	.+2      	; 0x181a <__vector_19+0x34>
    1818:	09 95       	icall
    181a:	ff 91       	pop	r31
    181c:	ef 91       	pop	r30
    181e:	bf 91       	pop	r27
    1820:	af 91       	pop	r26
    1822:	9f 91       	pop	r25
    1824:	8f 91       	pop	r24
    1826:	7f 91       	pop	r23
    1828:	6f 91       	pop	r22
    182a:	5f 91       	pop	r21
    182c:	4f 91       	pop	r20
    182e:	3f 91       	pop	r19
    1830:	2f 91       	pop	r18
    1832:	0f 90       	pop	r0
    1834:	0b be       	out	0x3b, r0	; 59
    1836:	0f 90       	pop	r0
    1838:	0f be       	out	0x3f, r0	; 63
    183a:	0f 90       	pop	r0
    183c:	1f 90       	pop	r1
    183e:	18 95       	reti

00001840 <__vector_20>:
    1840:	1f 92       	push	r1
    1842:	0f 92       	push	r0
    1844:	0f b6       	in	r0, 0x3f	; 63
    1846:	0f 92       	push	r0
    1848:	11 24       	eor	r1, r1
    184a:	0b b6       	in	r0, 0x3b	; 59
    184c:	0f 92       	push	r0
    184e:	2f 93       	push	r18
    1850:	3f 93       	push	r19
    1852:	4f 93       	push	r20
    1854:	5f 93       	push	r21
    1856:	6f 93       	push	r22
    1858:	7f 93       	push	r23
    185a:	8f 93       	push	r24
    185c:	9f 93       	push	r25
    185e:	af 93       	push	r26
    1860:	bf 93       	push	r27
    1862:	ef 93       	push	r30
    1864:	ff 93       	push	r31
    1866:	e0 91 61 20 	lds	r30, 0x2061
    186a:	f0 91 62 20 	lds	r31, 0x2062
    186e:	30 97       	sbiw	r30, 0x00	; 0
    1870:	09 f0       	breq	.+2      	; 0x1874 <__vector_20+0x34>
    1872:	09 95       	icall
    1874:	ff 91       	pop	r31
    1876:	ef 91       	pop	r30
    1878:	bf 91       	pop	r27
    187a:	af 91       	pop	r26
    187c:	9f 91       	pop	r25
    187e:	8f 91       	pop	r24
    1880:	7f 91       	pop	r23
    1882:	6f 91       	pop	r22
    1884:	5f 91       	pop	r21
    1886:	4f 91       	pop	r20
    1888:	3f 91       	pop	r19
    188a:	2f 91       	pop	r18
    188c:	0f 90       	pop	r0
    188e:	0b be       	out	0x3b, r0	; 59
    1890:	0f 90       	pop	r0
    1892:	0f be       	out	0x3f, r0	; 63
    1894:	0f 90       	pop	r0
    1896:	1f 90       	pop	r1
    1898:	18 95       	reti

0000189a <__vector_21>:
    189a:	1f 92       	push	r1
    189c:	0f 92       	push	r0
    189e:	0f b6       	in	r0, 0x3f	; 63
    18a0:	0f 92       	push	r0
    18a2:	11 24       	eor	r1, r1
    18a4:	0b b6       	in	r0, 0x3b	; 59
    18a6:	0f 92       	push	r0
    18a8:	2f 93       	push	r18
    18aa:	3f 93       	push	r19
    18ac:	4f 93       	push	r20
    18ae:	5f 93       	push	r21
    18b0:	6f 93       	push	r22
    18b2:	7f 93       	push	r23
    18b4:	8f 93       	push	r24
    18b6:	9f 93       	push	r25
    18b8:	af 93       	push	r26
    18ba:	bf 93       	push	r27
    18bc:	ef 93       	push	r30
    18be:	ff 93       	push	r31
    18c0:	e0 91 5f 20 	lds	r30, 0x205F
    18c4:	f0 91 60 20 	lds	r31, 0x2060
    18c8:	30 97       	sbiw	r30, 0x00	; 0
    18ca:	09 f0       	breq	.+2      	; 0x18ce <__vector_21+0x34>
    18cc:	09 95       	icall
    18ce:	ff 91       	pop	r31
    18d0:	ef 91       	pop	r30
    18d2:	bf 91       	pop	r27
    18d4:	af 91       	pop	r26
    18d6:	9f 91       	pop	r25
    18d8:	8f 91       	pop	r24
    18da:	7f 91       	pop	r23
    18dc:	6f 91       	pop	r22
    18de:	5f 91       	pop	r21
    18e0:	4f 91       	pop	r20
    18e2:	3f 91       	pop	r19
    18e4:	2f 91       	pop	r18
    18e6:	0f 90       	pop	r0
    18e8:	0b be       	out	0x3b, r0	; 59
    18ea:	0f 90       	pop	r0
    18ec:	0f be       	out	0x3f, r0	; 63
    18ee:	0f 90       	pop	r0
    18f0:	1f 90       	pop	r1
    18f2:	18 95       	reti

000018f4 <__vector_22>:
    18f4:	1f 92       	push	r1
    18f6:	0f 92       	push	r0
    18f8:	0f b6       	in	r0, 0x3f	; 63
    18fa:	0f 92       	push	r0
    18fc:	11 24       	eor	r1, r1
    18fe:	0b b6       	in	r0, 0x3b	; 59
    1900:	0f 92       	push	r0
    1902:	2f 93       	push	r18
    1904:	3f 93       	push	r19
    1906:	4f 93       	push	r20
    1908:	5f 93       	push	r21
    190a:	6f 93       	push	r22
    190c:	7f 93       	push	r23
    190e:	8f 93       	push	r24
    1910:	9f 93       	push	r25
    1912:	af 93       	push	r26
    1914:	bf 93       	push	r27
    1916:	ef 93       	push	r30
    1918:	ff 93       	push	r31
    191a:	e0 91 5d 20 	lds	r30, 0x205D
    191e:	f0 91 5e 20 	lds	r31, 0x205E
    1922:	30 97       	sbiw	r30, 0x00	; 0
    1924:	09 f0       	breq	.+2      	; 0x1928 <__vector_22+0x34>
    1926:	09 95       	icall
    1928:	ff 91       	pop	r31
    192a:	ef 91       	pop	r30
    192c:	bf 91       	pop	r27
    192e:	af 91       	pop	r26
    1930:	9f 91       	pop	r25
    1932:	8f 91       	pop	r24
    1934:	7f 91       	pop	r23
    1936:	6f 91       	pop	r22
    1938:	5f 91       	pop	r21
    193a:	4f 91       	pop	r20
    193c:	3f 91       	pop	r19
    193e:	2f 91       	pop	r18
    1940:	0f 90       	pop	r0
    1942:	0b be       	out	0x3b, r0	; 59
    1944:	0f 90       	pop	r0
    1946:	0f be       	out	0x3f, r0	; 63
    1948:	0f 90       	pop	r0
    194a:	1f 90       	pop	r1
    194c:	18 95       	reti

0000194e <__vector_23>:
    194e:	1f 92       	push	r1
    1950:	0f 92       	push	r0
    1952:	0f b6       	in	r0, 0x3f	; 63
    1954:	0f 92       	push	r0
    1956:	11 24       	eor	r1, r1
    1958:	0b b6       	in	r0, 0x3b	; 59
    195a:	0f 92       	push	r0
    195c:	2f 93       	push	r18
    195e:	3f 93       	push	r19
    1960:	4f 93       	push	r20
    1962:	5f 93       	push	r21
    1964:	6f 93       	push	r22
    1966:	7f 93       	push	r23
    1968:	8f 93       	push	r24
    196a:	9f 93       	push	r25
    196c:	af 93       	push	r26
    196e:	bf 93       	push	r27
    1970:	ef 93       	push	r30
    1972:	ff 93       	push	r31
    1974:	e0 91 5b 20 	lds	r30, 0x205B
    1978:	f0 91 5c 20 	lds	r31, 0x205C
    197c:	30 97       	sbiw	r30, 0x00	; 0
    197e:	09 f0       	breq	.+2      	; 0x1982 <__vector_23+0x34>
    1980:	09 95       	icall
    1982:	ff 91       	pop	r31
    1984:	ef 91       	pop	r30
    1986:	bf 91       	pop	r27
    1988:	af 91       	pop	r26
    198a:	9f 91       	pop	r25
    198c:	8f 91       	pop	r24
    198e:	7f 91       	pop	r23
    1990:	6f 91       	pop	r22
    1992:	5f 91       	pop	r21
    1994:	4f 91       	pop	r20
    1996:	3f 91       	pop	r19
    1998:	2f 91       	pop	r18
    199a:	0f 90       	pop	r0
    199c:	0b be       	out	0x3b, r0	; 59
    199e:	0f 90       	pop	r0
    19a0:	0f be       	out	0x3f, r0	; 63
    19a2:	0f 90       	pop	r0
    19a4:	1f 90       	pop	r1
    19a6:	18 95       	reti

000019a8 <__vector_77>:
    19a8:	1f 92       	push	r1
    19aa:	0f 92       	push	r0
    19ac:	0f b6       	in	r0, 0x3f	; 63
    19ae:	0f 92       	push	r0
    19b0:	11 24       	eor	r1, r1
    19b2:	0b b6       	in	r0, 0x3b	; 59
    19b4:	0f 92       	push	r0
    19b6:	2f 93       	push	r18
    19b8:	3f 93       	push	r19
    19ba:	4f 93       	push	r20
    19bc:	5f 93       	push	r21
    19be:	6f 93       	push	r22
    19c0:	7f 93       	push	r23
    19c2:	8f 93       	push	r24
    19c4:	9f 93       	push	r25
    19c6:	af 93       	push	r26
    19c8:	bf 93       	push	r27
    19ca:	ef 93       	push	r30
    19cc:	ff 93       	push	r31
    19ce:	e0 91 59 20 	lds	r30, 0x2059
    19d2:	f0 91 5a 20 	lds	r31, 0x205A
    19d6:	30 97       	sbiw	r30, 0x00	; 0
    19d8:	09 f0       	breq	.+2      	; 0x19dc <__vector_77+0x34>
    19da:	09 95       	icall
    19dc:	ff 91       	pop	r31
    19de:	ef 91       	pop	r30
    19e0:	bf 91       	pop	r27
    19e2:	af 91       	pop	r26
    19e4:	9f 91       	pop	r25
    19e6:	8f 91       	pop	r24
    19e8:	7f 91       	pop	r23
    19ea:	6f 91       	pop	r22
    19ec:	5f 91       	pop	r21
    19ee:	4f 91       	pop	r20
    19f0:	3f 91       	pop	r19
    19f2:	2f 91       	pop	r18
    19f4:	0f 90       	pop	r0
    19f6:	0b be       	out	0x3b, r0	; 59
    19f8:	0f 90       	pop	r0
    19fa:	0f be       	out	0x3f, r0	; 63
    19fc:	0f 90       	pop	r0
    19fe:	1f 90       	pop	r1
    1a00:	18 95       	reti

00001a02 <__vector_78>:
    1a02:	1f 92       	push	r1
    1a04:	0f 92       	push	r0
    1a06:	0f b6       	in	r0, 0x3f	; 63
    1a08:	0f 92       	push	r0
    1a0a:	11 24       	eor	r1, r1
    1a0c:	0b b6       	in	r0, 0x3b	; 59
    1a0e:	0f 92       	push	r0
    1a10:	2f 93       	push	r18
    1a12:	3f 93       	push	r19
    1a14:	4f 93       	push	r20
    1a16:	5f 93       	push	r21
    1a18:	6f 93       	push	r22
    1a1a:	7f 93       	push	r23
    1a1c:	8f 93       	push	r24
    1a1e:	9f 93       	push	r25
    1a20:	af 93       	push	r26
    1a22:	bf 93       	push	r27
    1a24:	ef 93       	push	r30
    1a26:	ff 93       	push	r31
    1a28:	e0 91 57 20 	lds	r30, 0x2057
    1a2c:	f0 91 58 20 	lds	r31, 0x2058
    1a30:	30 97       	sbiw	r30, 0x00	; 0
    1a32:	09 f0       	breq	.+2      	; 0x1a36 <__vector_78+0x34>
    1a34:	09 95       	icall
    1a36:	ff 91       	pop	r31
    1a38:	ef 91       	pop	r30
    1a3a:	bf 91       	pop	r27
    1a3c:	af 91       	pop	r26
    1a3e:	9f 91       	pop	r25
    1a40:	8f 91       	pop	r24
    1a42:	7f 91       	pop	r23
    1a44:	6f 91       	pop	r22
    1a46:	5f 91       	pop	r21
    1a48:	4f 91       	pop	r20
    1a4a:	3f 91       	pop	r19
    1a4c:	2f 91       	pop	r18
    1a4e:	0f 90       	pop	r0
    1a50:	0b be       	out	0x3b, r0	; 59
    1a52:	0f 90       	pop	r0
    1a54:	0f be       	out	0x3f, r0	; 63
    1a56:	0f 90       	pop	r0
    1a58:	1f 90       	pop	r1
    1a5a:	18 95       	reti

00001a5c <__vector_79>:
    1a5c:	1f 92       	push	r1
    1a5e:	0f 92       	push	r0
    1a60:	0f b6       	in	r0, 0x3f	; 63
    1a62:	0f 92       	push	r0
    1a64:	11 24       	eor	r1, r1
    1a66:	0b b6       	in	r0, 0x3b	; 59
    1a68:	0f 92       	push	r0
    1a6a:	2f 93       	push	r18
    1a6c:	3f 93       	push	r19
    1a6e:	4f 93       	push	r20
    1a70:	5f 93       	push	r21
    1a72:	6f 93       	push	r22
    1a74:	7f 93       	push	r23
    1a76:	8f 93       	push	r24
    1a78:	9f 93       	push	r25
    1a7a:	af 93       	push	r26
    1a7c:	bf 93       	push	r27
    1a7e:	ef 93       	push	r30
    1a80:	ff 93       	push	r31
    1a82:	e0 91 55 20 	lds	r30, 0x2055
    1a86:	f0 91 56 20 	lds	r31, 0x2056
    1a8a:	30 97       	sbiw	r30, 0x00	; 0
    1a8c:	09 f0       	breq	.+2      	; 0x1a90 <__vector_79+0x34>
    1a8e:	09 95       	icall
    1a90:	ff 91       	pop	r31
    1a92:	ef 91       	pop	r30
    1a94:	bf 91       	pop	r27
    1a96:	af 91       	pop	r26
    1a98:	9f 91       	pop	r25
    1a9a:	8f 91       	pop	r24
    1a9c:	7f 91       	pop	r23
    1a9e:	6f 91       	pop	r22
    1aa0:	5f 91       	pop	r21
    1aa2:	4f 91       	pop	r20
    1aa4:	3f 91       	pop	r19
    1aa6:	2f 91       	pop	r18
    1aa8:	0f 90       	pop	r0
    1aaa:	0b be       	out	0x3b, r0	; 59
    1aac:	0f 90       	pop	r0
    1aae:	0f be       	out	0x3f, r0	; 63
    1ab0:	0f 90       	pop	r0
    1ab2:	1f 90       	pop	r1
    1ab4:	18 95       	reti

00001ab6 <__vector_80>:
    1ab6:	1f 92       	push	r1
    1ab8:	0f 92       	push	r0
    1aba:	0f b6       	in	r0, 0x3f	; 63
    1abc:	0f 92       	push	r0
    1abe:	11 24       	eor	r1, r1
    1ac0:	0b b6       	in	r0, 0x3b	; 59
    1ac2:	0f 92       	push	r0
    1ac4:	2f 93       	push	r18
    1ac6:	3f 93       	push	r19
    1ac8:	4f 93       	push	r20
    1aca:	5f 93       	push	r21
    1acc:	6f 93       	push	r22
    1ace:	7f 93       	push	r23
    1ad0:	8f 93       	push	r24
    1ad2:	9f 93       	push	r25
    1ad4:	af 93       	push	r26
    1ad6:	bf 93       	push	r27
    1ad8:	ef 93       	push	r30
    1ada:	ff 93       	push	r31
    1adc:	e0 91 53 20 	lds	r30, 0x2053
    1ae0:	f0 91 54 20 	lds	r31, 0x2054
    1ae4:	30 97       	sbiw	r30, 0x00	; 0
    1ae6:	09 f0       	breq	.+2      	; 0x1aea <__vector_80+0x34>
    1ae8:	09 95       	icall
    1aea:	ff 91       	pop	r31
    1aec:	ef 91       	pop	r30
    1aee:	bf 91       	pop	r27
    1af0:	af 91       	pop	r26
    1af2:	9f 91       	pop	r25
    1af4:	8f 91       	pop	r24
    1af6:	7f 91       	pop	r23
    1af8:	6f 91       	pop	r22
    1afa:	5f 91       	pop	r21
    1afc:	4f 91       	pop	r20
    1afe:	3f 91       	pop	r19
    1b00:	2f 91       	pop	r18
    1b02:	0f 90       	pop	r0
    1b04:	0b be       	out	0x3b, r0	; 59
    1b06:	0f 90       	pop	r0
    1b08:	0f be       	out	0x3f, r0	; 63
    1b0a:	0f 90       	pop	r0
    1b0c:	1f 90       	pop	r1
    1b0e:	18 95       	reti

00001b10 <__vector_81>:
    1b10:	1f 92       	push	r1
    1b12:	0f 92       	push	r0
    1b14:	0f b6       	in	r0, 0x3f	; 63
    1b16:	0f 92       	push	r0
    1b18:	11 24       	eor	r1, r1
    1b1a:	0b b6       	in	r0, 0x3b	; 59
    1b1c:	0f 92       	push	r0
    1b1e:	2f 93       	push	r18
    1b20:	3f 93       	push	r19
    1b22:	4f 93       	push	r20
    1b24:	5f 93       	push	r21
    1b26:	6f 93       	push	r22
    1b28:	7f 93       	push	r23
    1b2a:	8f 93       	push	r24
    1b2c:	9f 93       	push	r25
    1b2e:	af 93       	push	r26
    1b30:	bf 93       	push	r27
    1b32:	ef 93       	push	r30
    1b34:	ff 93       	push	r31
    1b36:	e0 91 51 20 	lds	r30, 0x2051
    1b3a:	f0 91 52 20 	lds	r31, 0x2052
    1b3e:	30 97       	sbiw	r30, 0x00	; 0
    1b40:	09 f0       	breq	.+2      	; 0x1b44 <__vector_81+0x34>
    1b42:	09 95       	icall
    1b44:	ff 91       	pop	r31
    1b46:	ef 91       	pop	r30
    1b48:	bf 91       	pop	r27
    1b4a:	af 91       	pop	r26
    1b4c:	9f 91       	pop	r25
    1b4e:	8f 91       	pop	r24
    1b50:	7f 91       	pop	r23
    1b52:	6f 91       	pop	r22
    1b54:	5f 91       	pop	r21
    1b56:	4f 91       	pop	r20
    1b58:	3f 91       	pop	r19
    1b5a:	2f 91       	pop	r18
    1b5c:	0f 90       	pop	r0
    1b5e:	0b be       	out	0x3b, r0	; 59
    1b60:	0f 90       	pop	r0
    1b62:	0f be       	out	0x3f, r0	; 63
    1b64:	0f 90       	pop	r0
    1b66:	1f 90       	pop	r1
    1b68:	18 95       	reti

00001b6a <__vector_82>:
    1b6a:	1f 92       	push	r1
    1b6c:	0f 92       	push	r0
    1b6e:	0f b6       	in	r0, 0x3f	; 63
    1b70:	0f 92       	push	r0
    1b72:	11 24       	eor	r1, r1
    1b74:	0b b6       	in	r0, 0x3b	; 59
    1b76:	0f 92       	push	r0
    1b78:	2f 93       	push	r18
    1b7a:	3f 93       	push	r19
    1b7c:	4f 93       	push	r20
    1b7e:	5f 93       	push	r21
    1b80:	6f 93       	push	r22
    1b82:	7f 93       	push	r23
    1b84:	8f 93       	push	r24
    1b86:	9f 93       	push	r25
    1b88:	af 93       	push	r26
    1b8a:	bf 93       	push	r27
    1b8c:	ef 93       	push	r30
    1b8e:	ff 93       	push	r31
    1b90:	e0 91 4f 20 	lds	r30, 0x204F
    1b94:	f0 91 50 20 	lds	r31, 0x2050
    1b98:	30 97       	sbiw	r30, 0x00	; 0
    1b9a:	09 f0       	breq	.+2      	; 0x1b9e <__vector_82+0x34>
    1b9c:	09 95       	icall
    1b9e:	ff 91       	pop	r31
    1ba0:	ef 91       	pop	r30
    1ba2:	bf 91       	pop	r27
    1ba4:	af 91       	pop	r26
    1ba6:	9f 91       	pop	r25
    1ba8:	8f 91       	pop	r24
    1baa:	7f 91       	pop	r23
    1bac:	6f 91       	pop	r22
    1bae:	5f 91       	pop	r21
    1bb0:	4f 91       	pop	r20
    1bb2:	3f 91       	pop	r19
    1bb4:	2f 91       	pop	r18
    1bb6:	0f 90       	pop	r0
    1bb8:	0b be       	out	0x3b, r0	; 59
    1bba:	0f 90       	pop	r0
    1bbc:	0f be       	out	0x3f, r0	; 63
    1bbe:	0f 90       	pop	r0
    1bc0:	1f 90       	pop	r1
    1bc2:	18 95       	reti

00001bc4 <__vector_83>:
    1bc4:	1f 92       	push	r1
    1bc6:	0f 92       	push	r0
    1bc8:	0f b6       	in	r0, 0x3f	; 63
    1bca:	0f 92       	push	r0
    1bcc:	11 24       	eor	r1, r1
    1bce:	0b b6       	in	r0, 0x3b	; 59
    1bd0:	0f 92       	push	r0
    1bd2:	2f 93       	push	r18
    1bd4:	3f 93       	push	r19
    1bd6:	4f 93       	push	r20
    1bd8:	5f 93       	push	r21
    1bda:	6f 93       	push	r22
    1bdc:	7f 93       	push	r23
    1bde:	8f 93       	push	r24
    1be0:	9f 93       	push	r25
    1be2:	af 93       	push	r26
    1be4:	bf 93       	push	r27
    1be6:	ef 93       	push	r30
    1be8:	ff 93       	push	r31
    1bea:	e0 91 4d 20 	lds	r30, 0x204D
    1bee:	f0 91 4e 20 	lds	r31, 0x204E
    1bf2:	30 97       	sbiw	r30, 0x00	; 0
    1bf4:	09 f0       	breq	.+2      	; 0x1bf8 <__vector_83+0x34>
    1bf6:	09 95       	icall
    1bf8:	ff 91       	pop	r31
    1bfa:	ef 91       	pop	r30
    1bfc:	bf 91       	pop	r27
    1bfe:	af 91       	pop	r26
    1c00:	9f 91       	pop	r25
    1c02:	8f 91       	pop	r24
    1c04:	7f 91       	pop	r23
    1c06:	6f 91       	pop	r22
    1c08:	5f 91       	pop	r21
    1c0a:	4f 91       	pop	r20
    1c0c:	3f 91       	pop	r19
    1c0e:	2f 91       	pop	r18
    1c10:	0f 90       	pop	r0
    1c12:	0b be       	out	0x3b, r0	; 59
    1c14:	0f 90       	pop	r0
    1c16:	0f be       	out	0x3f, r0	; 63
    1c18:	0f 90       	pop	r0
    1c1a:	1f 90       	pop	r1
    1c1c:	18 95       	reti

00001c1e <__vector_84>:
    1c1e:	1f 92       	push	r1
    1c20:	0f 92       	push	r0
    1c22:	0f b6       	in	r0, 0x3f	; 63
    1c24:	0f 92       	push	r0
    1c26:	11 24       	eor	r1, r1
    1c28:	0b b6       	in	r0, 0x3b	; 59
    1c2a:	0f 92       	push	r0
    1c2c:	2f 93       	push	r18
    1c2e:	3f 93       	push	r19
    1c30:	4f 93       	push	r20
    1c32:	5f 93       	push	r21
    1c34:	6f 93       	push	r22
    1c36:	7f 93       	push	r23
    1c38:	8f 93       	push	r24
    1c3a:	9f 93       	push	r25
    1c3c:	af 93       	push	r26
    1c3e:	bf 93       	push	r27
    1c40:	ef 93       	push	r30
    1c42:	ff 93       	push	r31
    1c44:	e0 91 4b 20 	lds	r30, 0x204B
    1c48:	f0 91 4c 20 	lds	r31, 0x204C
    1c4c:	30 97       	sbiw	r30, 0x00	; 0
    1c4e:	09 f0       	breq	.+2      	; 0x1c52 <__vector_84+0x34>
    1c50:	09 95       	icall
    1c52:	ff 91       	pop	r31
    1c54:	ef 91       	pop	r30
    1c56:	bf 91       	pop	r27
    1c58:	af 91       	pop	r26
    1c5a:	9f 91       	pop	r25
    1c5c:	8f 91       	pop	r24
    1c5e:	7f 91       	pop	r23
    1c60:	6f 91       	pop	r22
    1c62:	5f 91       	pop	r21
    1c64:	4f 91       	pop	r20
    1c66:	3f 91       	pop	r19
    1c68:	2f 91       	pop	r18
    1c6a:	0f 90       	pop	r0
    1c6c:	0b be       	out	0x3b, r0	; 59
    1c6e:	0f 90       	pop	r0
    1c70:	0f be       	out	0x3f, r0	; 63
    1c72:	0f 90       	pop	r0
    1c74:	1f 90       	pop	r1
    1c76:	18 95       	reti

00001c78 <__vector_85>:
    1c78:	1f 92       	push	r1
    1c7a:	0f 92       	push	r0
    1c7c:	0f b6       	in	r0, 0x3f	; 63
    1c7e:	0f 92       	push	r0
    1c80:	11 24       	eor	r1, r1
    1c82:	0b b6       	in	r0, 0x3b	; 59
    1c84:	0f 92       	push	r0
    1c86:	2f 93       	push	r18
    1c88:	3f 93       	push	r19
    1c8a:	4f 93       	push	r20
    1c8c:	5f 93       	push	r21
    1c8e:	6f 93       	push	r22
    1c90:	7f 93       	push	r23
    1c92:	8f 93       	push	r24
    1c94:	9f 93       	push	r25
    1c96:	af 93       	push	r26
    1c98:	bf 93       	push	r27
    1c9a:	ef 93       	push	r30
    1c9c:	ff 93       	push	r31
    1c9e:	e0 91 49 20 	lds	r30, 0x2049
    1ca2:	f0 91 4a 20 	lds	r31, 0x204A
    1ca6:	30 97       	sbiw	r30, 0x00	; 0
    1ca8:	09 f0       	breq	.+2      	; 0x1cac <__vector_85+0x34>
    1caa:	09 95       	icall
    1cac:	ff 91       	pop	r31
    1cae:	ef 91       	pop	r30
    1cb0:	bf 91       	pop	r27
    1cb2:	af 91       	pop	r26
    1cb4:	9f 91       	pop	r25
    1cb6:	8f 91       	pop	r24
    1cb8:	7f 91       	pop	r23
    1cba:	6f 91       	pop	r22
    1cbc:	5f 91       	pop	r21
    1cbe:	4f 91       	pop	r20
    1cc0:	3f 91       	pop	r19
    1cc2:	2f 91       	pop	r18
    1cc4:	0f 90       	pop	r0
    1cc6:	0b be       	out	0x3b, r0	; 59
    1cc8:	0f 90       	pop	r0
    1cca:	0f be       	out	0x3f, r0	; 63
    1ccc:	0f 90       	pop	r0
    1cce:	1f 90       	pop	r1
    1cd0:	18 95       	reti

00001cd2 <__vector_86>:
    1cd2:	1f 92       	push	r1
    1cd4:	0f 92       	push	r0
    1cd6:	0f b6       	in	r0, 0x3f	; 63
    1cd8:	0f 92       	push	r0
    1cda:	11 24       	eor	r1, r1
    1cdc:	0b b6       	in	r0, 0x3b	; 59
    1cde:	0f 92       	push	r0
    1ce0:	2f 93       	push	r18
    1ce2:	3f 93       	push	r19
    1ce4:	4f 93       	push	r20
    1ce6:	5f 93       	push	r21
    1ce8:	6f 93       	push	r22
    1cea:	7f 93       	push	r23
    1cec:	8f 93       	push	r24
    1cee:	9f 93       	push	r25
    1cf0:	af 93       	push	r26
    1cf2:	bf 93       	push	r27
    1cf4:	ef 93       	push	r30
    1cf6:	ff 93       	push	r31
    1cf8:	e0 91 47 20 	lds	r30, 0x2047
    1cfc:	f0 91 48 20 	lds	r31, 0x2048
    1d00:	30 97       	sbiw	r30, 0x00	; 0
    1d02:	09 f0       	breq	.+2      	; 0x1d06 <__vector_86+0x34>
    1d04:	09 95       	icall
    1d06:	ff 91       	pop	r31
    1d08:	ef 91       	pop	r30
    1d0a:	bf 91       	pop	r27
    1d0c:	af 91       	pop	r26
    1d0e:	9f 91       	pop	r25
    1d10:	8f 91       	pop	r24
    1d12:	7f 91       	pop	r23
    1d14:	6f 91       	pop	r22
    1d16:	5f 91       	pop	r21
    1d18:	4f 91       	pop	r20
    1d1a:	3f 91       	pop	r19
    1d1c:	2f 91       	pop	r18
    1d1e:	0f 90       	pop	r0
    1d20:	0b be       	out	0x3b, r0	; 59
    1d22:	0f 90       	pop	r0
    1d24:	0f be       	out	0x3f, r0	; 63
    1d26:	0f 90       	pop	r0
    1d28:	1f 90       	pop	r1
    1d2a:	18 95       	reti

00001d2c <__vector_47>:
    1d2c:	1f 92       	push	r1
    1d2e:	0f 92       	push	r0
    1d30:	0f b6       	in	r0, 0x3f	; 63
    1d32:	0f 92       	push	r0
    1d34:	11 24       	eor	r1, r1
    1d36:	0b b6       	in	r0, 0x3b	; 59
    1d38:	0f 92       	push	r0
    1d3a:	2f 93       	push	r18
    1d3c:	3f 93       	push	r19
    1d3e:	4f 93       	push	r20
    1d40:	5f 93       	push	r21
    1d42:	6f 93       	push	r22
    1d44:	7f 93       	push	r23
    1d46:	8f 93       	push	r24
    1d48:	9f 93       	push	r25
    1d4a:	af 93       	push	r26
    1d4c:	bf 93       	push	r27
    1d4e:	ef 93       	push	r30
    1d50:	ff 93       	push	r31
    1d52:	e0 91 45 20 	lds	r30, 0x2045
    1d56:	f0 91 46 20 	lds	r31, 0x2046
    1d5a:	30 97       	sbiw	r30, 0x00	; 0
    1d5c:	09 f0       	breq	.+2      	; 0x1d60 <__vector_47+0x34>
    1d5e:	09 95       	icall
    1d60:	ff 91       	pop	r31
    1d62:	ef 91       	pop	r30
    1d64:	bf 91       	pop	r27
    1d66:	af 91       	pop	r26
    1d68:	9f 91       	pop	r25
    1d6a:	8f 91       	pop	r24
    1d6c:	7f 91       	pop	r23
    1d6e:	6f 91       	pop	r22
    1d70:	5f 91       	pop	r21
    1d72:	4f 91       	pop	r20
    1d74:	3f 91       	pop	r19
    1d76:	2f 91       	pop	r18
    1d78:	0f 90       	pop	r0
    1d7a:	0b be       	out	0x3b, r0	; 59
    1d7c:	0f 90       	pop	r0
    1d7e:	0f be       	out	0x3f, r0	; 63
    1d80:	0f 90       	pop	r0
    1d82:	1f 90       	pop	r1
    1d84:	18 95       	reti

00001d86 <__vector_48>:
    1d86:	1f 92       	push	r1
    1d88:	0f 92       	push	r0
    1d8a:	0f b6       	in	r0, 0x3f	; 63
    1d8c:	0f 92       	push	r0
    1d8e:	11 24       	eor	r1, r1
    1d90:	0b b6       	in	r0, 0x3b	; 59
    1d92:	0f 92       	push	r0
    1d94:	2f 93       	push	r18
    1d96:	3f 93       	push	r19
    1d98:	4f 93       	push	r20
    1d9a:	5f 93       	push	r21
    1d9c:	6f 93       	push	r22
    1d9e:	7f 93       	push	r23
    1da0:	8f 93       	push	r24
    1da2:	9f 93       	push	r25
    1da4:	af 93       	push	r26
    1da6:	bf 93       	push	r27
    1da8:	ef 93       	push	r30
    1daa:	ff 93       	push	r31
    1dac:	e0 91 43 20 	lds	r30, 0x2043
    1db0:	f0 91 44 20 	lds	r31, 0x2044
    1db4:	30 97       	sbiw	r30, 0x00	; 0
    1db6:	09 f0       	breq	.+2      	; 0x1dba <__vector_48+0x34>
    1db8:	09 95       	icall
    1dba:	ff 91       	pop	r31
    1dbc:	ef 91       	pop	r30
    1dbe:	bf 91       	pop	r27
    1dc0:	af 91       	pop	r26
    1dc2:	9f 91       	pop	r25
    1dc4:	8f 91       	pop	r24
    1dc6:	7f 91       	pop	r23
    1dc8:	6f 91       	pop	r22
    1dca:	5f 91       	pop	r21
    1dcc:	4f 91       	pop	r20
    1dce:	3f 91       	pop	r19
    1dd0:	2f 91       	pop	r18
    1dd2:	0f 90       	pop	r0
    1dd4:	0b be       	out	0x3b, r0	; 59
    1dd6:	0f 90       	pop	r0
    1dd8:	0f be       	out	0x3f, r0	; 63
    1dda:	0f 90       	pop	r0
    1ddc:	1f 90       	pop	r1
    1dde:	18 95       	reti

00001de0 <__vector_49>:
    1de0:	1f 92       	push	r1
    1de2:	0f 92       	push	r0
    1de4:	0f b6       	in	r0, 0x3f	; 63
    1de6:	0f 92       	push	r0
    1de8:	11 24       	eor	r1, r1
    1dea:	0b b6       	in	r0, 0x3b	; 59
    1dec:	0f 92       	push	r0
    1dee:	2f 93       	push	r18
    1df0:	3f 93       	push	r19
    1df2:	4f 93       	push	r20
    1df4:	5f 93       	push	r21
    1df6:	6f 93       	push	r22
    1df8:	7f 93       	push	r23
    1dfa:	8f 93       	push	r24
    1dfc:	9f 93       	push	r25
    1dfe:	af 93       	push	r26
    1e00:	bf 93       	push	r27
    1e02:	ef 93       	push	r30
    1e04:	ff 93       	push	r31
    1e06:	e0 91 41 20 	lds	r30, 0x2041
    1e0a:	f0 91 42 20 	lds	r31, 0x2042
    1e0e:	30 97       	sbiw	r30, 0x00	; 0
    1e10:	09 f0       	breq	.+2      	; 0x1e14 <__vector_49+0x34>
    1e12:	09 95       	icall
    1e14:	ff 91       	pop	r31
    1e16:	ef 91       	pop	r30
    1e18:	bf 91       	pop	r27
    1e1a:	af 91       	pop	r26
    1e1c:	9f 91       	pop	r25
    1e1e:	8f 91       	pop	r24
    1e20:	7f 91       	pop	r23
    1e22:	6f 91       	pop	r22
    1e24:	5f 91       	pop	r21
    1e26:	4f 91       	pop	r20
    1e28:	3f 91       	pop	r19
    1e2a:	2f 91       	pop	r18
    1e2c:	0f 90       	pop	r0
    1e2e:	0b be       	out	0x3b, r0	; 59
    1e30:	0f 90       	pop	r0
    1e32:	0f be       	out	0x3f, r0	; 63
    1e34:	0f 90       	pop	r0
    1e36:	1f 90       	pop	r1
    1e38:	18 95       	reti

00001e3a <__vector_50>:
    1e3a:	1f 92       	push	r1
    1e3c:	0f 92       	push	r0
    1e3e:	0f b6       	in	r0, 0x3f	; 63
    1e40:	0f 92       	push	r0
    1e42:	11 24       	eor	r1, r1
    1e44:	0b b6       	in	r0, 0x3b	; 59
    1e46:	0f 92       	push	r0
    1e48:	2f 93       	push	r18
    1e4a:	3f 93       	push	r19
    1e4c:	4f 93       	push	r20
    1e4e:	5f 93       	push	r21
    1e50:	6f 93       	push	r22
    1e52:	7f 93       	push	r23
    1e54:	8f 93       	push	r24
    1e56:	9f 93       	push	r25
    1e58:	af 93       	push	r26
    1e5a:	bf 93       	push	r27
    1e5c:	ef 93       	push	r30
    1e5e:	ff 93       	push	r31
    1e60:	e0 91 3f 20 	lds	r30, 0x203F
    1e64:	f0 91 40 20 	lds	r31, 0x2040
    1e68:	30 97       	sbiw	r30, 0x00	; 0
    1e6a:	09 f0       	breq	.+2      	; 0x1e6e <__vector_50+0x34>
    1e6c:	09 95       	icall
    1e6e:	ff 91       	pop	r31
    1e70:	ef 91       	pop	r30
    1e72:	bf 91       	pop	r27
    1e74:	af 91       	pop	r26
    1e76:	9f 91       	pop	r25
    1e78:	8f 91       	pop	r24
    1e7a:	7f 91       	pop	r23
    1e7c:	6f 91       	pop	r22
    1e7e:	5f 91       	pop	r21
    1e80:	4f 91       	pop	r20
    1e82:	3f 91       	pop	r19
    1e84:	2f 91       	pop	r18
    1e86:	0f 90       	pop	r0
    1e88:	0b be       	out	0x3b, r0	; 59
    1e8a:	0f 90       	pop	r0
    1e8c:	0f be       	out	0x3f, r0	; 63
    1e8e:	0f 90       	pop	r0
    1e90:	1f 90       	pop	r1
    1e92:	18 95       	reti

00001e94 <__vector_51>:
    1e94:	1f 92       	push	r1
    1e96:	0f 92       	push	r0
    1e98:	0f b6       	in	r0, 0x3f	; 63
    1e9a:	0f 92       	push	r0
    1e9c:	11 24       	eor	r1, r1
    1e9e:	0b b6       	in	r0, 0x3b	; 59
    1ea0:	0f 92       	push	r0
    1ea2:	2f 93       	push	r18
    1ea4:	3f 93       	push	r19
    1ea6:	4f 93       	push	r20
    1ea8:	5f 93       	push	r21
    1eaa:	6f 93       	push	r22
    1eac:	7f 93       	push	r23
    1eae:	8f 93       	push	r24
    1eb0:	9f 93       	push	r25
    1eb2:	af 93       	push	r26
    1eb4:	bf 93       	push	r27
    1eb6:	ef 93       	push	r30
    1eb8:	ff 93       	push	r31
    1eba:	e0 91 3d 20 	lds	r30, 0x203D
    1ebe:	f0 91 3e 20 	lds	r31, 0x203E
    1ec2:	30 97       	sbiw	r30, 0x00	; 0
    1ec4:	09 f0       	breq	.+2      	; 0x1ec8 <__vector_51+0x34>
    1ec6:	09 95       	icall
    1ec8:	ff 91       	pop	r31
    1eca:	ef 91       	pop	r30
    1ecc:	bf 91       	pop	r27
    1ece:	af 91       	pop	r26
    1ed0:	9f 91       	pop	r25
    1ed2:	8f 91       	pop	r24
    1ed4:	7f 91       	pop	r23
    1ed6:	6f 91       	pop	r22
    1ed8:	5f 91       	pop	r21
    1eda:	4f 91       	pop	r20
    1edc:	3f 91       	pop	r19
    1ede:	2f 91       	pop	r18
    1ee0:	0f 90       	pop	r0
    1ee2:	0b be       	out	0x3b, r0	; 59
    1ee4:	0f 90       	pop	r0
    1ee6:	0f be       	out	0x3f, r0	; 63
    1ee8:	0f 90       	pop	r0
    1eea:	1f 90       	pop	r1
    1eec:	18 95       	reti

00001eee <__vector_52>:
    1eee:	1f 92       	push	r1
    1ef0:	0f 92       	push	r0
    1ef2:	0f b6       	in	r0, 0x3f	; 63
    1ef4:	0f 92       	push	r0
    1ef6:	11 24       	eor	r1, r1
    1ef8:	0b b6       	in	r0, 0x3b	; 59
    1efa:	0f 92       	push	r0
    1efc:	2f 93       	push	r18
    1efe:	3f 93       	push	r19
    1f00:	4f 93       	push	r20
    1f02:	5f 93       	push	r21
    1f04:	6f 93       	push	r22
    1f06:	7f 93       	push	r23
    1f08:	8f 93       	push	r24
    1f0a:	9f 93       	push	r25
    1f0c:	af 93       	push	r26
    1f0e:	bf 93       	push	r27
    1f10:	ef 93       	push	r30
    1f12:	ff 93       	push	r31
    1f14:	e0 91 3b 20 	lds	r30, 0x203B
    1f18:	f0 91 3c 20 	lds	r31, 0x203C
    1f1c:	30 97       	sbiw	r30, 0x00	; 0
    1f1e:	09 f0       	breq	.+2      	; 0x1f22 <__vector_52+0x34>
    1f20:	09 95       	icall
    1f22:	ff 91       	pop	r31
    1f24:	ef 91       	pop	r30
    1f26:	bf 91       	pop	r27
    1f28:	af 91       	pop	r26
    1f2a:	9f 91       	pop	r25
    1f2c:	8f 91       	pop	r24
    1f2e:	7f 91       	pop	r23
    1f30:	6f 91       	pop	r22
    1f32:	5f 91       	pop	r21
    1f34:	4f 91       	pop	r20
    1f36:	3f 91       	pop	r19
    1f38:	2f 91       	pop	r18
    1f3a:	0f 90       	pop	r0
    1f3c:	0b be       	out	0x3b, r0	; 59
    1f3e:	0f 90       	pop	r0
    1f40:	0f be       	out	0x3f, r0	; 63
    1f42:	0f 90       	pop	r0
    1f44:	1f 90       	pop	r1
    1f46:	18 95       	reti

00001f48 <__vector_53>:
    1f48:	1f 92       	push	r1
    1f4a:	0f 92       	push	r0
    1f4c:	0f b6       	in	r0, 0x3f	; 63
    1f4e:	0f 92       	push	r0
    1f50:	11 24       	eor	r1, r1
    1f52:	0b b6       	in	r0, 0x3b	; 59
    1f54:	0f 92       	push	r0
    1f56:	2f 93       	push	r18
    1f58:	3f 93       	push	r19
    1f5a:	4f 93       	push	r20
    1f5c:	5f 93       	push	r21
    1f5e:	6f 93       	push	r22
    1f60:	7f 93       	push	r23
    1f62:	8f 93       	push	r24
    1f64:	9f 93       	push	r25
    1f66:	af 93       	push	r26
    1f68:	bf 93       	push	r27
    1f6a:	ef 93       	push	r30
    1f6c:	ff 93       	push	r31
    1f6e:	e0 91 39 20 	lds	r30, 0x2039
    1f72:	f0 91 3a 20 	lds	r31, 0x203A
    1f76:	30 97       	sbiw	r30, 0x00	; 0
    1f78:	09 f0       	breq	.+2      	; 0x1f7c <__vector_53+0x34>
    1f7a:	09 95       	icall
    1f7c:	ff 91       	pop	r31
    1f7e:	ef 91       	pop	r30
    1f80:	bf 91       	pop	r27
    1f82:	af 91       	pop	r26
    1f84:	9f 91       	pop	r25
    1f86:	8f 91       	pop	r24
    1f88:	7f 91       	pop	r23
    1f8a:	6f 91       	pop	r22
    1f8c:	5f 91       	pop	r21
    1f8e:	4f 91       	pop	r20
    1f90:	3f 91       	pop	r19
    1f92:	2f 91       	pop	r18
    1f94:	0f 90       	pop	r0
    1f96:	0b be       	out	0x3b, r0	; 59
    1f98:	0f 90       	pop	r0
    1f9a:	0f be       	out	0x3f, r0	; 63
    1f9c:	0f 90       	pop	r0
    1f9e:	1f 90       	pop	r1
    1fa0:	18 95       	reti

00001fa2 <__vector_54>:
    1fa2:	1f 92       	push	r1
    1fa4:	0f 92       	push	r0
    1fa6:	0f b6       	in	r0, 0x3f	; 63
    1fa8:	0f 92       	push	r0
    1faa:	11 24       	eor	r1, r1
    1fac:	0b b6       	in	r0, 0x3b	; 59
    1fae:	0f 92       	push	r0
    1fb0:	2f 93       	push	r18
    1fb2:	3f 93       	push	r19
    1fb4:	4f 93       	push	r20
    1fb6:	5f 93       	push	r21
    1fb8:	6f 93       	push	r22
    1fba:	7f 93       	push	r23
    1fbc:	8f 93       	push	r24
    1fbe:	9f 93       	push	r25
    1fc0:	af 93       	push	r26
    1fc2:	bf 93       	push	r27
    1fc4:	ef 93       	push	r30
    1fc6:	ff 93       	push	r31
    1fc8:	e0 91 37 20 	lds	r30, 0x2037
    1fcc:	f0 91 38 20 	lds	r31, 0x2038
    1fd0:	30 97       	sbiw	r30, 0x00	; 0
    1fd2:	09 f0       	breq	.+2      	; 0x1fd6 <__vector_54+0x34>
    1fd4:	09 95       	icall
    1fd6:	ff 91       	pop	r31
    1fd8:	ef 91       	pop	r30
    1fda:	bf 91       	pop	r27
    1fdc:	af 91       	pop	r26
    1fde:	9f 91       	pop	r25
    1fe0:	8f 91       	pop	r24
    1fe2:	7f 91       	pop	r23
    1fe4:	6f 91       	pop	r22
    1fe6:	5f 91       	pop	r21
    1fe8:	4f 91       	pop	r20
    1fea:	3f 91       	pop	r19
    1fec:	2f 91       	pop	r18
    1fee:	0f 90       	pop	r0
    1ff0:	0b be       	out	0x3b, r0	; 59
    1ff2:	0f 90       	pop	r0
    1ff4:	0f be       	out	0x3f, r0	; 63
    1ff6:	0f 90       	pop	r0
    1ff8:	1f 90       	pop	r1
    1ffa:	18 95       	reti

00001ffc <__vector_55>:
    1ffc:	1f 92       	push	r1
    1ffe:	0f 92       	push	r0
    2000:	0f b6       	in	r0, 0x3f	; 63
    2002:	0f 92       	push	r0
    2004:	11 24       	eor	r1, r1
    2006:	0b b6       	in	r0, 0x3b	; 59
    2008:	0f 92       	push	r0
    200a:	2f 93       	push	r18
    200c:	3f 93       	push	r19
    200e:	4f 93       	push	r20
    2010:	5f 93       	push	r21
    2012:	6f 93       	push	r22
    2014:	7f 93       	push	r23
    2016:	8f 93       	push	r24
    2018:	9f 93       	push	r25
    201a:	af 93       	push	r26
    201c:	bf 93       	push	r27
    201e:	ef 93       	push	r30
    2020:	ff 93       	push	r31
    2022:	e0 91 35 20 	lds	r30, 0x2035
    2026:	f0 91 36 20 	lds	r31, 0x2036
    202a:	30 97       	sbiw	r30, 0x00	; 0
    202c:	09 f0       	breq	.+2      	; 0x2030 <__vector_55+0x34>
    202e:	09 95       	icall
    2030:	ff 91       	pop	r31
    2032:	ef 91       	pop	r30
    2034:	bf 91       	pop	r27
    2036:	af 91       	pop	r26
    2038:	9f 91       	pop	r25
    203a:	8f 91       	pop	r24
    203c:	7f 91       	pop	r23
    203e:	6f 91       	pop	r22
    2040:	5f 91       	pop	r21
    2042:	4f 91       	pop	r20
    2044:	3f 91       	pop	r19
    2046:	2f 91       	pop	r18
    2048:	0f 90       	pop	r0
    204a:	0b be       	out	0x3b, r0	; 59
    204c:	0f 90       	pop	r0
    204e:	0f be       	out	0x3f, r0	; 63
    2050:	0f 90       	pop	r0
    2052:	1f 90       	pop	r1
    2054:	18 95       	reti

00002056 <__vector_56>:
    2056:	1f 92       	push	r1
    2058:	0f 92       	push	r0
    205a:	0f b6       	in	r0, 0x3f	; 63
    205c:	0f 92       	push	r0
    205e:	11 24       	eor	r1, r1
    2060:	0b b6       	in	r0, 0x3b	; 59
    2062:	0f 92       	push	r0
    2064:	2f 93       	push	r18
    2066:	3f 93       	push	r19
    2068:	4f 93       	push	r20
    206a:	5f 93       	push	r21
    206c:	6f 93       	push	r22
    206e:	7f 93       	push	r23
    2070:	8f 93       	push	r24
    2072:	9f 93       	push	r25
    2074:	af 93       	push	r26
    2076:	bf 93       	push	r27
    2078:	ef 93       	push	r30
    207a:	ff 93       	push	r31
    207c:	e0 91 33 20 	lds	r30, 0x2033
    2080:	f0 91 34 20 	lds	r31, 0x2034
    2084:	30 97       	sbiw	r30, 0x00	; 0
    2086:	09 f0       	breq	.+2      	; 0x208a <__vector_56+0x34>
    2088:	09 95       	icall
    208a:	ff 91       	pop	r31
    208c:	ef 91       	pop	r30
    208e:	bf 91       	pop	r27
    2090:	af 91       	pop	r26
    2092:	9f 91       	pop	r25
    2094:	8f 91       	pop	r24
    2096:	7f 91       	pop	r23
    2098:	6f 91       	pop	r22
    209a:	5f 91       	pop	r21
    209c:	4f 91       	pop	r20
    209e:	3f 91       	pop	r19
    20a0:	2f 91       	pop	r18
    20a2:	0f 90       	pop	r0
    20a4:	0b be       	out	0x3b, r0	; 59
    20a6:	0f 90       	pop	r0
    20a8:	0f be       	out	0x3f, r0	; 63
    20aa:	0f 90       	pop	r0
    20ac:	1f 90       	pop	r1
    20ae:	18 95       	reti

000020b0 <__vector_108>:
    20b0:	1f 92       	push	r1
    20b2:	0f 92       	push	r0
    20b4:	0f b6       	in	r0, 0x3f	; 63
    20b6:	0f 92       	push	r0
    20b8:	11 24       	eor	r1, r1
    20ba:	0b b6       	in	r0, 0x3b	; 59
    20bc:	0f 92       	push	r0
    20be:	2f 93       	push	r18
    20c0:	3f 93       	push	r19
    20c2:	4f 93       	push	r20
    20c4:	5f 93       	push	r21
    20c6:	6f 93       	push	r22
    20c8:	7f 93       	push	r23
    20ca:	8f 93       	push	r24
    20cc:	9f 93       	push	r25
    20ce:	af 93       	push	r26
    20d0:	bf 93       	push	r27
    20d2:	ef 93       	push	r30
    20d4:	ff 93       	push	r31
    20d6:	e0 91 31 20 	lds	r30, 0x2031
    20da:	f0 91 32 20 	lds	r31, 0x2032
    20de:	30 97       	sbiw	r30, 0x00	; 0
    20e0:	09 f0       	breq	.+2      	; 0x20e4 <__vector_108+0x34>
    20e2:	09 95       	icall
    20e4:	ff 91       	pop	r31
    20e6:	ef 91       	pop	r30
    20e8:	bf 91       	pop	r27
    20ea:	af 91       	pop	r26
    20ec:	9f 91       	pop	r25
    20ee:	8f 91       	pop	r24
    20f0:	7f 91       	pop	r23
    20f2:	6f 91       	pop	r22
    20f4:	5f 91       	pop	r21
    20f6:	4f 91       	pop	r20
    20f8:	3f 91       	pop	r19
    20fa:	2f 91       	pop	r18
    20fc:	0f 90       	pop	r0
    20fe:	0b be       	out	0x3b, r0	; 59
    2100:	0f 90       	pop	r0
    2102:	0f be       	out	0x3f, r0	; 63
    2104:	0f 90       	pop	r0
    2106:	1f 90       	pop	r1
    2108:	18 95       	reti

0000210a <__vector_109>:
    210a:	1f 92       	push	r1
    210c:	0f 92       	push	r0
    210e:	0f b6       	in	r0, 0x3f	; 63
    2110:	0f 92       	push	r0
    2112:	11 24       	eor	r1, r1
    2114:	0b b6       	in	r0, 0x3b	; 59
    2116:	0f 92       	push	r0
    2118:	2f 93       	push	r18
    211a:	3f 93       	push	r19
    211c:	4f 93       	push	r20
    211e:	5f 93       	push	r21
    2120:	6f 93       	push	r22
    2122:	7f 93       	push	r23
    2124:	8f 93       	push	r24
    2126:	9f 93       	push	r25
    2128:	af 93       	push	r26
    212a:	bf 93       	push	r27
    212c:	ef 93       	push	r30
    212e:	ff 93       	push	r31
    2130:	e0 91 2f 20 	lds	r30, 0x202F
    2134:	f0 91 30 20 	lds	r31, 0x2030
    2138:	30 97       	sbiw	r30, 0x00	; 0
    213a:	09 f0       	breq	.+2      	; 0x213e <__vector_109+0x34>
    213c:	09 95       	icall
    213e:	ff 91       	pop	r31
    2140:	ef 91       	pop	r30
    2142:	bf 91       	pop	r27
    2144:	af 91       	pop	r26
    2146:	9f 91       	pop	r25
    2148:	8f 91       	pop	r24
    214a:	7f 91       	pop	r23
    214c:	6f 91       	pop	r22
    214e:	5f 91       	pop	r21
    2150:	4f 91       	pop	r20
    2152:	3f 91       	pop	r19
    2154:	2f 91       	pop	r18
    2156:	0f 90       	pop	r0
    2158:	0b be       	out	0x3b, r0	; 59
    215a:	0f 90       	pop	r0
    215c:	0f be       	out	0x3f, r0	; 63
    215e:	0f 90       	pop	r0
    2160:	1f 90       	pop	r1
    2162:	18 95       	reti

00002164 <__vector_110>:
    2164:	1f 92       	push	r1
    2166:	0f 92       	push	r0
    2168:	0f b6       	in	r0, 0x3f	; 63
    216a:	0f 92       	push	r0
    216c:	11 24       	eor	r1, r1
    216e:	0b b6       	in	r0, 0x3b	; 59
    2170:	0f 92       	push	r0
    2172:	2f 93       	push	r18
    2174:	3f 93       	push	r19
    2176:	4f 93       	push	r20
    2178:	5f 93       	push	r21
    217a:	6f 93       	push	r22
    217c:	7f 93       	push	r23
    217e:	8f 93       	push	r24
    2180:	9f 93       	push	r25
    2182:	af 93       	push	r26
    2184:	bf 93       	push	r27
    2186:	ef 93       	push	r30
    2188:	ff 93       	push	r31
    218a:	e0 91 2d 20 	lds	r30, 0x202D
    218e:	f0 91 2e 20 	lds	r31, 0x202E
    2192:	30 97       	sbiw	r30, 0x00	; 0
    2194:	09 f0       	breq	.+2      	; 0x2198 <__vector_110+0x34>
    2196:	09 95       	icall
    2198:	ff 91       	pop	r31
    219a:	ef 91       	pop	r30
    219c:	bf 91       	pop	r27
    219e:	af 91       	pop	r26
    21a0:	9f 91       	pop	r25
    21a2:	8f 91       	pop	r24
    21a4:	7f 91       	pop	r23
    21a6:	6f 91       	pop	r22
    21a8:	5f 91       	pop	r21
    21aa:	4f 91       	pop	r20
    21ac:	3f 91       	pop	r19
    21ae:	2f 91       	pop	r18
    21b0:	0f 90       	pop	r0
    21b2:	0b be       	out	0x3b, r0	; 59
    21b4:	0f 90       	pop	r0
    21b6:	0f be       	out	0x3f, r0	; 63
    21b8:	0f 90       	pop	r0
    21ba:	1f 90       	pop	r1
    21bc:	18 95       	reti

000021be <__vector_111>:
    21be:	1f 92       	push	r1
    21c0:	0f 92       	push	r0
    21c2:	0f b6       	in	r0, 0x3f	; 63
    21c4:	0f 92       	push	r0
    21c6:	11 24       	eor	r1, r1
    21c8:	0b b6       	in	r0, 0x3b	; 59
    21ca:	0f 92       	push	r0
    21cc:	2f 93       	push	r18
    21ce:	3f 93       	push	r19
    21d0:	4f 93       	push	r20
    21d2:	5f 93       	push	r21
    21d4:	6f 93       	push	r22
    21d6:	7f 93       	push	r23
    21d8:	8f 93       	push	r24
    21da:	9f 93       	push	r25
    21dc:	af 93       	push	r26
    21de:	bf 93       	push	r27
    21e0:	ef 93       	push	r30
    21e2:	ff 93       	push	r31
    21e4:	e0 91 2b 20 	lds	r30, 0x202B
    21e8:	f0 91 2c 20 	lds	r31, 0x202C
    21ec:	30 97       	sbiw	r30, 0x00	; 0
    21ee:	09 f0       	breq	.+2      	; 0x21f2 <__vector_111+0x34>
    21f0:	09 95       	icall
    21f2:	ff 91       	pop	r31
    21f4:	ef 91       	pop	r30
    21f6:	bf 91       	pop	r27
    21f8:	af 91       	pop	r26
    21fa:	9f 91       	pop	r25
    21fc:	8f 91       	pop	r24
    21fe:	7f 91       	pop	r23
    2200:	6f 91       	pop	r22
    2202:	5f 91       	pop	r21
    2204:	4f 91       	pop	r20
    2206:	3f 91       	pop	r19
    2208:	2f 91       	pop	r18
    220a:	0f 90       	pop	r0
    220c:	0b be       	out	0x3b, r0	; 59
    220e:	0f 90       	pop	r0
    2210:	0f be       	out	0x3f, r0	; 63
    2212:	0f 90       	pop	r0
    2214:	1f 90       	pop	r1
    2216:	18 95       	reti

00002218 <__vector_112>:
    2218:	1f 92       	push	r1
    221a:	0f 92       	push	r0
    221c:	0f b6       	in	r0, 0x3f	; 63
    221e:	0f 92       	push	r0
    2220:	11 24       	eor	r1, r1
    2222:	0b b6       	in	r0, 0x3b	; 59
    2224:	0f 92       	push	r0
    2226:	2f 93       	push	r18
    2228:	3f 93       	push	r19
    222a:	4f 93       	push	r20
    222c:	5f 93       	push	r21
    222e:	6f 93       	push	r22
    2230:	7f 93       	push	r23
    2232:	8f 93       	push	r24
    2234:	9f 93       	push	r25
    2236:	af 93       	push	r26
    2238:	bf 93       	push	r27
    223a:	ef 93       	push	r30
    223c:	ff 93       	push	r31
    223e:	e0 91 29 20 	lds	r30, 0x2029
    2242:	f0 91 2a 20 	lds	r31, 0x202A
    2246:	30 97       	sbiw	r30, 0x00	; 0
    2248:	09 f0       	breq	.+2      	; 0x224c <__vector_112+0x34>
    224a:	09 95       	icall
    224c:	ff 91       	pop	r31
    224e:	ef 91       	pop	r30
    2250:	bf 91       	pop	r27
    2252:	af 91       	pop	r26
    2254:	9f 91       	pop	r25
    2256:	8f 91       	pop	r24
    2258:	7f 91       	pop	r23
    225a:	6f 91       	pop	r22
    225c:	5f 91       	pop	r21
    225e:	4f 91       	pop	r20
    2260:	3f 91       	pop	r19
    2262:	2f 91       	pop	r18
    2264:	0f 90       	pop	r0
    2266:	0b be       	out	0x3b, r0	; 59
    2268:	0f 90       	pop	r0
    226a:	0f be       	out	0x3f, r0	; 63
    226c:	0f 90       	pop	r0
    226e:	1f 90       	pop	r1
    2270:	18 95       	reti

00002272 <__vector_113>:
    2272:	1f 92       	push	r1
    2274:	0f 92       	push	r0
    2276:	0f b6       	in	r0, 0x3f	; 63
    2278:	0f 92       	push	r0
    227a:	11 24       	eor	r1, r1
    227c:	0b b6       	in	r0, 0x3b	; 59
    227e:	0f 92       	push	r0
    2280:	2f 93       	push	r18
    2282:	3f 93       	push	r19
    2284:	4f 93       	push	r20
    2286:	5f 93       	push	r21
    2288:	6f 93       	push	r22
    228a:	7f 93       	push	r23
    228c:	8f 93       	push	r24
    228e:	9f 93       	push	r25
    2290:	af 93       	push	r26
    2292:	bf 93       	push	r27
    2294:	ef 93       	push	r30
    2296:	ff 93       	push	r31
    2298:	e0 91 27 20 	lds	r30, 0x2027
    229c:	f0 91 28 20 	lds	r31, 0x2028
    22a0:	30 97       	sbiw	r30, 0x00	; 0
    22a2:	09 f0       	breq	.+2      	; 0x22a6 <__vector_113+0x34>
    22a4:	09 95       	icall
    22a6:	ff 91       	pop	r31
    22a8:	ef 91       	pop	r30
    22aa:	bf 91       	pop	r27
    22ac:	af 91       	pop	r26
    22ae:	9f 91       	pop	r25
    22b0:	8f 91       	pop	r24
    22b2:	7f 91       	pop	r23
    22b4:	6f 91       	pop	r22
    22b6:	5f 91       	pop	r21
    22b8:	4f 91       	pop	r20
    22ba:	3f 91       	pop	r19
    22bc:	2f 91       	pop	r18
    22be:	0f 90       	pop	r0
    22c0:	0b be       	out	0x3b, r0	; 59
    22c2:	0f 90       	pop	r0
    22c4:	0f be       	out	0x3f, r0	; 63
    22c6:	0f 90       	pop	r0
    22c8:	1f 90       	pop	r1
    22ca:	18 95       	reti

000022cc <tc_enable>:
    22cc:	cf 93       	push	r28
    22ce:	cf b7       	in	r28, 0x3f	; 63
    22d0:	f8 94       	cli
    22d2:	28 2f       	mov	r18, r24
    22d4:	39 2f       	mov	r19, r25
    22d6:	21 15       	cp	r18, r1
    22d8:	88 e0       	ldi	r24, 0x08	; 8
    22da:	38 07       	cpc	r19, r24
    22dc:	59 f4       	brne	.+22     	; 0x22f4 <tc_enable+0x28>
    22de:	61 e0       	ldi	r22, 0x01	; 1
    22e0:	83 e0       	ldi	r24, 0x03	; 3
    22e2:	90 e0       	ldi	r25, 0x00	; 0
    22e4:	0e 94 26 09 	call	0x124c	; 0x124c <sysclk_enable_module>
    22e8:	64 e0       	ldi	r22, 0x04	; 4
    22ea:	83 e0       	ldi	r24, 0x03	; 3
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	0e 94 26 09 	call	0x124c	; 0x124c <sysclk_enable_module>
    22f2:	5b c0       	rjmp	.+182    	; 0x23aa <tc_enable+0xde>
    22f4:	20 34       	cpi	r18, 0x40	; 64
    22f6:	88 e0       	ldi	r24, 0x08	; 8
    22f8:	38 07       	cpc	r19, r24
    22fa:	59 f4       	brne	.+22     	; 0x2312 <tc_enable+0x46>
    22fc:	62 e0       	ldi	r22, 0x02	; 2
    22fe:	83 e0       	ldi	r24, 0x03	; 3
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	0e 94 26 09 	call	0x124c	; 0x124c <sysclk_enable_module>
    2306:	64 e0       	ldi	r22, 0x04	; 4
    2308:	83 e0       	ldi	r24, 0x03	; 3
    230a:	90 e0       	ldi	r25, 0x00	; 0
    230c:	0e 94 26 09 	call	0x124c	; 0x124c <sysclk_enable_module>
    2310:	4c c0       	rjmp	.+152    	; 0x23aa <tc_enable+0xde>
    2312:	21 15       	cp	r18, r1
    2314:	89 e0       	ldi	r24, 0x09	; 9
    2316:	38 07       	cpc	r19, r24
    2318:	59 f4       	brne	.+22     	; 0x2330 <tc_enable+0x64>
    231a:	61 e0       	ldi	r22, 0x01	; 1
    231c:	84 e0       	ldi	r24, 0x04	; 4
    231e:	90 e0       	ldi	r25, 0x00	; 0
    2320:	0e 94 26 09 	call	0x124c	; 0x124c <sysclk_enable_module>
    2324:	64 e0       	ldi	r22, 0x04	; 4
    2326:	84 e0       	ldi	r24, 0x04	; 4
    2328:	90 e0       	ldi	r25, 0x00	; 0
    232a:	0e 94 26 09 	call	0x124c	; 0x124c <sysclk_enable_module>
    232e:	3d c0       	rjmp	.+122    	; 0x23aa <tc_enable+0xde>
    2330:	20 34       	cpi	r18, 0x40	; 64
    2332:	89 e0       	ldi	r24, 0x09	; 9
    2334:	38 07       	cpc	r19, r24
    2336:	59 f4       	brne	.+22     	; 0x234e <tc_enable+0x82>
    2338:	62 e0       	ldi	r22, 0x02	; 2
    233a:	84 e0       	ldi	r24, 0x04	; 4
    233c:	90 e0       	ldi	r25, 0x00	; 0
    233e:	0e 94 26 09 	call	0x124c	; 0x124c <sysclk_enable_module>
    2342:	64 e0       	ldi	r22, 0x04	; 4
    2344:	84 e0       	ldi	r24, 0x04	; 4
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	0e 94 26 09 	call	0x124c	; 0x124c <sysclk_enable_module>
    234c:	2e c0       	rjmp	.+92     	; 0x23aa <tc_enable+0xde>
    234e:	21 15       	cp	r18, r1
    2350:	8a e0       	ldi	r24, 0x0A	; 10
    2352:	38 07       	cpc	r19, r24
    2354:	59 f4       	brne	.+22     	; 0x236c <tc_enable+0xa0>
    2356:	61 e0       	ldi	r22, 0x01	; 1
    2358:	85 e0       	ldi	r24, 0x05	; 5
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	0e 94 26 09 	call	0x124c	; 0x124c <sysclk_enable_module>
    2360:	64 e0       	ldi	r22, 0x04	; 4
    2362:	85 e0       	ldi	r24, 0x05	; 5
    2364:	90 e0       	ldi	r25, 0x00	; 0
    2366:	0e 94 26 09 	call	0x124c	; 0x124c <sysclk_enable_module>
    236a:	1f c0       	rjmp	.+62     	; 0x23aa <tc_enable+0xde>
    236c:	20 34       	cpi	r18, 0x40	; 64
    236e:	8a e0       	ldi	r24, 0x0A	; 10
    2370:	38 07       	cpc	r19, r24
    2372:	59 f4       	brne	.+22     	; 0x238a <tc_enable+0xbe>
    2374:	62 e0       	ldi	r22, 0x02	; 2
    2376:	85 e0       	ldi	r24, 0x05	; 5
    2378:	90 e0       	ldi	r25, 0x00	; 0
    237a:	0e 94 26 09 	call	0x124c	; 0x124c <sysclk_enable_module>
    237e:	64 e0       	ldi	r22, 0x04	; 4
    2380:	85 e0       	ldi	r24, 0x05	; 5
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	0e 94 26 09 	call	0x124c	; 0x124c <sysclk_enable_module>
    2388:	10 c0       	rjmp	.+32     	; 0x23aa <tc_enable+0xde>
    238a:	21 15       	cp	r18, r1
    238c:	3b 40       	sbci	r19, 0x0B	; 11
    238e:	59 f4       	brne	.+22     	; 0x23a6 <tc_enable+0xda>
    2390:	61 e0       	ldi	r22, 0x01	; 1
    2392:	86 e0       	ldi	r24, 0x06	; 6
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	0e 94 26 09 	call	0x124c	; 0x124c <sysclk_enable_module>
    239a:	64 e0       	ldi	r22, 0x04	; 4
    239c:	86 e0       	ldi	r24, 0x06	; 6
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	0e 94 26 09 	call	0x124c	; 0x124c <sysclk_enable_module>
    23a4:	02 c0       	rjmp	.+4      	; 0x23aa <tc_enable+0xde>
    23a6:	cf bf       	out	0x3f, r28	; 63
    23a8:	09 c0       	rjmp	.+18     	; 0x23bc <tc_enable+0xf0>
    23aa:	8f b7       	in	r24, 0x3f	; 63
    23ac:	f8 94       	cli
    23ae:	ee e3       	ldi	r30, 0x3E	; 62
    23b0:	f2 e2       	ldi	r31, 0x22	; 34
    23b2:	90 81       	ld	r25, Z
    23b4:	9f 5f       	subi	r25, 0xFF	; 255
    23b6:	90 83       	st	Z, r25
    23b8:	8f bf       	out	0x3f, r24	; 63
    23ba:	cf bf       	out	0x3f, r28	; 63
    23bc:	cf 91       	pop	r28
    23be:	08 95       	ret

000023c0 <tc_set_overflow_interrupt_callback>:

void tc_set_overflow_interrupt_callback(volatile void *tc,
		tc_callback_t callback)
{
#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    23c0:	81 15       	cp	r24, r1
    23c2:	28 e0       	ldi	r18, 0x08	; 8
    23c4:	92 07       	cpc	r25, r18
    23c6:	29 f4       	brne	.+10     	; 0x23d2 <tc_set_overflow_interrupt_callback+0x12>
		tc_tcc0_ovf_callback = callback;
    23c8:	60 93 6d 20 	sts	0x206D, r22
    23cc:	70 93 6e 20 	sts	0x206E, r23
    23d0:	08 95       	ret
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    23d2:	80 34       	cpi	r24, 0x40	; 64
    23d4:	28 e0       	ldi	r18, 0x08	; 8
    23d6:	92 07       	cpc	r25, r18
    23d8:	29 f4       	brne	.+10     	; 0x23e4 <tc_set_overflow_interrupt_callback+0x24>
		tc_tcc1_ovf_callback = callback;
    23da:	60 93 61 20 	sts	0x2061, r22
    23de:	70 93 62 20 	sts	0x2062, r23
    23e2:	08 95       	ret
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    23e4:	81 15       	cp	r24, r1
    23e6:	29 e0       	ldi	r18, 0x09	; 9
    23e8:	92 07       	cpc	r25, r18
    23ea:	29 f4       	brne	.+10     	; 0x23f6 <tc_set_overflow_interrupt_callback+0x36>
		tc_tcd0_ovf_callback = callback;
    23ec:	60 93 59 20 	sts	0x2059, r22
    23f0:	70 93 5a 20 	sts	0x205A, r23
    23f4:	08 95       	ret
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    23f6:	80 34       	cpi	r24, 0x40	; 64
    23f8:	29 e0       	ldi	r18, 0x09	; 9
    23fa:	92 07       	cpc	r25, r18
    23fc:	29 f4       	brne	.+10     	; 0x2408 <tc_set_overflow_interrupt_callback+0x48>
		tc_tcd1_ovf_callback = callback;
    23fe:	60 93 4d 20 	sts	0x204D, r22
    2402:	70 93 4e 20 	sts	0x204E, r23
    2406:	08 95       	ret
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    2408:	81 15       	cp	r24, r1
    240a:	2a e0       	ldi	r18, 0x0A	; 10
    240c:	92 07       	cpc	r25, r18
    240e:	29 f4       	brne	.+10     	; 0x241a <tc_set_overflow_interrupt_callback+0x5a>
		tc_tce0_ovf_callback = callback;
    2410:	60 93 45 20 	sts	0x2045, r22
    2414:	70 93 46 20 	sts	0x2046, r23
    2418:	08 95       	ret
	} else
#endif
#ifdef TCE1
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
    241a:	80 34       	cpi	r24, 0x40	; 64
    241c:	2a e0       	ldi	r18, 0x0A	; 10
    241e:	92 07       	cpc	r25, r18
    2420:	29 f4       	brne	.+10     	; 0x242c <tc_set_overflow_interrupt_callback+0x6c>
		tc_tce1_ovf_callback = callback;
    2422:	60 93 39 20 	sts	0x2039, r22
    2426:	70 93 3a 20 	sts	0x203A, r23
    242a:	08 95       	ret
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    242c:	81 15       	cp	r24, r1
    242e:	9b 40       	sbci	r25, 0x0B	; 11
    2430:	21 f4       	brne	.+8      	; 0x243a <tc_set_overflow_interrupt_callback+0x7a>
		tc_tcf0_ovf_callback = callback;
    2432:	60 93 31 20 	sts	0x2031, r22
    2436:	70 93 32 20 	sts	0x2032, r23
    243a:	08 95       	ret

0000243c <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    243c:	4f 92       	push	r4
    243e:	5f 92       	push	r5
    2440:	6f 92       	push	r6
    2442:	7f 92       	push	r7
    2444:	8f 92       	push	r8
    2446:	9f 92       	push	r9
    2448:	af 92       	push	r10
    244a:	bf 92       	push	r11
    244c:	cf 92       	push	r12
    244e:	df 92       	push	r13
    2450:	ef 92       	push	r14
    2452:	ff 92       	push	r15
    2454:	0f 93       	push	r16
    2456:	1f 93       	push	r17
    2458:	cf 93       	push	r28
    245a:	df 93       	push	r29
    245c:	ec 01       	movw	r28, r24
    245e:	4a 01       	movw	r8, r20
    2460:	5b 01       	movw	r10, r22
    2462:	28 01       	movw	r4, r16
    2464:	39 01       	movw	r6, r18

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    2466:	d9 01       	movw	r26, r18
    2468:	c8 01       	movw	r24, r16
    246a:	68 94       	set
    246c:	12 f8       	bld	r1, 2
    246e:	b6 95       	lsr	r27
    2470:	a7 95       	ror	r26
    2472:	97 95       	ror	r25
    2474:	87 95       	ror	r24
    2476:	16 94       	lsr	r1
    2478:	d1 f7       	brne	.-12     	; 0x246e <usart_set_baudrate+0x32>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    247a:	b9 01       	movw	r22, r18
    247c:	a8 01       	movw	r20, r16
    247e:	03 2e       	mov	r0, r19
    2480:	36 e1       	ldi	r19, 0x16	; 22
    2482:	76 95       	lsr	r23
    2484:	67 95       	ror	r22
    2486:	57 95       	ror	r21
    2488:	47 95       	ror	r20
    248a:	3a 95       	dec	r19
    248c:	d1 f7       	brne	.-12     	; 0x2482 <usart_set_baudrate+0x46>
    248e:	30 2d       	mov	r19, r0

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    2490:	2c 81       	ldd	r18, Y+4	; 0x04
    2492:	22 fd       	sbrc	r18, 2
    2494:	08 c0       	rjmp	.+16     	; 0x24a6 <usart_set_baudrate+0x6a>
		max_rate /= 2;
    2496:	b6 95       	lsr	r27
    2498:	a7 95       	ror	r26
    249a:	97 95       	ror	r25
    249c:	87 95       	ror	r24
		min_rate /= 2;
    249e:	76 95       	lsr	r23
    24a0:	67 95       	ror	r22
    24a2:	57 95       	ror	r21
    24a4:	47 95       	ror	r20
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    24a6:	88 15       	cp	r24, r8
    24a8:	99 05       	cpc	r25, r9
    24aa:	aa 05       	cpc	r26, r10
    24ac:	bb 05       	cpc	r27, r11
    24ae:	08 f4       	brcc	.+2      	; 0x24b2 <usart_set_baudrate+0x76>
    24b0:	a2 c0       	rjmp	.+324    	; 0x25f6 <usart_set_baudrate+0x1ba>
    24b2:	84 16       	cp	r8, r20
    24b4:	95 06       	cpc	r9, r21
    24b6:	a6 06       	cpc	r10, r22
    24b8:	b7 06       	cpc	r11, r23
    24ba:	08 f4       	brcc	.+2      	; 0x24be <usart_set_baudrate+0x82>
    24bc:	9e c0       	rjmp	.+316    	; 0x25fa <usart_set_baudrate+0x1be>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    24be:	8c 81       	ldd	r24, Y+4	; 0x04
    24c0:	82 fd       	sbrc	r24, 2
    24c2:	04 c0       	rjmp	.+8      	; 0x24cc <usart_set_baudrate+0x90>
		baud *= 2;
    24c4:	88 0c       	add	r8, r8
    24c6:	99 1c       	adc	r9, r9
    24c8:	aa 1c       	adc	r10, r10
    24ca:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    24cc:	c3 01       	movw	r24, r6
    24ce:	b2 01       	movw	r22, r4
    24d0:	a5 01       	movw	r20, r10
    24d2:	94 01       	movw	r18, r8
    24d4:	38 d2       	rcall	.+1136   	; 0x2946 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    24d6:	2f 3f       	cpi	r18, 0xFF	; 255
    24d8:	31 05       	cpc	r19, r1
    24da:	41 05       	cpc	r20, r1
    24dc:	51 05       	cpc	r21, r1
    24de:	08 f4       	brcc	.+2      	; 0x24e2 <usart_set_baudrate+0xa6>
    24e0:	8e c0       	rjmp	.+284    	; 0x25fe <usart_set_baudrate+0x1c2>
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		baud *= 2;
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
    24e2:	c1 2c       	mov	r12, r1
    24e4:	d1 2c       	mov	r13, r1
    24e6:	76 01       	movw	r14, r12
    24e8:	ca 94       	dec	r12
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    24ea:	19 ef       	ldi	r17, 0xF9	; 249
    24ec:	05 c0       	rjmp	.+10     	; 0x24f8 <usart_set_baudrate+0xbc>
		if (ratio < limit) {
    24ee:	2c 15       	cp	r18, r12
    24f0:	3d 05       	cpc	r19, r13
    24f2:	4e 05       	cpc	r20, r14
    24f4:	5f 05       	cpc	r21, r15
    24f6:	68 f0       	brcs	.+26     	; 0x2512 <usart_set_baudrate+0xd6>
			break;
		}

		limit <<= 1;
    24f8:	cc 0c       	add	r12, r12
    24fa:	dd 1c       	adc	r13, r13
    24fc:	ee 1c       	adc	r14, r14
    24fe:	ff 1c       	adc	r15, r15

		if (exp < -3) {
    2500:	1d 3f       	cpi	r17, 0xFD	; 253
    2502:	14 f4       	brge	.+4      	; 0x2508 <usart_set_baudrate+0xcc>
			limit |= 1;
    2504:	68 94       	set
    2506:	c0 f8       	bld	r12, 0

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    2508:	1f 5f       	subi	r17, 0xFF	; 255
    250a:	17 30       	cpi	r17, 0x07	; 7
    250c:	81 f7       	brne	.-32     	; 0x24ee <usart_set_baudrate+0xb2>
    250e:	21 2f       	mov	r18, r17
    2510:	4e c0       	rjmp	.+156    	; 0x25ae <usart_set_baudrate+0x172>
    2512:	21 2f       	mov	r18, r17
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    2514:	11 23       	and	r17, r17
    2516:	0c f0       	brlt	.+2      	; 0x251a <usart_set_baudrate+0xde>
    2518:	4a c0       	rjmp	.+148    	; 0x25ae <usart_set_baudrate+0x172>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    251a:	d5 01       	movw	r26, r10
    251c:	c4 01       	movw	r24, r8
    251e:	88 0f       	add	r24, r24
    2520:	99 1f       	adc	r25, r25
    2522:	aa 1f       	adc	r26, r26
    2524:	bb 1f       	adc	r27, r27
    2526:	88 0f       	add	r24, r24
    2528:	99 1f       	adc	r25, r25
    252a:	aa 1f       	adc	r26, r26
    252c:	bb 1f       	adc	r27, r27
    252e:	88 0f       	add	r24, r24
    2530:	99 1f       	adc	r25, r25
    2532:	aa 1f       	adc	r26, r26
    2534:	bb 1f       	adc	r27, r27
    2536:	48 1a       	sub	r4, r24
    2538:	59 0a       	sbc	r5, r25
    253a:	6a 0a       	sbc	r6, r26
    253c:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    253e:	1e 3f       	cpi	r17, 0xFE	; 254
    2540:	ec f4       	brge	.+58     	; 0x257c <usart_set_baudrate+0x140>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    2542:	6d ef       	ldi	r22, 0xFD	; 253
    2544:	7f ef       	ldi	r23, 0xFF	; 255
    2546:	61 1b       	sub	r22, r17
    2548:	71 09       	sbc	r23, r1
    254a:	17 fd       	sbrc	r17, 7
    254c:	73 95       	inc	r23
    254e:	04 c0       	rjmp	.+8      	; 0x2558 <usart_set_baudrate+0x11c>
    2550:	44 0c       	add	r4, r4
    2552:	55 1c       	adc	r5, r5
    2554:	66 1c       	adc	r6, r6
    2556:	77 1c       	adc	r7, r7
    2558:	6a 95       	dec	r22
    255a:	d2 f7       	brpl	.-12     	; 0x2550 <usart_set_baudrate+0x114>
    255c:	d5 01       	movw	r26, r10
    255e:	c4 01       	movw	r24, r8
    2560:	b6 95       	lsr	r27
    2562:	a7 95       	ror	r26
    2564:	97 95       	ror	r25
    2566:	87 95       	ror	r24
    2568:	bc 01       	movw	r22, r24
    256a:	cd 01       	movw	r24, r26
    256c:	64 0d       	add	r22, r4
    256e:	75 1d       	adc	r23, r5
    2570:	86 1d       	adc	r24, r6
    2572:	97 1d       	adc	r25, r7
    2574:	a5 01       	movw	r20, r10
    2576:	94 01       	movw	r18, r8
    2578:	e6 d1       	rcall	.+972    	; 0x2946 <__udivmodsi4>
    257a:	34 c0       	rjmp	.+104    	; 0x25e4 <usart_set_baudrate+0x1a8>
		} else {
			baud <<= exp + 3;
    257c:	23 e0       	ldi	r18, 0x03	; 3
    257e:	21 0f       	add	r18, r17
    2580:	d5 01       	movw	r26, r10
    2582:	c4 01       	movw	r24, r8
    2584:	04 c0       	rjmp	.+8      	; 0x258e <usart_set_baudrate+0x152>
    2586:	88 0f       	add	r24, r24
    2588:	99 1f       	adc	r25, r25
    258a:	aa 1f       	adc	r26, r26
    258c:	bb 1f       	adc	r27, r27
    258e:	2a 95       	dec	r18
    2590:	d2 f7       	brpl	.-12     	; 0x2586 <usart_set_baudrate+0x14a>
    2592:	9c 01       	movw	r18, r24
    2594:	ad 01       	movw	r20, r26
			div = (cpu_hz + baud / 2) / baud;
    2596:	b6 95       	lsr	r27
    2598:	a7 95       	ror	r26
    259a:	97 95       	ror	r25
    259c:	87 95       	ror	r24
    259e:	bc 01       	movw	r22, r24
    25a0:	cd 01       	movw	r24, r26
    25a2:	64 0d       	add	r22, r4
    25a4:	75 1d       	adc	r23, r5
    25a6:	86 1d       	adc	r24, r6
    25a8:	97 1d       	adc	r25, r7
    25aa:	cd d1       	rcall	.+922    	; 0x2946 <__udivmodsi4>
    25ac:	1b c0       	rjmp	.+54     	; 0x25e4 <usart_set_baudrate+0x1a8>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    25ae:	2d 5f       	subi	r18, 0xFD	; 253
    25b0:	d5 01       	movw	r26, r10
    25b2:	c4 01       	movw	r24, r8
    25b4:	04 c0       	rjmp	.+8      	; 0x25be <usart_set_baudrate+0x182>
    25b6:	88 0f       	add	r24, r24
    25b8:	99 1f       	adc	r25, r25
    25ba:	aa 1f       	adc	r26, r26
    25bc:	bb 1f       	adc	r27, r27
    25be:	2a 95       	dec	r18
    25c0:	d2 f7       	brpl	.-12     	; 0x25b6 <usart_set_baudrate+0x17a>
    25c2:	9c 01       	movw	r18, r24
    25c4:	ad 01       	movw	r20, r26
		div = (cpu_hz + baud / 2) / baud - 1;
    25c6:	b6 95       	lsr	r27
    25c8:	a7 95       	ror	r26
    25ca:	97 95       	ror	r25
    25cc:	87 95       	ror	r24
    25ce:	bc 01       	movw	r22, r24
    25d0:	cd 01       	movw	r24, r26
    25d2:	64 0d       	add	r22, r4
    25d4:	75 1d       	adc	r23, r5
    25d6:	86 1d       	adc	r24, r6
    25d8:	97 1d       	adc	r25, r7
    25da:	b5 d1       	rcall	.+874    	; 0x2946 <__udivmodsi4>
    25dc:	21 50       	subi	r18, 0x01	; 1
    25de:	31 09       	sbc	r19, r1
    25e0:	41 09       	sbc	r20, r1
    25e2:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    25e4:	83 2f       	mov	r24, r19
    25e6:	8f 70       	andi	r24, 0x0F	; 15
    25e8:	12 95       	swap	r17
    25ea:	10 7f       	andi	r17, 0xF0	; 240
    25ec:	18 2b       	or	r17, r24
    25ee:	1f 83       	std	Y+7, r17	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    25f0:	2e 83       	std	Y+6, r18	; 0x06

	return true;
    25f2:	81 e0       	ldi	r24, 0x01	; 1
    25f4:	18 c0       	rjmp	.+48     	; 0x2626 <usart_set_baudrate+0x1ea>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    25f6:	80 e0       	ldi	r24, 0x00	; 0
    25f8:	16 c0       	rjmp	.+44     	; 0x2626 <usart_set_baudrate+0x1ea>
    25fa:	80 e0       	ldi	r24, 0x00	; 0
    25fc:	14 c0       	rjmp	.+40     	; 0x2626 <usart_set_baudrate+0x1ea>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    25fe:	d5 01       	movw	r26, r10
    2600:	c4 01       	movw	r24, r8
    2602:	88 0f       	add	r24, r24
    2604:	99 1f       	adc	r25, r25
    2606:	aa 1f       	adc	r26, r26
    2608:	bb 1f       	adc	r27, r27
    260a:	88 0f       	add	r24, r24
    260c:	99 1f       	adc	r25, r25
    260e:	aa 1f       	adc	r26, r26
    2610:	bb 1f       	adc	r27, r27
    2612:	88 0f       	add	r24, r24
    2614:	99 1f       	adc	r25, r25
    2616:	aa 1f       	adc	r26, r26
    2618:	bb 1f       	adc	r27, r27
    261a:	48 1a       	sub	r4, r24
    261c:	59 0a       	sbc	r5, r25
    261e:	6a 0a       	sbc	r6, r26
    2620:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    2622:	19 ef       	ldi	r17, 0xF9	; 249
    2624:	8e cf       	rjmp	.-228    	; 0x2542 <usart_set_baudrate+0x106>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    2626:	df 91       	pop	r29
    2628:	cf 91       	pop	r28
    262a:	1f 91       	pop	r17
    262c:	0f 91       	pop	r16
    262e:	ff 90       	pop	r15
    2630:	ef 90       	pop	r14
    2632:	df 90       	pop	r13
    2634:	cf 90       	pop	r12
    2636:	bf 90       	pop	r11
    2638:	af 90       	pop	r10
    263a:	9f 90       	pop	r9
    263c:	8f 90       	pop	r8
    263e:	7f 90       	pop	r7
    2640:	6f 90       	pop	r6
    2642:	5f 90       	pop	r5
    2644:	4f 90       	pop	r4
    2646:	08 95       	ret

00002648 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    2648:	0f 93       	push	r16
    264a:	1f 93       	push	r17
    264c:	cf 93       	push	r28
    264e:	df 93       	push	r29
    2650:	ec 01       	movw	r28, r24
    2652:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    2654:	00 97       	sbiw	r24, 0x00	; 0
    2656:	09 f4       	brne	.+2      	; 0x265a <usart_init_rs232+0x12>
    2658:	3e c1       	rjmp	.+636    	; 0x28d6 <usart_init_rs232+0x28e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    265a:	80 3c       	cpi	r24, 0xC0	; 192
    265c:	91 05       	cpc	r25, r1
    265e:	31 f4       	brne	.+12     	; 0x266c <usart_init_rs232+0x24>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    2660:	60 e1       	ldi	r22, 0x10	; 16
    2662:	80 e0       	ldi	r24, 0x00	; 0
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	0e 94 26 09 	call	0x124c	; 0x124c <sysclk_enable_module>
    266a:	35 c1       	rjmp	.+618    	; 0x28d6 <usart_init_rs232+0x28e>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    266c:	c1 15       	cp	r28, r1
    266e:	84 e0       	ldi	r24, 0x04	; 4
    2670:	d8 07       	cpc	r29, r24
    2672:	31 f4       	brne	.+12     	; 0x2680 <usart_init_rs232+0x38>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    2674:	64 e0       	ldi	r22, 0x04	; 4
    2676:	80 e0       	ldi	r24, 0x00	; 0
    2678:	90 e0       	ldi	r25, 0x00	; 0
    267a:	0e 94 26 09 	call	0x124c	; 0x124c <sysclk_enable_module>
    267e:	2b c1       	rjmp	.+598    	; 0x28d6 <usart_init_rs232+0x28e>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    2680:	c0 38       	cpi	r28, 0x80	; 128
    2682:	e1 e0       	ldi	r30, 0x01	; 1
    2684:	de 07       	cpc	r29, r30
    2686:	31 f4       	brne	.+12     	; 0x2694 <usart_init_rs232+0x4c>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    2688:	62 e0       	ldi	r22, 0x02	; 2
    268a:	80 e0       	ldi	r24, 0x00	; 0
    268c:	90 e0       	ldi	r25, 0x00	; 0
    268e:	0e 94 26 09 	call	0x124c	; 0x124c <sysclk_enable_module>
    2692:	21 c1       	rjmp	.+578    	; 0x28d6 <usart_init_rs232+0x28e>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    2694:	c1 15       	cp	r28, r1
    2696:	f1 e0       	ldi	r31, 0x01	; 1
    2698:	df 07       	cpc	r29, r31
    269a:	31 f4       	brne	.+12     	; 0x26a8 <usart_init_rs232+0x60>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    269c:	61 e0       	ldi	r22, 0x01	; 1
    269e:	80 e0       	ldi	r24, 0x00	; 0
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	0e 94 26 09 	call	0x124c	; 0x124c <sysclk_enable_module>
    26a6:	17 c1       	rjmp	.+558    	; 0x28d6 <usart_init_rs232+0x28e>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    26a8:	c0 38       	cpi	r28, 0x80	; 128
    26aa:	83 e0       	ldi	r24, 0x03	; 3
    26ac:	d8 07       	cpc	r29, r24
    26ae:	31 f4       	brne	.+12     	; 0x26bc <usart_init_rs232+0x74>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    26b0:	61 e0       	ldi	r22, 0x01	; 1
    26b2:	81 e0       	ldi	r24, 0x01	; 1
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	0e 94 26 09 	call	0x124c	; 0x124c <sysclk_enable_module>
    26ba:	0d c1       	rjmp	.+538    	; 0x28d6 <usart_init_rs232+0x28e>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    26bc:	c0 39       	cpi	r28, 0x90	; 144
    26be:	e3 e0       	ldi	r30, 0x03	; 3
    26c0:	de 07       	cpc	r29, r30
    26c2:	31 f4       	brne	.+12     	; 0x26d0 <usart_init_rs232+0x88>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    26c4:	61 e0       	ldi	r22, 0x01	; 1
    26c6:	82 e0       	ldi	r24, 0x02	; 2
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	0e 94 26 09 	call	0x124c	; 0x124c <sysclk_enable_module>
    26ce:	03 c1       	rjmp	.+518    	; 0x28d6 <usart_init_rs232+0x28e>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    26d0:	c1 15       	cp	r28, r1
    26d2:	f2 e0       	ldi	r31, 0x02	; 2
    26d4:	df 07       	cpc	r29, r31
    26d6:	31 f4       	brne	.+12     	; 0x26e4 <usart_init_rs232+0x9c>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    26d8:	62 e0       	ldi	r22, 0x02	; 2
    26da:	81 e0       	ldi	r24, 0x01	; 1
    26dc:	90 e0       	ldi	r25, 0x00	; 0
    26de:	0e 94 26 09 	call	0x124c	; 0x124c <sysclk_enable_module>
    26e2:	f9 c0       	rjmp	.+498    	; 0x28d6 <usart_init_rs232+0x28e>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    26e4:	c0 34       	cpi	r28, 0x40	; 64
    26e6:	82 e0       	ldi	r24, 0x02	; 2
    26e8:	d8 07       	cpc	r29, r24
    26ea:	31 f4       	brne	.+12     	; 0x26f8 <usart_init_rs232+0xb0>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    26ec:	62 e0       	ldi	r22, 0x02	; 2
    26ee:	82 e0       	ldi	r24, 0x02	; 2
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	0e 94 26 09 	call	0x124c	; 0x124c <sysclk_enable_module>
    26f6:	ef c0       	rjmp	.+478    	; 0x28d6 <usart_init_rs232+0x28e>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    26f8:	c0 32       	cpi	r28, 0x20	; 32
    26fa:	e3 e0       	ldi	r30, 0x03	; 3
    26fc:	de 07       	cpc	r29, r30
    26fe:	31 f4       	brne	.+12     	; 0x270c <usart_init_rs232+0xc4>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    2700:	64 e0       	ldi	r22, 0x04	; 4
    2702:	82 e0       	ldi	r24, 0x02	; 2
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	0e 94 26 09 	call	0x124c	; 0x124c <sysclk_enable_module>
    270a:	e5 c0       	rjmp	.+458    	; 0x28d6 <usart_init_rs232+0x28e>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    270c:	c1 15       	cp	r28, r1
    270e:	f8 e0       	ldi	r31, 0x08	; 8
    2710:	df 07       	cpc	r29, r31
    2712:	31 f4       	brne	.+12     	; 0x2720 <usart_init_rs232+0xd8>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    2714:	61 e0       	ldi	r22, 0x01	; 1
    2716:	83 e0       	ldi	r24, 0x03	; 3
    2718:	90 e0       	ldi	r25, 0x00	; 0
    271a:	0e 94 26 09 	call	0x124c	; 0x124c <sysclk_enable_module>
    271e:	db c0       	rjmp	.+438    	; 0x28d6 <usart_init_rs232+0x28e>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    2720:	c1 15       	cp	r28, r1
    2722:	89 e0       	ldi	r24, 0x09	; 9
    2724:	d8 07       	cpc	r29, r24
    2726:	31 f4       	brne	.+12     	; 0x2734 <usart_init_rs232+0xec>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    2728:	61 e0       	ldi	r22, 0x01	; 1
    272a:	84 e0       	ldi	r24, 0x04	; 4
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	0e 94 26 09 	call	0x124c	; 0x124c <sysclk_enable_module>
    2732:	d1 c0       	rjmp	.+418    	; 0x28d6 <usart_init_rs232+0x28e>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    2734:	c1 15       	cp	r28, r1
    2736:	ea e0       	ldi	r30, 0x0A	; 10
    2738:	de 07       	cpc	r29, r30
    273a:	31 f4       	brne	.+12     	; 0x2748 <usart_init_rs232+0x100>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    273c:	61 e0       	ldi	r22, 0x01	; 1
    273e:	85 e0       	ldi	r24, 0x05	; 5
    2740:	90 e0       	ldi	r25, 0x00	; 0
    2742:	0e 94 26 09 	call	0x124c	; 0x124c <sysclk_enable_module>
    2746:	c7 c0       	rjmp	.+398    	; 0x28d6 <usart_init_rs232+0x28e>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    2748:	c1 15       	cp	r28, r1
    274a:	fb e0       	ldi	r31, 0x0B	; 11
    274c:	df 07       	cpc	r29, r31
    274e:	31 f4       	brne	.+12     	; 0x275c <usart_init_rs232+0x114>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    2750:	61 e0       	ldi	r22, 0x01	; 1
    2752:	86 e0       	ldi	r24, 0x06	; 6
    2754:	90 e0       	ldi	r25, 0x00	; 0
    2756:	0e 94 26 09 	call	0x124c	; 0x124c <sysclk_enable_module>
    275a:	bd c0       	rjmp	.+378    	; 0x28d6 <usart_init_rs232+0x28e>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    275c:	c0 34       	cpi	r28, 0x40	; 64
    275e:	88 e0       	ldi	r24, 0x08	; 8
    2760:	d8 07       	cpc	r29, r24
    2762:	31 f4       	brne	.+12     	; 0x2770 <usart_init_rs232+0x128>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    2764:	62 e0       	ldi	r22, 0x02	; 2
    2766:	83 e0       	ldi	r24, 0x03	; 3
    2768:	90 e0       	ldi	r25, 0x00	; 0
    276a:	0e 94 26 09 	call	0x124c	; 0x124c <sysclk_enable_module>
    276e:	b3 c0       	rjmp	.+358    	; 0x28d6 <usart_init_rs232+0x28e>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    2770:	c0 34       	cpi	r28, 0x40	; 64
    2772:	e9 e0       	ldi	r30, 0x09	; 9
    2774:	de 07       	cpc	r29, r30
    2776:	31 f4       	brne	.+12     	; 0x2784 <usart_init_rs232+0x13c>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    2778:	62 e0       	ldi	r22, 0x02	; 2
    277a:	84 e0       	ldi	r24, 0x04	; 4
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	0e 94 26 09 	call	0x124c	; 0x124c <sysclk_enable_module>
    2782:	a9 c0       	rjmp	.+338    	; 0x28d6 <usart_init_rs232+0x28e>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    2784:	c0 34       	cpi	r28, 0x40	; 64
    2786:	fa e0       	ldi	r31, 0x0A	; 10
    2788:	df 07       	cpc	r29, r31
    278a:	31 f4       	brne	.+12     	; 0x2798 <usart_init_rs232+0x150>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    278c:	62 e0       	ldi	r22, 0x02	; 2
    278e:	85 e0       	ldi	r24, 0x05	; 5
    2790:	90 e0       	ldi	r25, 0x00	; 0
    2792:	0e 94 26 09 	call	0x124c	; 0x124c <sysclk_enable_module>
    2796:	9f c0       	rjmp	.+318    	; 0x28d6 <usart_init_rs232+0x28e>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    2798:	c0 39       	cpi	r28, 0x90	; 144
    279a:	88 e0       	ldi	r24, 0x08	; 8
    279c:	d8 07       	cpc	r29, r24
    279e:	31 f4       	brne	.+12     	; 0x27ac <usart_init_rs232+0x164>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    27a0:	64 e0       	ldi	r22, 0x04	; 4
    27a2:	83 e0       	ldi	r24, 0x03	; 3
    27a4:	90 e0       	ldi	r25, 0x00	; 0
    27a6:	0e 94 26 09 	call	0x124c	; 0x124c <sysclk_enable_module>
    27aa:	95 c0       	rjmp	.+298    	; 0x28d6 <usart_init_rs232+0x28e>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    27ac:	c0 39       	cpi	r28, 0x90	; 144
    27ae:	e9 e0       	ldi	r30, 0x09	; 9
    27b0:	de 07       	cpc	r29, r30
    27b2:	31 f4       	brne	.+12     	; 0x27c0 <usart_init_rs232+0x178>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    27b4:	64 e0       	ldi	r22, 0x04	; 4
    27b6:	84 e0       	ldi	r24, 0x04	; 4
    27b8:	90 e0       	ldi	r25, 0x00	; 0
    27ba:	0e 94 26 09 	call	0x124c	; 0x124c <sysclk_enable_module>
    27be:	8b c0       	rjmp	.+278    	; 0x28d6 <usart_init_rs232+0x28e>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    27c0:	c0 39       	cpi	r28, 0x90	; 144
    27c2:	fa e0       	ldi	r31, 0x0A	; 10
    27c4:	df 07       	cpc	r29, r31
    27c6:	31 f4       	brne	.+12     	; 0x27d4 <usart_init_rs232+0x18c>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    27c8:	64 e0       	ldi	r22, 0x04	; 4
    27ca:	85 e0       	ldi	r24, 0x05	; 5
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	0e 94 26 09 	call	0x124c	; 0x124c <sysclk_enable_module>
    27d2:	81 c0       	rjmp	.+258    	; 0x28d6 <usart_init_rs232+0x28e>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    27d4:	c0 39       	cpi	r28, 0x90	; 144
    27d6:	8b e0       	ldi	r24, 0x0B	; 11
    27d8:	d8 07       	cpc	r29, r24
    27da:	31 f4       	brne	.+12     	; 0x27e8 <usart_init_rs232+0x1a0>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    27dc:	64 e0       	ldi	r22, 0x04	; 4
    27de:	86 e0       	ldi	r24, 0x06	; 6
    27e0:	90 e0       	ldi	r25, 0x00	; 0
    27e2:	0e 94 26 09 	call	0x124c	; 0x124c <sysclk_enable_module>
    27e6:	77 c0       	rjmp	.+238    	; 0x28d6 <usart_init_rs232+0x28e>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    27e8:	c0 3c       	cpi	r28, 0xC0	; 192
    27ea:	e8 e0       	ldi	r30, 0x08	; 8
    27ec:	de 07       	cpc	r29, r30
    27ee:	31 f4       	brne	.+12     	; 0x27fc <usart_init_rs232+0x1b4>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    27f0:	68 e0       	ldi	r22, 0x08	; 8
    27f2:	83 e0       	ldi	r24, 0x03	; 3
    27f4:	90 e0       	ldi	r25, 0x00	; 0
    27f6:	0e 94 26 09 	call	0x124c	; 0x124c <sysclk_enable_module>
    27fa:	6d c0       	rjmp	.+218    	; 0x28d6 <usart_init_rs232+0x28e>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    27fc:	c0 3c       	cpi	r28, 0xC0	; 192
    27fe:	f9 e0       	ldi	r31, 0x09	; 9
    2800:	df 07       	cpc	r29, r31
    2802:	31 f4       	brne	.+12     	; 0x2810 <usart_init_rs232+0x1c8>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    2804:	68 e0       	ldi	r22, 0x08	; 8
    2806:	84 e0       	ldi	r24, 0x04	; 4
    2808:	90 e0       	ldi	r25, 0x00	; 0
    280a:	0e 94 26 09 	call	0x124c	; 0x124c <sysclk_enable_module>
    280e:	63 c0       	rjmp	.+198    	; 0x28d6 <usart_init_rs232+0x28e>
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
    2810:	c0 3c       	cpi	r28, 0xC0	; 192
    2812:	8a e0       	ldi	r24, 0x0A	; 10
    2814:	d8 07       	cpc	r29, r24
    2816:	31 f4       	brne	.+12     	; 0x2824 <usart_init_rs232+0x1dc>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
    2818:	68 e0       	ldi	r22, 0x08	; 8
    281a:	85 e0       	ldi	r24, 0x05	; 5
    281c:	90 e0       	ldi	r25, 0x00	; 0
    281e:	0e 94 26 09 	call	0x124c	; 0x124c <sysclk_enable_module>
    2822:	59 c0       	rjmp	.+178    	; 0x28d6 <usart_init_rs232+0x28e>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    2824:	c0 3a       	cpi	r28, 0xA0	; 160
    2826:	e8 e0       	ldi	r30, 0x08	; 8
    2828:	de 07       	cpc	r29, r30
    282a:	31 f4       	brne	.+12     	; 0x2838 <usart_init_rs232+0x1f0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    282c:	60 e1       	ldi	r22, 0x10	; 16
    282e:	83 e0       	ldi	r24, 0x03	; 3
    2830:	90 e0       	ldi	r25, 0x00	; 0
    2832:	0e 94 26 09 	call	0x124c	; 0x124c <sysclk_enable_module>
    2836:	4f c0       	rjmp	.+158    	; 0x28d6 <usart_init_rs232+0x28e>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    2838:	c0 3a       	cpi	r28, 0xA0	; 160
    283a:	f9 e0       	ldi	r31, 0x09	; 9
    283c:	df 07       	cpc	r29, r31
    283e:	31 f4       	brne	.+12     	; 0x284c <usart_init_rs232+0x204>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    2840:	60 e1       	ldi	r22, 0x10	; 16
    2842:	84 e0       	ldi	r24, 0x04	; 4
    2844:	90 e0       	ldi	r25, 0x00	; 0
    2846:	0e 94 26 09 	call	0x124c	; 0x124c <sysclk_enable_module>
    284a:	45 c0       	rjmp	.+138    	; 0x28d6 <usart_init_rs232+0x28e>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    284c:	c0 3a       	cpi	r28, 0xA0	; 160
    284e:	8a e0       	ldi	r24, 0x0A	; 10
    2850:	d8 07       	cpc	r29, r24
    2852:	31 f4       	brne	.+12     	; 0x2860 <usart_init_rs232+0x218>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    2854:	60 e1       	ldi	r22, 0x10	; 16
    2856:	85 e0       	ldi	r24, 0x05	; 5
    2858:	90 e0       	ldi	r25, 0x00	; 0
    285a:	0e 94 26 09 	call	0x124c	; 0x124c <sysclk_enable_module>
    285e:	3b c0       	rjmp	.+118    	; 0x28d6 <usart_init_rs232+0x28e>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    2860:	c0 3a       	cpi	r28, 0xA0	; 160
    2862:	eb e0       	ldi	r30, 0x0B	; 11
    2864:	de 07       	cpc	r29, r30
    2866:	31 f4       	brne	.+12     	; 0x2874 <usart_init_rs232+0x22c>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    2868:	60 e1       	ldi	r22, 0x10	; 16
    286a:	86 e0       	ldi	r24, 0x06	; 6
    286c:	90 e0       	ldi	r25, 0x00	; 0
    286e:	0e 94 26 09 	call	0x124c	; 0x124c <sysclk_enable_module>
    2872:	31 c0       	rjmp	.+98     	; 0x28d6 <usart_init_rs232+0x28e>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    2874:	c0 3b       	cpi	r28, 0xB0	; 176
    2876:	f8 e0       	ldi	r31, 0x08	; 8
    2878:	df 07       	cpc	r29, r31
    287a:	31 f4       	brne	.+12     	; 0x2888 <usart_init_rs232+0x240>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    287c:	60 e2       	ldi	r22, 0x20	; 32
    287e:	83 e0       	ldi	r24, 0x03	; 3
    2880:	90 e0       	ldi	r25, 0x00	; 0
    2882:	0e 94 26 09 	call	0x124c	; 0x124c <sysclk_enable_module>
    2886:	27 c0       	rjmp	.+78     	; 0x28d6 <usart_init_rs232+0x28e>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    2888:	c0 3b       	cpi	r28, 0xB0	; 176
    288a:	89 e0       	ldi	r24, 0x09	; 9
    288c:	d8 07       	cpc	r29, r24
    288e:	31 f4       	brne	.+12     	; 0x289c <usart_init_rs232+0x254>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    2890:	60 e2       	ldi	r22, 0x20	; 32
    2892:	84 e0       	ldi	r24, 0x04	; 4
    2894:	90 e0       	ldi	r25, 0x00	; 0
    2896:	0e 94 26 09 	call	0x124c	; 0x124c <sysclk_enable_module>
    289a:	1d c0       	rjmp	.+58     	; 0x28d6 <usart_init_rs232+0x28e>
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
    289c:	c0 3b       	cpi	r28, 0xB0	; 176
    289e:	ea e0       	ldi	r30, 0x0A	; 10
    28a0:	de 07       	cpc	r29, r30
    28a2:	31 f4       	brne	.+12     	; 0x28b0 <usart_init_rs232+0x268>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
    28a4:	60 e2       	ldi	r22, 0x20	; 32
    28a6:	85 e0       	ldi	r24, 0x05	; 5
    28a8:	90 e0       	ldi	r25, 0x00	; 0
    28aa:	0e 94 26 09 	call	0x124c	; 0x124c <sysclk_enable_module>
    28ae:	13 c0       	rjmp	.+38     	; 0x28d6 <usart_init_rs232+0x28e>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    28b0:	c0 38       	cpi	r28, 0x80	; 128
    28b2:	f4 e0       	ldi	r31, 0x04	; 4
    28b4:	df 07       	cpc	r29, r31
    28b6:	31 f4       	brne	.+12     	; 0x28c4 <usart_init_rs232+0x27c>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    28b8:	60 e4       	ldi	r22, 0x40	; 64
    28ba:	83 e0       	ldi	r24, 0x03	; 3
    28bc:	90 e0       	ldi	r25, 0x00	; 0
    28be:	0e 94 26 09 	call	0x124c	; 0x124c <sysclk_enable_module>
    28c2:	09 c0       	rjmp	.+18     	; 0x28d6 <usart_init_rs232+0x28e>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    28c4:	c0 3a       	cpi	r28, 0xA0	; 160
    28c6:	84 e0       	ldi	r24, 0x04	; 4
    28c8:	d8 07       	cpc	r29, r24
    28ca:	29 f4       	brne	.+10     	; 0x28d6 <usart_init_rs232+0x28e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    28cc:	60 e4       	ldi	r22, 0x40	; 64
    28ce:	85 e0       	ldi	r24, 0x05	; 5
    28d0:	90 e0       	ldi	r25, 0x00	; 0
    28d2:	0e 94 26 09 	call	0x124c	; 0x124c <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    28d6:	8d 81       	ldd	r24, Y+5	; 0x05
    28d8:	8f 73       	andi	r24, 0x3F	; 63
    28da:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    28dc:	f8 01       	movw	r30, r16
    28de:	96 81       	ldd	r25, Z+6	; 0x06
    28e0:	84 81       	ldd	r24, Z+4	; 0x04
    28e2:	89 2b       	or	r24, r25
    28e4:	90 85       	ldd	r25, Z+8	; 0x08
    28e6:	99 23       	and	r25, r25
    28e8:	11 f0       	breq	.+4      	; 0x28ee <usart_init_rs232+0x2a6>
    28ea:	98 e0       	ldi	r25, 0x08	; 8
    28ec:	01 c0       	rjmp	.+2      	; 0x28f0 <usart_init_rs232+0x2a8>
    28ee:	90 e0       	ldi	r25, 0x00	; 0
    28f0:	89 2b       	or	r24, r25
    28f2:	8d 83       	std	Y+5, r24	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    28f4:	f8 01       	movw	r30, r16
    28f6:	40 81       	ld	r20, Z
    28f8:	51 81       	ldd	r21, Z+1	; 0x01
    28fa:	62 81       	ldd	r22, Z+2	; 0x02
    28fc:	73 81       	ldd	r23, Z+3	; 0x03
    28fe:	00 e0       	ldi	r16, 0x00	; 0
    2900:	18 e4       	ldi	r17, 0x48	; 72
    2902:	28 ee       	ldi	r18, 0xE8	; 232
    2904:	31 e0       	ldi	r19, 0x01	; 1
    2906:	ce 01       	movw	r24, r28
    2908:	99 dd       	rcall	.-1230   	; 0x243c <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    290a:	9c 81       	ldd	r25, Y+4	; 0x04
    290c:	98 60       	ori	r25, 0x08	; 8
    290e:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    2910:	9c 81       	ldd	r25, Y+4	; 0x04
    2912:	90 61       	ori	r25, 0x10	; 16
    2914:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    2916:	df 91       	pop	r29
    2918:	cf 91       	pop	r28
    291a:	1f 91       	pop	r17
    291c:	0f 91       	pop	r16
    291e:	08 95       	ret

00002920 <__divmodhi4>:
    2920:	97 fb       	bst	r25, 7
    2922:	07 2e       	mov	r0, r23
    2924:	16 f4       	brtc	.+4      	; 0x292a <__divmodhi4+0xa>
    2926:	00 94       	com	r0
    2928:	06 d0       	rcall	.+12     	; 0x2936 <__divmodhi4_neg1>
    292a:	77 fd       	sbrc	r23, 7
    292c:	08 d0       	rcall	.+16     	; 0x293e <__divmodhi4_neg2>
    292e:	52 d0       	rcall	.+164    	; 0x29d4 <__udivmodhi4>
    2930:	07 fc       	sbrc	r0, 7
    2932:	05 d0       	rcall	.+10     	; 0x293e <__divmodhi4_neg2>
    2934:	3e f4       	brtc	.+14     	; 0x2944 <__divmodhi4_exit>

00002936 <__divmodhi4_neg1>:
    2936:	90 95       	com	r25
    2938:	81 95       	neg	r24
    293a:	9f 4f       	sbci	r25, 0xFF	; 255
    293c:	08 95       	ret

0000293e <__divmodhi4_neg2>:
    293e:	70 95       	com	r23
    2940:	61 95       	neg	r22
    2942:	7f 4f       	sbci	r23, 0xFF	; 255

00002944 <__divmodhi4_exit>:
    2944:	08 95       	ret

00002946 <__udivmodsi4>:
    2946:	a1 e2       	ldi	r26, 0x21	; 33
    2948:	1a 2e       	mov	r1, r26
    294a:	aa 1b       	sub	r26, r26
    294c:	bb 1b       	sub	r27, r27
    294e:	fd 01       	movw	r30, r26
    2950:	0d c0       	rjmp	.+26     	; 0x296c <__udivmodsi4_ep>

00002952 <__udivmodsi4_loop>:
    2952:	aa 1f       	adc	r26, r26
    2954:	bb 1f       	adc	r27, r27
    2956:	ee 1f       	adc	r30, r30
    2958:	ff 1f       	adc	r31, r31
    295a:	a2 17       	cp	r26, r18
    295c:	b3 07       	cpc	r27, r19
    295e:	e4 07       	cpc	r30, r20
    2960:	f5 07       	cpc	r31, r21
    2962:	20 f0       	brcs	.+8      	; 0x296c <__udivmodsi4_ep>
    2964:	a2 1b       	sub	r26, r18
    2966:	b3 0b       	sbc	r27, r19
    2968:	e4 0b       	sbc	r30, r20
    296a:	f5 0b       	sbc	r31, r21

0000296c <__udivmodsi4_ep>:
    296c:	66 1f       	adc	r22, r22
    296e:	77 1f       	adc	r23, r23
    2970:	88 1f       	adc	r24, r24
    2972:	99 1f       	adc	r25, r25
    2974:	1a 94       	dec	r1
    2976:	69 f7       	brne	.-38     	; 0x2952 <__udivmodsi4_loop>
    2978:	60 95       	com	r22
    297a:	70 95       	com	r23
    297c:	80 95       	com	r24
    297e:	90 95       	com	r25
    2980:	9b 01       	movw	r18, r22
    2982:	ac 01       	movw	r20, r24
    2984:	bd 01       	movw	r22, r26
    2986:	cf 01       	movw	r24, r30
    2988:	08 95       	ret

0000298a <__mulhisi3>:
    298a:	05 d0       	rcall	.+10     	; 0x2996 <__umulhisi3>
    298c:	33 23       	and	r19, r19
    298e:	12 f4       	brpl	.+4      	; 0x2994 <__mulhisi3+0xa>
    2990:	8a 1b       	sub	r24, r26
    2992:	9b 0b       	sbc	r25, r27
    2994:	10 c0       	rjmp	.+32     	; 0x29b6 <__usmulhisi3_tail>

00002996 <__umulhisi3>:
    2996:	a2 9f       	mul	r26, r18
    2998:	b0 01       	movw	r22, r0
    299a:	b3 9f       	mul	r27, r19
    299c:	c0 01       	movw	r24, r0
    299e:	a3 9f       	mul	r26, r19
    29a0:	70 0d       	add	r23, r0
    29a2:	81 1d       	adc	r24, r1
    29a4:	11 24       	eor	r1, r1
    29a6:	91 1d       	adc	r25, r1
    29a8:	b2 9f       	mul	r27, r18
    29aa:	70 0d       	add	r23, r0
    29ac:	81 1d       	adc	r24, r1
    29ae:	11 24       	eor	r1, r1
    29b0:	91 1d       	adc	r25, r1
    29b2:	08 95       	ret

000029b4 <__usmulhisi3>:
    29b4:	f0 df       	rcall	.-32     	; 0x2996 <__umulhisi3>

000029b6 <__usmulhisi3_tail>:
    29b6:	b7 ff       	sbrs	r27, 7
    29b8:	08 95       	ret
    29ba:	82 1b       	sub	r24, r18
    29bc:	93 0b       	sbc	r25, r19
    29be:	08 95       	ret

000029c0 <__muluhisi3>:
    29c0:	ea df       	rcall	.-44     	; 0x2996 <__umulhisi3>
    29c2:	a5 9f       	mul	r26, r21
    29c4:	90 0d       	add	r25, r0
    29c6:	b4 9f       	mul	r27, r20
    29c8:	90 0d       	add	r25, r0
    29ca:	a4 9f       	mul	r26, r20
    29cc:	80 0d       	add	r24, r0
    29ce:	91 1d       	adc	r25, r1
    29d0:	11 24       	eor	r1, r1
    29d2:	08 95       	ret

000029d4 <__udivmodhi4>:
    29d4:	aa 1b       	sub	r26, r26
    29d6:	bb 1b       	sub	r27, r27
    29d8:	51 e1       	ldi	r21, 0x11	; 17
    29da:	07 c0       	rjmp	.+14     	; 0x29ea <__udivmodhi4_ep>

000029dc <__udivmodhi4_loop>:
    29dc:	aa 1f       	adc	r26, r26
    29de:	bb 1f       	adc	r27, r27
    29e0:	a6 17       	cp	r26, r22
    29e2:	b7 07       	cpc	r27, r23
    29e4:	10 f0       	brcs	.+4      	; 0x29ea <__udivmodhi4_ep>
    29e6:	a6 1b       	sub	r26, r22
    29e8:	b7 0b       	sbc	r27, r23

000029ea <__udivmodhi4_ep>:
    29ea:	88 1f       	adc	r24, r24
    29ec:	99 1f       	adc	r25, r25
    29ee:	5a 95       	dec	r21
    29f0:	a9 f7       	brne	.-22     	; 0x29dc <__udivmodhi4_loop>
    29f2:	80 95       	com	r24
    29f4:	90 95       	com	r25
    29f6:	bc 01       	movw	r22, r24
    29f8:	cd 01       	movw	r24, r26
    29fa:	08 95       	ret

000029fc <__subsf3>:
    29fc:	50 58       	subi	r21, 0x80	; 128

000029fe <__addsf3>:
    29fe:	bb 27       	eor	r27, r27
    2a00:	aa 27       	eor	r26, r26
    2a02:	0e d0       	rcall	.+28     	; 0x2a20 <__addsf3x>
    2a04:	75 c1       	rjmp	.+746    	; 0x2cf0 <__fp_round>
    2a06:	66 d1       	rcall	.+716    	; 0x2cd4 <__fp_pscA>
    2a08:	30 f0       	brcs	.+12     	; 0x2a16 <__addsf3+0x18>
    2a0a:	6b d1       	rcall	.+726    	; 0x2ce2 <__fp_pscB>
    2a0c:	20 f0       	brcs	.+8      	; 0x2a16 <__addsf3+0x18>
    2a0e:	31 f4       	brne	.+12     	; 0x2a1c <__addsf3+0x1e>
    2a10:	9f 3f       	cpi	r25, 0xFF	; 255
    2a12:	11 f4       	brne	.+4      	; 0x2a18 <__addsf3+0x1a>
    2a14:	1e f4       	brtc	.+6      	; 0x2a1c <__addsf3+0x1e>
    2a16:	5b c1       	rjmp	.+694    	; 0x2cce <__fp_nan>
    2a18:	0e f4       	brtc	.+2      	; 0x2a1c <__addsf3+0x1e>
    2a1a:	e0 95       	com	r30
    2a1c:	e7 fb       	bst	r30, 7
    2a1e:	51 c1       	rjmp	.+674    	; 0x2cc2 <__fp_inf>

00002a20 <__addsf3x>:
    2a20:	e9 2f       	mov	r30, r25
    2a22:	77 d1       	rcall	.+750    	; 0x2d12 <__fp_split3>
    2a24:	80 f3       	brcs	.-32     	; 0x2a06 <__addsf3+0x8>
    2a26:	ba 17       	cp	r27, r26
    2a28:	62 07       	cpc	r22, r18
    2a2a:	73 07       	cpc	r23, r19
    2a2c:	84 07       	cpc	r24, r20
    2a2e:	95 07       	cpc	r25, r21
    2a30:	18 f0       	brcs	.+6      	; 0x2a38 <__addsf3x+0x18>
    2a32:	71 f4       	brne	.+28     	; 0x2a50 <__addsf3x+0x30>
    2a34:	9e f5       	brtc	.+102    	; 0x2a9c <__addsf3x+0x7c>
    2a36:	8f c1       	rjmp	.+798    	; 0x2d56 <__fp_zero>
    2a38:	0e f4       	brtc	.+2      	; 0x2a3c <__addsf3x+0x1c>
    2a3a:	e0 95       	com	r30
    2a3c:	0b 2e       	mov	r0, r27
    2a3e:	ba 2f       	mov	r27, r26
    2a40:	a0 2d       	mov	r26, r0
    2a42:	0b 01       	movw	r0, r22
    2a44:	b9 01       	movw	r22, r18
    2a46:	90 01       	movw	r18, r0
    2a48:	0c 01       	movw	r0, r24
    2a4a:	ca 01       	movw	r24, r20
    2a4c:	a0 01       	movw	r20, r0
    2a4e:	11 24       	eor	r1, r1
    2a50:	ff 27       	eor	r31, r31
    2a52:	59 1b       	sub	r21, r25
    2a54:	99 f0       	breq	.+38     	; 0x2a7c <__addsf3x+0x5c>
    2a56:	59 3f       	cpi	r21, 0xF9	; 249
    2a58:	50 f4       	brcc	.+20     	; 0x2a6e <__addsf3x+0x4e>
    2a5a:	50 3e       	cpi	r21, 0xE0	; 224
    2a5c:	68 f1       	brcs	.+90     	; 0x2ab8 <__addsf3x+0x98>
    2a5e:	1a 16       	cp	r1, r26
    2a60:	f0 40       	sbci	r31, 0x00	; 0
    2a62:	a2 2f       	mov	r26, r18
    2a64:	23 2f       	mov	r18, r19
    2a66:	34 2f       	mov	r19, r20
    2a68:	44 27       	eor	r20, r20
    2a6a:	58 5f       	subi	r21, 0xF8	; 248
    2a6c:	f3 cf       	rjmp	.-26     	; 0x2a54 <__addsf3x+0x34>
    2a6e:	46 95       	lsr	r20
    2a70:	37 95       	ror	r19
    2a72:	27 95       	ror	r18
    2a74:	a7 95       	ror	r26
    2a76:	f0 40       	sbci	r31, 0x00	; 0
    2a78:	53 95       	inc	r21
    2a7a:	c9 f7       	brne	.-14     	; 0x2a6e <__addsf3x+0x4e>
    2a7c:	7e f4       	brtc	.+30     	; 0x2a9c <__addsf3x+0x7c>
    2a7e:	1f 16       	cp	r1, r31
    2a80:	ba 0b       	sbc	r27, r26
    2a82:	62 0b       	sbc	r22, r18
    2a84:	73 0b       	sbc	r23, r19
    2a86:	84 0b       	sbc	r24, r20
    2a88:	ba f0       	brmi	.+46     	; 0x2ab8 <__addsf3x+0x98>
    2a8a:	91 50       	subi	r25, 0x01	; 1
    2a8c:	a1 f0       	breq	.+40     	; 0x2ab6 <__addsf3x+0x96>
    2a8e:	ff 0f       	add	r31, r31
    2a90:	bb 1f       	adc	r27, r27
    2a92:	66 1f       	adc	r22, r22
    2a94:	77 1f       	adc	r23, r23
    2a96:	88 1f       	adc	r24, r24
    2a98:	c2 f7       	brpl	.-16     	; 0x2a8a <__addsf3x+0x6a>
    2a9a:	0e c0       	rjmp	.+28     	; 0x2ab8 <__addsf3x+0x98>
    2a9c:	ba 0f       	add	r27, r26
    2a9e:	62 1f       	adc	r22, r18
    2aa0:	73 1f       	adc	r23, r19
    2aa2:	84 1f       	adc	r24, r20
    2aa4:	48 f4       	brcc	.+18     	; 0x2ab8 <__addsf3x+0x98>
    2aa6:	87 95       	ror	r24
    2aa8:	77 95       	ror	r23
    2aaa:	67 95       	ror	r22
    2aac:	b7 95       	ror	r27
    2aae:	f7 95       	ror	r31
    2ab0:	9e 3f       	cpi	r25, 0xFE	; 254
    2ab2:	08 f0       	brcs	.+2      	; 0x2ab6 <__addsf3x+0x96>
    2ab4:	b3 cf       	rjmp	.-154    	; 0x2a1c <__addsf3+0x1e>
    2ab6:	93 95       	inc	r25
    2ab8:	88 0f       	add	r24, r24
    2aba:	08 f0       	brcs	.+2      	; 0x2abe <__addsf3x+0x9e>
    2abc:	99 27       	eor	r25, r25
    2abe:	ee 0f       	add	r30, r30
    2ac0:	97 95       	ror	r25
    2ac2:	87 95       	ror	r24
    2ac4:	08 95       	ret

00002ac6 <__cmpsf2>:
    2ac6:	d9 d0       	rcall	.+434    	; 0x2c7a <__fp_cmp>
    2ac8:	08 f4       	brcc	.+2      	; 0x2acc <__cmpsf2+0x6>
    2aca:	81 e0       	ldi	r24, 0x01	; 1
    2acc:	08 95       	ret

00002ace <__divsf3>:
    2ace:	0c d0       	rcall	.+24     	; 0x2ae8 <__divsf3x>
    2ad0:	0f c1       	rjmp	.+542    	; 0x2cf0 <__fp_round>
    2ad2:	07 d1       	rcall	.+526    	; 0x2ce2 <__fp_pscB>
    2ad4:	40 f0       	brcs	.+16     	; 0x2ae6 <__divsf3+0x18>
    2ad6:	fe d0       	rcall	.+508    	; 0x2cd4 <__fp_pscA>
    2ad8:	30 f0       	brcs	.+12     	; 0x2ae6 <__divsf3+0x18>
    2ada:	21 f4       	brne	.+8      	; 0x2ae4 <__divsf3+0x16>
    2adc:	5f 3f       	cpi	r21, 0xFF	; 255
    2ade:	19 f0       	breq	.+6      	; 0x2ae6 <__divsf3+0x18>
    2ae0:	f0 c0       	rjmp	.+480    	; 0x2cc2 <__fp_inf>
    2ae2:	51 11       	cpse	r21, r1
    2ae4:	39 c1       	rjmp	.+626    	; 0x2d58 <__fp_szero>
    2ae6:	f3 c0       	rjmp	.+486    	; 0x2cce <__fp_nan>

00002ae8 <__divsf3x>:
    2ae8:	14 d1       	rcall	.+552    	; 0x2d12 <__fp_split3>
    2aea:	98 f3       	brcs	.-26     	; 0x2ad2 <__divsf3+0x4>

00002aec <__divsf3_pse>:
    2aec:	99 23       	and	r25, r25
    2aee:	c9 f3       	breq	.-14     	; 0x2ae2 <__divsf3+0x14>
    2af0:	55 23       	and	r21, r21
    2af2:	b1 f3       	breq	.-20     	; 0x2ae0 <__divsf3+0x12>
    2af4:	95 1b       	sub	r25, r21
    2af6:	55 0b       	sbc	r21, r21
    2af8:	bb 27       	eor	r27, r27
    2afa:	aa 27       	eor	r26, r26
    2afc:	62 17       	cp	r22, r18
    2afe:	73 07       	cpc	r23, r19
    2b00:	84 07       	cpc	r24, r20
    2b02:	38 f0       	brcs	.+14     	; 0x2b12 <__divsf3_pse+0x26>
    2b04:	9f 5f       	subi	r25, 0xFF	; 255
    2b06:	5f 4f       	sbci	r21, 0xFF	; 255
    2b08:	22 0f       	add	r18, r18
    2b0a:	33 1f       	adc	r19, r19
    2b0c:	44 1f       	adc	r20, r20
    2b0e:	aa 1f       	adc	r26, r26
    2b10:	a9 f3       	breq	.-22     	; 0x2afc <__divsf3_pse+0x10>
    2b12:	33 d0       	rcall	.+102    	; 0x2b7a <__divsf3_pse+0x8e>
    2b14:	0e 2e       	mov	r0, r30
    2b16:	3a f0       	brmi	.+14     	; 0x2b26 <__divsf3_pse+0x3a>
    2b18:	e0 e8       	ldi	r30, 0x80	; 128
    2b1a:	30 d0       	rcall	.+96     	; 0x2b7c <__divsf3_pse+0x90>
    2b1c:	91 50       	subi	r25, 0x01	; 1
    2b1e:	50 40       	sbci	r21, 0x00	; 0
    2b20:	e6 95       	lsr	r30
    2b22:	00 1c       	adc	r0, r0
    2b24:	ca f7       	brpl	.-14     	; 0x2b18 <__divsf3_pse+0x2c>
    2b26:	29 d0       	rcall	.+82     	; 0x2b7a <__divsf3_pse+0x8e>
    2b28:	fe 2f       	mov	r31, r30
    2b2a:	27 d0       	rcall	.+78     	; 0x2b7a <__divsf3_pse+0x8e>
    2b2c:	66 0f       	add	r22, r22
    2b2e:	77 1f       	adc	r23, r23
    2b30:	88 1f       	adc	r24, r24
    2b32:	bb 1f       	adc	r27, r27
    2b34:	26 17       	cp	r18, r22
    2b36:	37 07       	cpc	r19, r23
    2b38:	48 07       	cpc	r20, r24
    2b3a:	ab 07       	cpc	r26, r27
    2b3c:	b0 e8       	ldi	r27, 0x80	; 128
    2b3e:	09 f0       	breq	.+2      	; 0x2b42 <__divsf3_pse+0x56>
    2b40:	bb 0b       	sbc	r27, r27
    2b42:	80 2d       	mov	r24, r0
    2b44:	bf 01       	movw	r22, r30
    2b46:	ff 27       	eor	r31, r31
    2b48:	93 58       	subi	r25, 0x83	; 131
    2b4a:	5f 4f       	sbci	r21, 0xFF	; 255
    2b4c:	2a f0       	brmi	.+10     	; 0x2b58 <__divsf3_pse+0x6c>
    2b4e:	9e 3f       	cpi	r25, 0xFE	; 254
    2b50:	51 05       	cpc	r21, r1
    2b52:	68 f0       	brcs	.+26     	; 0x2b6e <__divsf3_pse+0x82>
    2b54:	b6 c0       	rjmp	.+364    	; 0x2cc2 <__fp_inf>
    2b56:	00 c1       	rjmp	.+512    	; 0x2d58 <__fp_szero>
    2b58:	5f 3f       	cpi	r21, 0xFF	; 255
    2b5a:	ec f3       	brlt	.-6      	; 0x2b56 <__divsf3_pse+0x6a>
    2b5c:	98 3e       	cpi	r25, 0xE8	; 232
    2b5e:	dc f3       	brlt	.-10     	; 0x2b56 <__divsf3_pse+0x6a>
    2b60:	86 95       	lsr	r24
    2b62:	77 95       	ror	r23
    2b64:	67 95       	ror	r22
    2b66:	b7 95       	ror	r27
    2b68:	f7 95       	ror	r31
    2b6a:	9f 5f       	subi	r25, 0xFF	; 255
    2b6c:	c9 f7       	brne	.-14     	; 0x2b60 <__divsf3_pse+0x74>
    2b6e:	88 0f       	add	r24, r24
    2b70:	91 1d       	adc	r25, r1
    2b72:	96 95       	lsr	r25
    2b74:	87 95       	ror	r24
    2b76:	97 f9       	bld	r25, 7
    2b78:	08 95       	ret
    2b7a:	e1 e0       	ldi	r30, 0x01	; 1
    2b7c:	66 0f       	add	r22, r22
    2b7e:	77 1f       	adc	r23, r23
    2b80:	88 1f       	adc	r24, r24
    2b82:	bb 1f       	adc	r27, r27
    2b84:	62 17       	cp	r22, r18
    2b86:	73 07       	cpc	r23, r19
    2b88:	84 07       	cpc	r24, r20
    2b8a:	ba 07       	cpc	r27, r26
    2b8c:	20 f0       	brcs	.+8      	; 0x2b96 <__divsf3_pse+0xaa>
    2b8e:	62 1b       	sub	r22, r18
    2b90:	73 0b       	sbc	r23, r19
    2b92:	84 0b       	sbc	r24, r20
    2b94:	ba 0b       	sbc	r27, r26
    2b96:	ee 1f       	adc	r30, r30
    2b98:	88 f7       	brcc	.-30     	; 0x2b7c <__divsf3_pse+0x90>
    2b9a:	e0 95       	com	r30
    2b9c:	08 95       	ret

00002b9e <__fixsfsi>:
    2b9e:	04 d0       	rcall	.+8      	; 0x2ba8 <__fixunssfsi>
    2ba0:	68 94       	set
    2ba2:	b1 11       	cpse	r27, r1
    2ba4:	d9 c0       	rjmp	.+434    	; 0x2d58 <__fp_szero>
    2ba6:	08 95       	ret

00002ba8 <__fixunssfsi>:
    2ba8:	bc d0       	rcall	.+376    	; 0x2d22 <__fp_splitA>
    2baa:	88 f0       	brcs	.+34     	; 0x2bce <__fixunssfsi+0x26>
    2bac:	9f 57       	subi	r25, 0x7F	; 127
    2bae:	90 f0       	brcs	.+36     	; 0x2bd4 <__fixunssfsi+0x2c>
    2bb0:	b9 2f       	mov	r27, r25
    2bb2:	99 27       	eor	r25, r25
    2bb4:	b7 51       	subi	r27, 0x17	; 23
    2bb6:	a0 f0       	brcs	.+40     	; 0x2be0 <__fixunssfsi+0x38>
    2bb8:	d1 f0       	breq	.+52     	; 0x2bee <__fixunssfsi+0x46>
    2bba:	66 0f       	add	r22, r22
    2bbc:	77 1f       	adc	r23, r23
    2bbe:	88 1f       	adc	r24, r24
    2bc0:	99 1f       	adc	r25, r25
    2bc2:	1a f0       	brmi	.+6      	; 0x2bca <__fixunssfsi+0x22>
    2bc4:	ba 95       	dec	r27
    2bc6:	c9 f7       	brne	.-14     	; 0x2bba <__fixunssfsi+0x12>
    2bc8:	12 c0       	rjmp	.+36     	; 0x2bee <__fixunssfsi+0x46>
    2bca:	b1 30       	cpi	r27, 0x01	; 1
    2bcc:	81 f0       	breq	.+32     	; 0x2bee <__fixunssfsi+0x46>
    2bce:	c3 d0       	rcall	.+390    	; 0x2d56 <__fp_zero>
    2bd0:	b1 e0       	ldi	r27, 0x01	; 1
    2bd2:	08 95       	ret
    2bd4:	c0 c0       	rjmp	.+384    	; 0x2d56 <__fp_zero>
    2bd6:	67 2f       	mov	r22, r23
    2bd8:	78 2f       	mov	r23, r24
    2bda:	88 27       	eor	r24, r24
    2bdc:	b8 5f       	subi	r27, 0xF8	; 248
    2bde:	39 f0       	breq	.+14     	; 0x2bee <__fixunssfsi+0x46>
    2be0:	b9 3f       	cpi	r27, 0xF9	; 249
    2be2:	cc f3       	brlt	.-14     	; 0x2bd6 <__fixunssfsi+0x2e>
    2be4:	86 95       	lsr	r24
    2be6:	77 95       	ror	r23
    2be8:	67 95       	ror	r22
    2bea:	b3 95       	inc	r27
    2bec:	d9 f7       	brne	.-10     	; 0x2be4 <__fixunssfsi+0x3c>
    2bee:	3e f4       	brtc	.+14     	; 0x2bfe <__fixunssfsi+0x56>
    2bf0:	90 95       	com	r25
    2bf2:	80 95       	com	r24
    2bf4:	70 95       	com	r23
    2bf6:	61 95       	neg	r22
    2bf8:	7f 4f       	sbci	r23, 0xFF	; 255
    2bfa:	8f 4f       	sbci	r24, 0xFF	; 255
    2bfc:	9f 4f       	sbci	r25, 0xFF	; 255
    2bfe:	08 95       	ret

00002c00 <__floatunsisf>:
    2c00:	e8 94       	clt
    2c02:	09 c0       	rjmp	.+18     	; 0x2c16 <__floatsisf+0x12>

00002c04 <__floatsisf>:
    2c04:	97 fb       	bst	r25, 7
    2c06:	3e f4       	brtc	.+14     	; 0x2c16 <__floatsisf+0x12>
    2c08:	90 95       	com	r25
    2c0a:	80 95       	com	r24
    2c0c:	70 95       	com	r23
    2c0e:	61 95       	neg	r22
    2c10:	7f 4f       	sbci	r23, 0xFF	; 255
    2c12:	8f 4f       	sbci	r24, 0xFF	; 255
    2c14:	9f 4f       	sbci	r25, 0xFF	; 255
    2c16:	99 23       	and	r25, r25
    2c18:	a9 f0       	breq	.+42     	; 0x2c44 <__floatsisf+0x40>
    2c1a:	f9 2f       	mov	r31, r25
    2c1c:	96 e9       	ldi	r25, 0x96	; 150
    2c1e:	bb 27       	eor	r27, r27
    2c20:	93 95       	inc	r25
    2c22:	f6 95       	lsr	r31
    2c24:	87 95       	ror	r24
    2c26:	77 95       	ror	r23
    2c28:	67 95       	ror	r22
    2c2a:	b7 95       	ror	r27
    2c2c:	f1 11       	cpse	r31, r1
    2c2e:	f8 cf       	rjmp	.-16     	; 0x2c20 <__floatsisf+0x1c>
    2c30:	fa f4       	brpl	.+62     	; 0x2c70 <__floatsisf+0x6c>
    2c32:	bb 0f       	add	r27, r27
    2c34:	11 f4       	brne	.+4      	; 0x2c3a <__floatsisf+0x36>
    2c36:	60 ff       	sbrs	r22, 0
    2c38:	1b c0       	rjmp	.+54     	; 0x2c70 <__floatsisf+0x6c>
    2c3a:	6f 5f       	subi	r22, 0xFF	; 255
    2c3c:	7f 4f       	sbci	r23, 0xFF	; 255
    2c3e:	8f 4f       	sbci	r24, 0xFF	; 255
    2c40:	9f 4f       	sbci	r25, 0xFF	; 255
    2c42:	16 c0       	rjmp	.+44     	; 0x2c70 <__floatsisf+0x6c>
    2c44:	88 23       	and	r24, r24
    2c46:	11 f0       	breq	.+4      	; 0x2c4c <__floatsisf+0x48>
    2c48:	96 e9       	ldi	r25, 0x96	; 150
    2c4a:	11 c0       	rjmp	.+34     	; 0x2c6e <__floatsisf+0x6a>
    2c4c:	77 23       	and	r23, r23
    2c4e:	21 f0       	breq	.+8      	; 0x2c58 <__floatsisf+0x54>
    2c50:	9e e8       	ldi	r25, 0x8E	; 142
    2c52:	87 2f       	mov	r24, r23
    2c54:	76 2f       	mov	r23, r22
    2c56:	05 c0       	rjmp	.+10     	; 0x2c62 <__floatsisf+0x5e>
    2c58:	66 23       	and	r22, r22
    2c5a:	71 f0       	breq	.+28     	; 0x2c78 <__floatsisf+0x74>
    2c5c:	96 e8       	ldi	r25, 0x86	; 134
    2c5e:	86 2f       	mov	r24, r22
    2c60:	70 e0       	ldi	r23, 0x00	; 0
    2c62:	60 e0       	ldi	r22, 0x00	; 0
    2c64:	2a f0       	brmi	.+10     	; 0x2c70 <__floatsisf+0x6c>
    2c66:	9a 95       	dec	r25
    2c68:	66 0f       	add	r22, r22
    2c6a:	77 1f       	adc	r23, r23
    2c6c:	88 1f       	adc	r24, r24
    2c6e:	da f7       	brpl	.-10     	; 0x2c66 <__floatsisf+0x62>
    2c70:	88 0f       	add	r24, r24
    2c72:	96 95       	lsr	r25
    2c74:	87 95       	ror	r24
    2c76:	97 f9       	bld	r25, 7
    2c78:	08 95       	ret

00002c7a <__fp_cmp>:
    2c7a:	99 0f       	add	r25, r25
    2c7c:	00 08       	sbc	r0, r0
    2c7e:	55 0f       	add	r21, r21
    2c80:	aa 0b       	sbc	r26, r26
    2c82:	e0 e8       	ldi	r30, 0x80	; 128
    2c84:	fe ef       	ldi	r31, 0xFE	; 254
    2c86:	16 16       	cp	r1, r22
    2c88:	17 06       	cpc	r1, r23
    2c8a:	e8 07       	cpc	r30, r24
    2c8c:	f9 07       	cpc	r31, r25
    2c8e:	c0 f0       	brcs	.+48     	; 0x2cc0 <__fp_cmp+0x46>
    2c90:	12 16       	cp	r1, r18
    2c92:	13 06       	cpc	r1, r19
    2c94:	e4 07       	cpc	r30, r20
    2c96:	f5 07       	cpc	r31, r21
    2c98:	98 f0       	brcs	.+38     	; 0x2cc0 <__fp_cmp+0x46>
    2c9a:	62 1b       	sub	r22, r18
    2c9c:	73 0b       	sbc	r23, r19
    2c9e:	84 0b       	sbc	r24, r20
    2ca0:	95 0b       	sbc	r25, r21
    2ca2:	39 f4       	brne	.+14     	; 0x2cb2 <__fp_cmp+0x38>
    2ca4:	0a 26       	eor	r0, r26
    2ca6:	61 f0       	breq	.+24     	; 0x2cc0 <__fp_cmp+0x46>
    2ca8:	23 2b       	or	r18, r19
    2caa:	24 2b       	or	r18, r20
    2cac:	25 2b       	or	r18, r21
    2cae:	21 f4       	brne	.+8      	; 0x2cb8 <__fp_cmp+0x3e>
    2cb0:	08 95       	ret
    2cb2:	0a 26       	eor	r0, r26
    2cb4:	09 f4       	brne	.+2      	; 0x2cb8 <__fp_cmp+0x3e>
    2cb6:	a1 40       	sbci	r26, 0x01	; 1
    2cb8:	a6 95       	lsr	r26
    2cba:	8f ef       	ldi	r24, 0xFF	; 255
    2cbc:	81 1d       	adc	r24, r1
    2cbe:	81 1d       	adc	r24, r1
    2cc0:	08 95       	ret

00002cc2 <__fp_inf>:
    2cc2:	97 f9       	bld	r25, 7
    2cc4:	9f 67       	ori	r25, 0x7F	; 127
    2cc6:	80 e8       	ldi	r24, 0x80	; 128
    2cc8:	70 e0       	ldi	r23, 0x00	; 0
    2cca:	60 e0       	ldi	r22, 0x00	; 0
    2ccc:	08 95       	ret

00002cce <__fp_nan>:
    2cce:	9f ef       	ldi	r25, 0xFF	; 255
    2cd0:	80 ec       	ldi	r24, 0xC0	; 192
    2cd2:	08 95       	ret

00002cd4 <__fp_pscA>:
    2cd4:	00 24       	eor	r0, r0
    2cd6:	0a 94       	dec	r0
    2cd8:	16 16       	cp	r1, r22
    2cda:	17 06       	cpc	r1, r23
    2cdc:	18 06       	cpc	r1, r24
    2cde:	09 06       	cpc	r0, r25
    2ce0:	08 95       	ret

00002ce2 <__fp_pscB>:
    2ce2:	00 24       	eor	r0, r0
    2ce4:	0a 94       	dec	r0
    2ce6:	12 16       	cp	r1, r18
    2ce8:	13 06       	cpc	r1, r19
    2cea:	14 06       	cpc	r1, r20
    2cec:	05 06       	cpc	r0, r21
    2cee:	08 95       	ret

00002cf0 <__fp_round>:
    2cf0:	09 2e       	mov	r0, r25
    2cf2:	03 94       	inc	r0
    2cf4:	00 0c       	add	r0, r0
    2cf6:	11 f4       	brne	.+4      	; 0x2cfc <__fp_round+0xc>
    2cf8:	88 23       	and	r24, r24
    2cfa:	52 f0       	brmi	.+20     	; 0x2d10 <__fp_round+0x20>
    2cfc:	bb 0f       	add	r27, r27
    2cfe:	40 f4       	brcc	.+16     	; 0x2d10 <__fp_round+0x20>
    2d00:	bf 2b       	or	r27, r31
    2d02:	11 f4       	brne	.+4      	; 0x2d08 <__fp_round+0x18>
    2d04:	60 ff       	sbrs	r22, 0
    2d06:	04 c0       	rjmp	.+8      	; 0x2d10 <__fp_round+0x20>
    2d08:	6f 5f       	subi	r22, 0xFF	; 255
    2d0a:	7f 4f       	sbci	r23, 0xFF	; 255
    2d0c:	8f 4f       	sbci	r24, 0xFF	; 255
    2d0e:	9f 4f       	sbci	r25, 0xFF	; 255
    2d10:	08 95       	ret

00002d12 <__fp_split3>:
    2d12:	57 fd       	sbrc	r21, 7
    2d14:	90 58       	subi	r25, 0x80	; 128
    2d16:	44 0f       	add	r20, r20
    2d18:	55 1f       	adc	r21, r21
    2d1a:	59 f0       	breq	.+22     	; 0x2d32 <__fp_splitA+0x10>
    2d1c:	5f 3f       	cpi	r21, 0xFF	; 255
    2d1e:	71 f0       	breq	.+28     	; 0x2d3c <__fp_splitA+0x1a>
    2d20:	47 95       	ror	r20

00002d22 <__fp_splitA>:
    2d22:	88 0f       	add	r24, r24
    2d24:	97 fb       	bst	r25, 7
    2d26:	99 1f       	adc	r25, r25
    2d28:	61 f0       	breq	.+24     	; 0x2d42 <__fp_splitA+0x20>
    2d2a:	9f 3f       	cpi	r25, 0xFF	; 255
    2d2c:	79 f0       	breq	.+30     	; 0x2d4c <__fp_splitA+0x2a>
    2d2e:	87 95       	ror	r24
    2d30:	08 95       	ret
    2d32:	12 16       	cp	r1, r18
    2d34:	13 06       	cpc	r1, r19
    2d36:	14 06       	cpc	r1, r20
    2d38:	55 1f       	adc	r21, r21
    2d3a:	f2 cf       	rjmp	.-28     	; 0x2d20 <__fp_split3+0xe>
    2d3c:	46 95       	lsr	r20
    2d3e:	f1 df       	rcall	.-30     	; 0x2d22 <__fp_splitA>
    2d40:	08 c0       	rjmp	.+16     	; 0x2d52 <__fp_splitA+0x30>
    2d42:	16 16       	cp	r1, r22
    2d44:	17 06       	cpc	r1, r23
    2d46:	18 06       	cpc	r1, r24
    2d48:	99 1f       	adc	r25, r25
    2d4a:	f1 cf       	rjmp	.-30     	; 0x2d2e <__fp_splitA+0xc>
    2d4c:	86 95       	lsr	r24
    2d4e:	71 05       	cpc	r23, r1
    2d50:	61 05       	cpc	r22, r1
    2d52:	08 94       	sec
    2d54:	08 95       	ret

00002d56 <__fp_zero>:
    2d56:	e8 94       	clt

00002d58 <__fp_szero>:
    2d58:	bb 27       	eor	r27, r27
    2d5a:	66 27       	eor	r22, r22
    2d5c:	77 27       	eor	r23, r23
    2d5e:	cb 01       	movw	r24, r22
    2d60:	97 f9       	bld	r25, 7
    2d62:	08 95       	ret

00002d64 <__gesf2>:
    2d64:	8a df       	rcall	.-236    	; 0x2c7a <__fp_cmp>
    2d66:	08 f4       	brcc	.+2      	; 0x2d6a <__gesf2+0x6>
    2d68:	8f ef       	ldi	r24, 0xFF	; 255
    2d6a:	08 95       	ret

00002d6c <_exit>:
    2d6c:	f8 94       	cli

00002d6e <__stop_program>:
    2d6e:	ff cf       	rjmp	.-2      	; 0x2d6e <__stop_program>
