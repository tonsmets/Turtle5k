import ReturnResults.dzn;
import ExternalInterfaces.dzn;


interface iControl
{
	in returnResult tac_getTheBall();
  	in returnResult tac_shootBall();
  	in returnResult tac_attack();

	in returnResult tac_driveToTheBall();

  	behaviour
  	{
  		on tac_getTheBall:{
  			reply(returnResult.busy);
  		}
  		on tac_getTheBall:{
  			reply(returnResult.success);
  		}
  		on tac_getTheBall:{
  			reply(returnResult.fail);
  		}
  		on tac_shootBall:{
  			reply(returnResult.busy);
  		}
  		on tac_shootBall:{
  			reply(returnResult.success);
  		}
  		on tac_shootBall:{
  			reply(returnResult.fail);
  		}
  		on tac_attack:{
  			reply(returnResult.busy);
  		}
  		on tac_attack:{
  			reply(returnResult.success);
  		}
  		on tac_attack:{
  			reply(returnResult.fail);
  		}
  		on tac_driveToTheBall:{
  			reply(returnResult.busy);
  		}
  		on tac_driveToTheBall:{
  			reply(returnResult.fail);
  		}
  		on tac_driveToTheBall:{
  			reply(returnResult.success);
  		}
	}
}

interface iCommands
{
	in returnResult findTheBall();
	in returnResult getToTheBall();
	in returnResult shootTheBall();
	
	in returnResult getCurrentLocation();
	in returnResult driveToLocation();
	in returnResult driveToTheBall();
	
	behaviour
  	{
  		on findTheBall:{
  			reply(returnResult.success);
  		}
  		on findTheBall:{
  			reply(returnResult.fail);
  		}
  		on getToTheBall:{
  			reply(returnResult.success);
  		}
  		on getToTheBall:{
  			reply(returnResult.fail);
  		}
  		on shootTheBall:{
  			reply(returnResult.success);
  		}
  		on shootTheBall:{
  			reply(returnResult.fail);
  		}
  		on getCurrentLocation:{
  			reply(returnResult.success);
  		}
  		on getCurrentLocation:{
  			reply(returnResult.fail);	
  		}
  		on driveToLocation:
  		{
  			reply(returnResult.fail);
  		}
  		on driveToLocation:{
  			reply(returnResult.busy);
  		}
  		on driveToLocation:{
  			reply(returnResult.success);
  		}
  		on driveToTheBall:
  		{
  			reply(returnResult.fail);
  		}
  		on driveToTheBall:{
  			reply(returnResult.busy);
  		}
  		on driveToTheBall:{
  			reply(returnResult.success);
  		}
  		
  	}
}

interface iDrivingControl
{
	in returnResult getToTheBall();
	in returnResult followPath();
	in returnResult driveToLocation();
	behaviour
  	{
    	on getToTheBall:
   		{
   			reply(returnResult.success);
   		}
   		on getToTheBall:
   		{
   			reply(returnResult.fail);
   		}
   		on followPath:
   		{
   			reply(returnResult.success);
   		}
   		on followPath:
   		{
   			reply(returnResult.fail);
   		}
   		on followPath:
   		{
   			reply(returnResult.busy);
   		}
   		on driveToLocation:
   		{
   			reply(returnResult.success);
   		}
   		on driveToLocation:
   		{
   			reply(returnResult.fail);
   		}
   		on driveToLocation:
   		{
   			reply(returnResult.busy);
   		}
  	}
}

interface iBallControl
{	
	in returnResult shootTheBall();
	
	behaviour
  	{
    	on shootTheBall:
   		{
   			reply(returnResult.success);
   		}
   		on shootTheBall:
   		{
   			reply(returnResult.fail);
   		}
  	}
}

interface iPositioningControl
{
	in returnResult findTheBall();
	in returnResult getCurrentLocation();
	in returnResult updatePositions();
	in returnResult determinePath();
	
	behaviour
	{
	  	on findTheBall:
   		{
   			reply(returnResult.success);
   		}
   		on findTheBall:
   		{
   			reply(returnResult.fail);
   		}
   		on getCurrentLocation:
   		{
   			reply(returnResult.success);
   		}
   		on getCurrentLocation:
   		{
   			reply(returnResult.fail);
   		}
   		on updatePositions:
   		{
   			reply(returnResult.fail);
		}
		on updatePositions:
   		{
   			reply(returnResult.success);
		}
		on updatePositions:
   		{
   			reply(returnResult.busy);
		}
   		on determinePath:
   		{
   			reply(returnResult.fail);
		}
		on determinePath:
   		{
   			reply(returnResult.success);
		}
		on determinePath:
   		{
   			reply(returnResult.busy);
		}	
	}
}


component Tactics
{
	provides iControl My_Control;
	
	requires iCommands My_Commands;
	
	behaviour 
	{
		bool busy = false;
		bool failure = false;
		returnResult returnCheck1 = returnResult.success;
		returnResult returnCheck2 = returnResult.success;
		returnResult returnCheck3 = returnResult.success;
		
    	[busy] on My_Control.tac_getTheBall(): 
    	{
    		reply(returnResult.busy);
    	}
    	[busy] on My_Control.tac_shootBall(): 
    	{
    		reply(returnResult.busy);
    	}
    	[busy] on My_Control.tac_attack(): 
    	{
    		reply(returnResult.busy);
    	}
    	[!busy] on My_Control.tac_getTheBall():
    	{
    		returnCheck1 = My_Commands.findTheBall();
    		returnCheck2 = My_Commands.getToTheBall();
    		if((returnCheck1 == returnResult.success) && (returnCheck2 == returnResult.success))
	    	{
	    		reply(returnResult.success);
	    	}
	    	else
	    	{
	    		reply(returnResult.fail);
	    	}
    	}
    	[!busy] on My_Control.tac_shootBall():
    	{
    		returnCheck1 = My_Commands.shootTheBall();
    		if((returnCheck1 == returnResult.success))
	    	{
	    		reply(returnResult.success);
	    	}
	    	else
	    	{
	    		reply(returnResult.fail);
	    	}
    	}
    	[!busy] on My_Control.tac_attack():
    	{
    		returnCheck1 = My_Commands.findTheBall();
    		returnCheck2 = My_Commands.getToTheBall();
    		returnCheck3 = My_Commands.shootTheBall();
    		if((returnCheck1 == returnResult.success) && (returnCheck2 == returnResult.success) && (returnCheck3 == returnResult.success))
	    	{
	    		reply(returnResult.success);
	    	}
	    	else
	    	{
	    		reply(returnResult.fail);
	    	}
    	}   
    	[!busy] on My_Control.tac_driveToTheBall():
    	{
    		returnResult retCheck = returnResult.fail;
    		retCheck = My_Commands.driveToTheBall();
    		if(retCheck == returnResult.fail 
    			|| retCheck == returnResult.busy
    			|| retCheck == returnResult.success)
    		{
    			reply(retCheck);
    		}
    		/*returnResult retCheck = returnResult.fail;
    		retCheck = My_Commands.findTheBall();
    		if(retCheck == returnResult.fail)
    		{
    			reply(retCheck);
    		}
    		retCheck = returnResult.fail;
    		retCheck = My_Commands.getCurrentLocation();
    		if(retCheck == returnResult.fail)
    		{
    			reply(retCheck);
    		}
    		retCheck = returnResult.fail;
    		retCheck = My_Commands.driveToLocation();
    		if(retCheck == returnResult.busy || retCheck == returnResult.success || retCheck == returnResult.fail)
    		{
    			reply(retCheck);
    		}*/
    	}
	}
}

component Commands
{
	provides iCommands My_Commands;
	
	requires iBallControl My_BallControl;
	requires iDrivingControl My_DrivingControl;
	requires iPositioningControl My_PositioningControl;
	      
	behaviour
	{
		returnResult posState = returnResult.fail;
		
		on My_Commands.shootTheBall():
		{
			returnResult result = returnResult.fail;
			result = My_BallControl.shootTheBall();
			if(result == returnResult.success)
			{
				reply(returnResult.success);
			}
			else
			{
				reply(returnResult.fail);
			}	
		}
		on My_Commands.findTheBall():
		{
			returnResult x = returnResult.fail;
			x = My_PositioningControl.findTheBall();
			if(x == returnResult.success)
			{
				reply(returnResult.success);
			}
			else
			{
				reply(returnResult.fail);
			}
		}
		on My_Commands.getToTheBall():
		{
			returnResult result = returnResult.fail;
			result = My_DrivingControl.getToTheBall();
			if(result == returnResult.success)
			{
				reply(returnResult.success);
			}
			else
			{
				reply(returnResult.fail);
			}
		}
		on My_Commands.getCurrentLocation():
		{
			returnResult result = returnResult.fail;
			result = My_PositioningControl.getCurrentLocation();
			reply(result);
		}
		on My_Commands.driveToLocation():
		{
			returnResult result = returnResult.fail;
			result = My_DrivingControl.driveToLocation();
			reply(result);
		}
		on My_Commands.driveToTheBall():
		{
			returnResult result = returnResult.fail;
			if(posState == returnResult.busy)
			{
				result = My_PositioningControl.determinePath();
				posState = result;
				reply(result);
			}
			else if(posState == returnResult.fail)
			{
				result = My_PositioningControl.updatePositions();
				if(result == returnResult.fail)
				{
					reply(result);
				}
				else
				{
					result = My_PositioningControl.determinePath();
					posState = result;
					reply(result);
				}
			}
			else if(posState == returnResult.success)
			{
				result = My_DrivingControl.followPath();
				if(result == returnResult.success)
				{
					posState = returnResult.fail;
				}
				reply(result);
			}
			else
			{
				returnResult result = returnResult.fail;
				posState = result;
				reply(result);
			}
		}
	}
}

component BallControl
{
	provides iBallControl My_BallControl;
	
	requires iBallHandling My_BallHandling;
	requires iShooting My_Shooting;
	
	behaviour
	{
		on My_BallControl.shootTheBall():
		{
			returnResult result = returnResult.fail;
			result = My_Shooting.shootTheBall();
			reply(result);
		}
	}
	
}

component DrivingControl
{
	provides iDrivingControl My_DrivingControl;
	
	requires iWheelControl My_WheelControl;
	
	behaviour
	{
		on My_DrivingControl.getToTheBall():
		{
			returnResult result = returnResult.fail;
			result = My_WheelControl.getToTheBall();
			reply(result);
		}	
		on My_DrivingControl.driveToLocation():
		{
			returnResult result = returnResult.fail;
			result = My_WheelControl.driveToLocation();
			reply(result);
		}
		on My_DrivingControl.followPath():
		{
			returnResult result = returnResult.fail;
			result = My_WheelControl.drivePathFromNavigation();
			reply(result);	
		}
	}
}

component PositioningControl
{ 	
  	provides iPositioningControl My_PositioningControl;
  	
  	requires iWorldModel My_WorldModel;
  	requires iNavigation My_Navigation;
  	
  	behaviour
	{
		on My_PositioningControl.findTheBall():
		{			
			returnResult result = returnResult.fail;
			result = My_WorldModel.getCurrentBallLocation();
			reply(result);
		}
		on My_PositioningControl.getCurrentLocation():
		{
			returnResult result = returnResult.fail;
			result = My_WorldModel.getCurrentRobotLocation();
			reply(result);
		}
		on My_PositioningControl.updatePositions():
		{
			//isthereaball getball get robot
			returnResult result = returnResult.fail;
			result = My_WorldModel.isThereABall();
			if(result == returnResult.success)
			{
				result = My_WorldModel.getCurrentBallLocation();
				result = My_WorldModel.getCurrentRobotLocation();
				reply(result);
			}
			else
			{
				reply(returnResult.fail);
			}
		}
		on My_PositioningControl.determinePath():
		{
			returnResult result = returnResult.fail;
			result = My_Navigation.determinePath();
			reply(result);
		}
	}
}

component Robot
{
  	provides iControl My_Control;

  	system
  	{
  		Tactics tactics;
  		
  		Commands commands;
  		
	    BallControl ballcontrol;
	    DrivingControl drivingControl;
	    PositioningControl positioningcontrol;
	    
	    BallHandling ballhandling;
	    Shooting shooting;
	    WheelControl wheelcontrol;
	    WorldModel worldmodel;
	    Navigation navigation;
	   
	    	
	    My_Control <=> tactics.My_Control;
	    
	    tactics.My_Commands <=> commands.My_Commands;
	    
	    commands.My_BallControl <=> ballcontrol.My_BallControl;
	    commands.My_DrivingControl <=> drivingControl.My_DrivingControl;
	    commands.My_PositioningControl <=> positioningcontrol.My_PositioningControl;
	    
	    ballcontrol.My_BallHandling <=> ballhandling.My_BallHandling;
	    ballcontrol.My_Shooting <=> shooting.My_Shooting;
	    
	    drivingControl.My_WheelControl <=> wheelcontrol.My_WheelControl;
	    
	    positioningcontrol.My_WorldModel <=> worldmodel.My_WorldModel;
	    positioningcontrol.My_Navigation <=> navigation.My_Navigation;
  	}
}
